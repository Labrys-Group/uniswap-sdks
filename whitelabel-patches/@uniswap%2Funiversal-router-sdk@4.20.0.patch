diff --git a/dist/universal-router-sdk.cjs.development.js b/dist/universal-router-sdk.cjs.development.js
index 5539135..4d092ef 100644
--- a/dist/universal-router-sdk.cjs.development.js
+++ b/dist/universal-router-sdk.cjs.development.js
@@ -415,13 +415,13 @@ var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
     creationBlock: 8940568
   }, _routerConfigs2)
 }, _CHAIN_CONFIGS[11155111] = {
-  weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
+  weth: '0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9',
   routerConfigs: (_routerConfigs3 = {}, _routerConfigs3[exports.UniversalRouterVersion.V1_2] = {
-    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-    creationBlock: 3543575
+    address: '0x0000000000000000000000000000000000000000',
+    creationBlock: 0
   }, _routerConfigs3[exports.UniversalRouterVersion.V2_0] = {
-    address: '0x3a9d48ab9751398bbfa63ad67599bb04e4bdf98b',
-    creationBlock: 7259601
+    address: '0x6872c178C147c487A71e6033B665a5644c4E7990',
+    creationBlock: 9499896
   }, _routerConfigs3)
 }, _CHAIN_CONFIGS[137] = {
   weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
diff --git a/dist/universal-router-sdk.cjs.development.js.map b/dist/universal-router-sdk.cjs.development.js.map
index 08feb50..b477a9d 100644
--- a/dist/universal-router-sdk.cjs.development.js.map
+++ b/dist/universal-router-sdk.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/utils/routerCommands.ts","../src/utils/pathCurrency.ts","../src/entities/Command.ts","../src/utils/constants.ts","../src/utils/getCurrencyAddress.ts","../src/utils/numbers.ts","../src/entities/actions/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/actions/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts","../src/utils/commandParser.ts"],"sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  V4_SWAP = 0x10,\n  V3_POSITION_MANAGER_PERMIT = 0x11,\n  V3_POSITION_MANAGER_CALL = 0x12,\n  V4_INITIALIZE_POOL = 0x13,\n  V4_POSITION_MANAGER_CALL = 0x14,\n\n  EXECUTE_SUB_PLAN = 0x21,\n}\n\nexport enum Subparser {\n  V3PathExactIn,\n  V3PathExactOut,\n}\n\nexport enum Parser {\n  Abi,\n  V4Actions,\n  V3Actions,\n}\n\nexport type ParamType = {\n  readonly name: string\n  readonly type: string\n  readonly subparser?: Subparser\n}\n\nexport type CommandDefinition =\n  | {\n      parser: Parser.Abi\n      params: ParamType[]\n    }\n  | {\n      parser: Parser.V4Actions\n    }\n  | {\n      parser: Parser.V3Actions\n    }\n\nconst ALLOW_REVERT_FLAG = 0x80\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([CommandType.EXECUTE_SUB_PLAN])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst POOL_KEY_STRUCT = '(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nexport const COMMAND_DEFINITION: { [key in CommandType]: CommandDefinition } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'commands', type: 'bytes' },\n      { name: 'inputs', type: 'bytes[]' },\n    ],\n  },\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_PERMIT_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_BATCH_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint160' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      {\n        name: 'transferFrom',\n        type: PERMIT2_TRANSFER_FROM_BATCH_STRUCT,\n      },\n    ],\n  },\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactIn, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V3_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactOut, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V4_SWAP]: { parser: Parser.V4Actions },\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n    ],\n  },\n  [CommandType.UNWRAP_WETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.SWEEP]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.TRANSFER]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'value', type: 'uint256' },\n    ],\n  },\n  [CommandType.PAY_PORTION]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'bips', type: 'uint256' },\n    ],\n  },\n  [CommandType.BALANCE_CHECK_ERC20]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'owner', type: 'address' },\n      { name: 'token', type: 'address' },\n      { name: 'minBalance', type: 'uint256' },\n    ],\n  },\n  [CommandType.V4_INITIALIZE_POOL]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'poolKey', type: POOL_KEY_STRUCT },\n      { name: 'sqrtPriceX96', type: 'uint160' },\n    ],\n  },\n\n  // Position Actions\n  [CommandType.V3_POSITION_MANAGER_PERMIT]: { parser: Parser.V3Actions },\n  [CommandType.V3_POSITION_MANAGER_CALL]: { parser: Parser.V3Actions },\n  [CommandType.V4_POSITION_MANAGER_CALL]: { parser: Parser.V4Actions },\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): RoutePlanner {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n    return this\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): RoutePlanner {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n    return this\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const commandDef = COMMAND_DEFINITION[type]\n  switch (commandDef.parser) {\n    case Parser.Abi:\n      const encodedInput = defaultAbiCoder.encode(\n        commandDef.params.map((abi) => abi.type),\n        parameters\n      )\n      return { type, encodedInput }\n    case Parser.V4Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n    case Parser.V3Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n  }\n}\n","import { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport function getPathCurrency(currency: Currency, pool: TPool): Currency {\n  // return currency if the currency matches a currency of the pool\n  if (pool.involvesToken(currency as Token)) {\n    return currency\n\n    // return if currency.wrapped if pool involves wrapped currency\n  } else if (pool.involvesToken(currency.wrapped as Token)) {\n    return currency.wrapped\n\n    // return native currency if pool involves native version of wrapped currency (only applies to V4)\n  } else if (pool instanceof V4Pool && pool.token0.wrapped.equals(currency)) {\n    return pool.token0\n  } else if (pool instanceof V4Pool && pool.token1.wrapped.equals(currency)) {\n    return pool.token1\n  } else {\n    throw new Error(`Expected currency ${currency.symbol} to be either ${pool.token0.symbol} or ${pool.token1.symbol}`)\n  }\n\n  return currency // this line needed for typescript to compile\n}\n","import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterActionType {\n  UniswapTrade = 'UniswapTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterActionType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x66a9893cc07d91d95644aedd05d03f95e1dba8af',\n        creationBlock: 1737658355,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  [11155111]: {\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3a9d48ab9751398bbfa63ad67599bb04e4bdf98b',\n        creationBlock: 7259601,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1095692a6237d83c6a72f3f5efedb9a670c49223',\n        creationBlock: 1737492197,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x851116d9223fabed8e56c0e6b8ad0c31d98b3507',\n        creationBlock: 1737494278,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xa51afafe0263b40edaef0df8781ea9aa03e381a3',\n        creationBlock: 1737487458,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1906c1d672b88cd1b9ac7593301ca990f94eae07',\n        creationBlock: 1737493275,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x94b75331ae8d42c1b61065089b7d48fe14aa73b7',\n        creationBlock: 1737558236,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6ff5693b99212da76ad316178a184ab56d299b43',\n        creationBlock: 1737491485,\n      },\n    },\n  },\n  // blast\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xeabbcb3e8e415306207ef514f660a3f820025be3',\n        creationBlock: 1737564586,\n      },\n    },\n  },\n  // zora\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3315ef7ca28db74abadc6c44570efdf06b04b020',\n        creationBlock: 1737562927,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  // worldchain\n  [480]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n        creationBlock: 4063979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x8ac7bee993bb44dab564ea4bc9ea67bf9eb5e743',\n        creationBlock: 1737559557,\n      },\n    },\n  },\n  [1301]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n        creationBlock: 1241811,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf70536b3bcc1bd1a972dc186a2cf84cc6da6be5d',\n        creationBlock: 7100543,\n      },\n    },\n  },\n  // unichain mainnet\n  [130]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4D73A4411CA1c660035e4AECC8270E5DdDEC8C17',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xef740bf23acae26f6492b10de645d6b98dc8eaf3',\n        creationBlock: 1737568156,\n      },\n    },\n  },\n  [10143]: {\n    weth: '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n    },\n  },\n  [84532]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n    },\n  },\n  [1868]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n    },\n  },\n  [143]: {\n    weth: '0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n","import { Currency } from '@uniswap/sdk-core'\nimport { ETH_ADDRESS } from './constants'\n\nexport function getCurrencyAddress(currency: Currency): string {\n  return currency.isNative ? ETH_ADDRESS : currency.wrapped.address\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Route as V4Route,\n  Trade as V4Trade,\n  Pool as V4Pool,\n  V4Planner,\n  encodeRouteToPath as encodeV4RouteToPath,\n  Actions,\n} from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { getPathCurrency } from '../../utils/pathCurrency'\nimport { Currency, TradeType, Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { getCurrencyAddress } from '../../utils/getCurrencyAddress'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, TPool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap || this.inputRequiresUnwrap || this.options.useRouterBalance) {\n      this.payerIsUser = false\n    } else {\n      this.payerIsUser = true\n    }\n  }\n\n  get isAllV4(): boolean {\n    let result = true\n    for (const swap of this.trade.swaps) {\n      result = result && swap.route.protocol == Protocol.V4\n    }\n    return result\n  }\n\n  // this.trade.swaps is an array of swaps / trades.\n  // we are iterating over one swap (trade) at a time so length is 1\n  // route is either v2, v3, v4, or mixed\n  // pathInput and pathOutput are the currencies of the input and output of the route\n  // this.trade.inputAmount is the input currency of the trade (could be different from pathInput)\n  // this.trade.outputAmount is the output currency of the trade (could be different from pathOutput)\n  // each route can have multiple pools\n  get inputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If first pool is a v4 pool and input currency is native and the path input currency in the route is not native, we need to wrap.\n      return (\n        this.trade.inputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If first pool is not a v4 pool and input currency is native, we need to wrap\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  get inputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If the first pool is a v4 pool and input currency is not native and the path input currency is native, we need to unwrap\n      return (\n        !this.trade.inputAmount.currency.isNative &&\n        (this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If the first pool is not a v4 pool, we don't need to unwrap.\n    return false\n  }\n\n  get outputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is not native but path currency output is native, we need to wrap\n      return (\n        !this.trade.outputAmount.currency.isNative &&\n        (lastRoute as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // if last pool is not v4:\n    // we do not need to wrap because v2 and v3 pools already require wrapped tokens\n    return false\n  }\n\n  get outputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is native and path currency output is not native, we need to unwrap\n      return (\n        this.trade.outputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // else: if path output currency is native, we need to unwrap because v2 and v3 pools already require wrapped tokens\n    return this.trade.outputAmount.currency.isNative\n  }\n\n  get outputRequiresTransition(): boolean {\n    return this.outputRequiresWrap || this.outputRequiresUnwrap\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    } else if (this.inputRequiresUnwrap) {\n      // send wrapped token to router to unwrap\n      planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n        (this.trade.inputAmount.currency as Token).address,\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const routerMustCustody =\n      performAggregatedSlippageCheck || this.outputRequiresTransition || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V4:\n          addV4Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      const pools = this.trade.swaps[0].route.pools\n      const pathOutputCurrencyAddress = getCurrencyAddress(\n        getPathCurrency(this.trade.outputAmount.currency, pools[pools.length - 1])\n      )\n\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [pathOutputCurrencyAddress, this.options.fee.recipient, feeBips])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [pathOutputCurrencyAddress, this.options.flatFee.recipient, feeAmount])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (this.outputRequiresUnwrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else if (this.outputRequiresWrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          getCurrencyAddress(this.trade.outputAmount.currency),\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    // for exactOutput swaps with native input or that perform an inputToken transition (wrap or unwrap)\n    // we need to send back the change to the user\n    if (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade)) {\n      if (this.inputRequiresWrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n      } else if (this.inputRequiresUnwrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else if (this.trade.inputAmount.currency.isNative) {\n        // must refund extra native currency sent along for native v4 trades (no input transition)\n        planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n      }\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      // if router will custody funds, we do aggregated slippage check from router\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\nfunction addV4Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { inputAmount, outputAmount, route }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  // create a deep copy of pools since v4Planner encoding tampers with array\n  const pools = route.pools.map((p) => p) as V4Pool[]\n  const v4Route = new V4Route(pools, inputAmount.currency, outputAmount.currency)\n  const trade = V4Trade.createUncheckedTrade({\n    route: v4Route,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const slippageToleranceOnSwap =\n    routerMustCustody && tradeType == TradeType.EXACT_INPUT ? undefined : options.slippageTolerance\n\n  const v4Planner = new V4Planner()\n  v4Planner.addTrade(trade, slippageToleranceOnSwap)\n  v4Planner.addSettle(trade.route.pathInput, payerIsUser)\n  v4Planner.addTake(\n    trade.route.pathOutput,\n    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n  )\n  planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const route = swap.route as MixedRoute<TInput, TOutput>\n  const inputAmount = swap.inputAmount\n  const outputAmount = swap.outputAmount\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n\n  // single hop, so it can be reduced to plain swap logic for one protocol version\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V4Pool) {\n      return addV4Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = routerMustCustody\n    ? 0\n    : trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let inputToken = route.pathInput\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    const routePool = section[0]\n    const outputToken = getOutputOfPools(section, inputToken)\n    const subRoute = new MixedRoute(new MixedRouteSDK([...section], inputToken, outputToken))\n\n    let nextInputToken\n    let swapRecipient\n\n    if (isLastSectionInRoute(i)) {\n      nextInputToken = outputToken\n      swapRecipient = tradeRecipient\n    } else {\n      const nextPool = sections[i + 1][0]\n      nextInputToken = getPathCurrency(outputToken, nextPool)\n\n      const v2PoolIsSwapRecipient = nextPool instanceof Pair && outputToken.equals(nextInputToken)\n      swapRecipient = v2PoolIsSwapRecipient ? (nextPool as Pair).liquidityToken.address : ROUTER_AS_RECIPIENT\n    }\n\n    if (routePool instanceof V4Pool) {\n      const v4Planner = new V4Planner()\n      const v4SubRoute = new V4Route(section as V4Pool[], subRoute.input, subRoute.output)\n\n      v4Planner.addSettle(inputToken, payerIsUser && i === 0, (i == 0 ? amountIn : CONTRACT_BALANCE) as BigNumber)\n      v4Planner.addAction(Actions.SWAP_EXACT_IN, [\n        {\n          currencyIn: inputToken.isNative ? ETH_ADDRESS : inputToken.address,\n          path: encodeV4RouteToPath(v4SubRoute),\n          amountIn: 0, // denotes open delta, amount set in v4Planner.addSettle()\n          amountOutMinimum: !isLastSectionInRoute(i) ? 0 : amountOut,\n        },\n      ])\n      v4Planner.addTake(outputToken, swapRecipient)\n\n      planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n    } else if (routePool instanceof V3Pool) {\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        encodeMixedRouteToPath(subRoute), // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else if (routePool instanceof Pair) {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        subRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    } else {\n      throw new Error('Unexpected Pool Type')\n    }\n\n    // perform a token transition (wrap/unwrap if necessary)\n    if (!isLastSectionInRoute(i)) {\n      if (outputToken.isNative && !nextInputToken.isNative) {\n        planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, CONTRACT_BALANCE])\n      } else if (!outputToken.isNative && nextInputToken.isNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n      }\n    }\n\n    inputToken = nextInputToken\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { validateAndParseAddress, BigintIsh } from '@uniswap/sdk-core'\nimport { NFTPermitOptions, NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { ROUTER_AS_RECIPIENT } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\nexport function encodeV3PositionPermit(planner: RoutePlanner, permit: NFTPermitOptions, tokenId: BigintIsh): void {\n  const calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n    validateAndParseAddress(permit.spender),\n    tokenId,\n    permit.deadline,\n    permit.v,\n    permit.r,\n    permit.s,\n  ])\n\n  planner.addCommand(CommandType.V3_POSITION_MANAGER_PERMIT, [calldata])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport {\n  MethodParameters,\n  Multicall,\n  Position as V3Position,\n  NonfungiblePositionManager as V3PositionManager,\n  RemoveLiquidityOptions as V3RemoveLiquidityOptions,\n} from '@uniswap/v3-sdk'\nimport {\n  Position as V4Position,\n  V4PositionManager,\n  AddLiquidityOptions as V4AddLiquidityOptions,\n  MintOptions,\n  Pool as V4Pool,\n  PoolKey,\n} from '@uniswap/v4-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Percent, CHAIN_TO_ADDRESSES_MAP, SupportedChainsType } from '@uniswap/sdk-core'\nimport { UniswapTrade, SwapOptions } from './entities/actions/uniswap'\nimport { RoutePlanner, CommandType } from './utils/routerCommands'\nimport { encodePermit, encodeV3PositionPermit } from './utils/inputTokens'\nimport { UNIVERSAL_ROUTER_ADDRESS, UniversalRouterVersion } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport interface MigrateV3ToV4Options {\n  inputPosition: V3Position\n  outputPosition: V4Position\n  v3RemoveLiquidityOptions: V3RemoveLiquidityOptions\n  v4AddLiquidityOptions: V4AddLiquidityOptions\n}\n\nfunction isMint(options: V4AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static swapCallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Builds the call parameters for a migration from a V3 position to a V4 position.\n   * Some requirements of the parameters:\n   *   - v3RemoveLiquidityOptions.collectOptions.recipient must equal v4PositionManager\n   *   - v3RemoveLiquidityOptions.liquidityPercentage must be 100%\n   *   - input pool and output pool must have the same tokens\n   *   - V3 NFT must be approved, or valid inputV3NFTPermit must be provided with UR as spender\n   */\n  public static migrateV3ToV4CallParameters(\n    options: MigrateV3ToV4Options,\n    positionManagerOverride?: string\n  ): MethodParameters {\n    const v4Pool: V4Pool = options.outputPosition.pool\n    const v3Token0 = options.inputPosition.pool.token0\n    const v3Token1 = options.inputPosition.pool.token1\n    const v4PositionManagerAddress =\n      positionManagerOverride ?? CHAIN_TO_ADDRESSES_MAP[v4Pool.chainId as SupportedChainsType].v4PositionManagerAddress\n\n    // owner of the v3 nft must be the receiver of the v4 nft\n\n    // validate the parameters\n    if (v4Pool.currency0.isNative) {\n      invariant(\n        (v4Pool.currency0.wrapped.equals(v3Token0) && v4Pool.currency1.equals(v3Token1)) ||\n          (v4Pool.currency0.wrapped.equals(v3Token1) && v4Pool.currency1.equals(v3Token0)),\n        'TOKEN_MISMATCH'\n      )\n    } else {\n      invariant(v3Token0 === v4Pool.token0, 'TOKEN0_MISMATCH')\n      invariant(v3Token1 === v4Pool.token1, 'TOKEN1_MISMATCH')\n    }\n\n    invariant(\n      options.v3RemoveLiquidityOptions.liquidityPercentage.equalTo(new Percent(100, 100)),\n      'FULL_REMOVAL_REQUIRED'\n    )\n    invariant(options.v3RemoveLiquidityOptions.burnToken == true, 'BURN_TOKEN_REQUIRED')\n    invariant(\n      options.v3RemoveLiquidityOptions.collectOptions.recipient === v4PositionManagerAddress,\n      'RECIPIENT_NOT_POSITION_MANAGER'\n    )\n    invariant(isMint(options.v4AddLiquidityOptions), 'MINT_REQUIRED')\n    invariant(options.v4AddLiquidityOptions.migrate, 'MIGRATE_REQUIRED')\n\n    const planner = new RoutePlanner()\n\n    // to prevent reentrancy by the pool hook, we initialize the v4 pool before moving funds\n    if (options.v4AddLiquidityOptions.createPool) {\n      const poolKey: PoolKey = V4Pool.getPoolKey(\n        v4Pool.currency0,\n        v4Pool.currency1,\n        v4Pool.fee,\n        v4Pool.tickSpacing,\n        v4Pool.hooks\n      )\n      planner.addCommand(CommandType.V4_INITIALIZE_POOL, [poolKey, v4Pool.sqrtRatioX96.toString()])\n      // remove createPool setting, so that it doesnt get encoded again later\n      delete options.v4AddLiquidityOptions.createPool\n    }\n\n    // add position permit to the universal router planner\n    if (options.v3RemoveLiquidityOptions.permit) {\n      // permit spender should be UR\n      const universalRouterAddress = UNIVERSAL_ROUTER_ADDRESS(\n        UniversalRouterVersion.V2_0,\n        options.inputPosition.pool.chainId as SupportedChainsType\n      )\n      invariant(universalRouterAddress == options.v3RemoveLiquidityOptions.permit.spender, 'INVALID_SPENDER')\n      // don't need to transfer it because v3posm uses isApprovedOrOwner()\n      encodeV3PositionPermit(planner, options.v3RemoveLiquidityOptions.permit, options.v3RemoveLiquidityOptions.tokenId)\n      // remove permit so that multicall doesnt add it again\n      delete options.v3RemoveLiquidityOptions.permit\n    }\n\n    // encode v3 withdraw\n    const v3RemoveParams: MethodParameters = V3PositionManager.removeCallParameters(\n      options.inputPosition,\n      options.v3RemoveLiquidityOptions\n    )\n    const v3Calls: string[] = Multicall.decodeMulticall(v3RemoveParams.calldata)\n\n    for (const v3Call of v3Calls) {\n      // slice selector - 0x + 4 bytes = 10 characters\n      const selector = v3Call.slice(0, 10)\n      invariant(\n        selector == V3PositionManager.INTERFACE.getSighash('collect') ||\n          selector == V3PositionManager.INTERFACE.getSighash('decreaseLiquidity') ||\n          selector == V3PositionManager.INTERFACE.getSighash('burn'),\n        'INVALID_V3_CALL: ' + selector\n      )\n      planner.addCommand(CommandType.V3_POSITION_MANAGER_CALL, [v3Call])\n    }\n\n    // encode v4 mint\n    const v4AddParams = V4PositionManager.addCallParameters(options.outputPosition, options.v4AddLiquidityOptions)\n    // only modifyLiquidities can be called by the UniversalRouter\n    const selector = v4AddParams.calldata.slice(0, 10)\n    invariant(selector == V4PositionManager.INTERFACE.getSighash('modifyLiquidities'), 'INVALID_V4_CALL: ' + selector)\n\n    planner.addCommand(CommandType.V4_POSITION_MANAGER_CALL, [v4AddParams.calldata])\n\n    return SwapRouter.encodePlan(planner, BigNumber.from(0), {\n      deadline: BigNumber.from(options.v4AddLiquidityOptions.deadline),\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UnwrapWETH\n  readonly permit2Data?: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool as V3Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool, Route as V4Route } from '@uniswap/v4-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n  V4Pool = 'v4-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V4PoolInRoute = {\n  type: PoolType.V4Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  fee: string\n  tickSpacing: string\n  hooks: string\n  liquidity: string\n  sqrtRatioX96: string\n  tickCurrent: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V4PoolInRoute | V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev4: V4Route<Currency, Currency> | null\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n      const isOnlyV4 = RouterTradeAdapter.isVersionedRoute<V4PoolInRoute>(PoolType.V4Pool, subRoute)\n      return {\n        routev4: isOnlyV4\n          ? new V4Route(\n              (subRoute as V4PoolInRoute[]).map(RouterTradeAdapter.toV4Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toV3Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV4 && !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v4Routes: typedRoutes\n        .filter((route) => route.routev4)\n        .map((route) => ({\n          routev4: route.routev4 as V4Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V4PoolInRoute | V3PoolInRoute | V2PoolInRoute): V4Pool | V3Pool | Pair => {\n    switch (pool.type) {\n      case PoolType.V4Pool:\n        return RouterTradeAdapter.toV4Pool(pool)\n      case PoolType.V3Pool:\n        return RouterTradeAdapter.toV3Pool(pool)\n      case PoolType.V2Pool:\n        return RouterTradeAdapter.toPair(pool)\n      default:\n        throw new Error('Invalid pool type')\n    }\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toV3Pool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): V3Pool {\n    return new V3Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toV4Pool(pool: V4PoolInRoute): V4Pool {\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenIn.address), pool.tokenIn)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenOut.address), pool.tokenOut)\n    return new V4Pool(\n      parsedCurrencyIn,\n      parsedCurrencyOut,\n      parseInt(pool.fee) as FeeAmount,\n      parseInt(pool.tickSpacing),\n      pool.hooks,\n      pool.sqrtRatioX96,\n      pool.liquidity,\n      parseInt(pool.tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute | V4PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute | V4PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import { ethers } from 'ethers'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { V4BaseActionsParser, V4RouterAction } from '@uniswap/v4-sdk'\nimport { CommandType, CommandDefinition, COMMAND_DEFINITION, Subparser, Parser } from '../utils/routerCommands'\n\nexport type Param = {\n  readonly name: string\n  readonly value: any\n}\n\nexport type UniversalRouterCommand = {\n  readonly commandName: string\n  readonly commandType: CommandType\n  readonly params: readonly Param[]\n}\n\nexport type UniversalRouterCall = {\n  readonly commands: readonly UniversalRouterCommand[]\n}\n\nexport type V3PathItem = {\n  readonly tokenIn: string\n  readonly tokenOut: string\n  readonly fee: number\n}\n\nexport interface CommandsDefinition {\n  [key: number]: CommandDefinition\n}\n\n// Parses UniversalRouter V2 commands\nexport abstract class CommandParser {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static parseCalldata(calldata: string): UniversalRouterCall {\n    const genericParser = new GenericCommandParser(COMMAND_DEFINITION)\n    const txDescription = CommandParser.INTERFACE.parseTransaction({ data: calldata })\n    const { commands, inputs } = txDescription.args\n    return genericParser.parse(commands, inputs)\n  }\n}\n\n// Parses commands based on given command definition\nexport class GenericCommandParser {\n  constructor(private readonly commandDefinition: CommandsDefinition) {}\n\n  public parse(commands: string, inputs: string[]): UniversalRouterCall {\n    const commandTypes = GenericCommandParser.getCommands(commands)\n\n    return {\n      commands: commandTypes.map((commandType: CommandType, i: number) => {\n        const commandDef = this.commandDefinition[commandType]\n\n        if (commandDef.parser === Parser.V4Actions) {\n          const { actions } = V4BaseActionsParser.parseCalldata(inputs[i])\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: v4RouterCallToParams(actions),\n          }\n        } else if (commandDef.parser === Parser.Abi) {\n          const abiDef = commandDef.params\n          const rawParams = ethers.utils.defaultAbiCoder.decode(\n            abiDef.map((command) => command.type),\n            inputs[i]\n          )\n\n          const params = rawParams.map((param: any, j: number) => {\n            switch (abiDef[j].subparser) {\n              case Subparser.V3PathExactIn:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactIn(param),\n                }\n              case Subparser.V3PathExactOut:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactOut(param),\n                }\n              default:\n                return {\n                  name: abiDef[j].name,\n                  value: param,\n                }\n            }\n          })\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params,\n          }\n        } else if (commandDef.parser === Parser.V3Actions) {\n          // TODO: implement better parsing here\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: inputs.map((input) => ({ name: 'command', value: input })),\n          }\n        } else {\n          throw new Error(`Unsupported parser: ${commandDef}`)\n        }\n      }),\n    }\n  }\n\n  // parse command types from bytes string\n  private static getCommands(commands: string): CommandType[] {\n    const commandTypes: CommandType[] = []\n\n    for (let i = 2; i < commands.length; i += 2) {\n      const byte = commands.substring(i, i + 2)\n      commandTypes.push(parseInt(byte, 16) as CommandType)\n    }\n\n    return commandTypes\n  }\n}\n\nexport function parseV3PathExactIn(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(0, 40))\n  let loc = 40\n  const res: V3PathItem[] = []\n  while (loc < strippedPath.length) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const fee = parseInt(feeAndTokenOut.substring(0, 6), 16)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(6, 46))\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n    loc += 46\n  }\n\n  return res\n}\n\nexport function parseV3PathExactOut(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(strippedPath.length - 40))\n  let loc = strippedPath.length - 86 // 86 = (20 addr + 3 fee + 20 addr) * 2 (for hex characters)\n  const res: V3PathItem[] = []\n  while (loc >= 0) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(0, 40))\n    const fee = parseInt(feeAndTokenOut.substring(40, 46), 16)\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n\n    loc -= 46\n  }\n\n  return res\n}\n\nfunction v4RouterCallToParams(actions: readonly V4RouterAction[]): readonly Param[] {\n  return actions.map((action) => {\n    return {\n      name: action.actionName,\n      value: action.params.map((param) => {\n        return {\n          name: param.name,\n          value: param.value,\n        }\n      }),\n    }\n  })\n}\n"],"names":["CommandType","Subparser","Parser","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","EXECUTE_SUB_PLAN","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","POOL_KEY_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","COMMAND_DEFINITION","_COMMAND_DEFINITION","parser","Abi","params","name","type","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","subparser","V3PathExactIn","V3_SWAP_EXACT_OUT","V3PathExactOut","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","V4_SWAP","V4Actions","WRAP_ETH","UNWRAP_WETH","SWEEP","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","V4_INITIALIZE_POOL","V3_POSITION_MANAGER_PERMIT","V3Actions","V3_POSITION_MANAGER_CALL","V4_POSITION_MANAGER_CALL","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","commandDef","defaultAbiCoder","encode","map","abi","getPathCurrency","currency","pool","involvesToken","wrapped","V4Pool","token0","equals","token1","symbol","RouterActionType","UniversalRouterVersion","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs0","_routerConfigs1","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","UNIVERSAL_ROUTER_ADDRESS","version","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","getCurrencyAddress","isNative","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","inputRequiresUnwrap","useRouterBalance","payerIsUser","planner","_config","maximumAmountIn","slippageTolerance","inputAmount","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","length","routerMustCustody","outputRequiresTransition","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","V4","addV4Swap","MIXED","addMixedSwap","minimumAmountOut","pools","pathOutputCurrencyAddress","outputAmount","feeBips","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","outputRequiresUnwrap","outputRequiresWrap","riskOfPartialFill","safeMode","_createClass","key","get","result","_iterator2","_step2","firstPool","pathInput","lastRoute","lastPool","pathOutput","_ref","V2Trade","path","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","_ref3","p","v4Route","V4Route","V4Trade","slippageToleranceOnSwap","undefined","v4Planner","V4Planner","addTrade","addSettle","addTake","_options$recipient","finalize","tradeRecipient","_options$recipient2","V3Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","section","routePool","outputToken","getOutputOfPools","subRoute","MixedRoute","MixedRouteSDK","nextInputToken","swapRecipient","nextPool","v2PoolIsSwapRecipient","liquidityToken","v4SubRoute","input","output","addAction","Actions","SWAP_EXACT_IN","currencyIn","encodeV4RouteToPath","amountOutMinimum","encodeMixedRouteToPath","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeV3PositionPermit","permit","tokenId","calldata","NonfungiblePositionManager","INTERFACE","encodeFunctionData","validateAndParseAddress","spender","deadline","v","r","s","encodeInputTokenOptions","permit2TransferFrom","permit2Permit","details","process","invariant","isMint","Object","keys","some","k","SwapRouter","swapCallParameters","trades","inputCurrency","inputTokenPermit","nativeCurrencyValue","encodePlan","deadlineOrPreviousBlockhash","migrateV3ToV4CallParameters","positionManagerOverride","v4Pool","outputPosition","v3Token0","inputPosition","v3Token1","v4PositionManagerAddress","CHAIN_TO_ADDRESSES_MAP","currency0","currency1","v3RemoveLiquidityOptions","liquidityPercentage","equalTo","burnToken","collectOptions","v4AddLiquidityOptions","migrate","createPool","poolKey","getPoolKey","tickSpacing","hooks","sqrtRatioX96","universalRouterAddress","v3RemoveParams","V3PositionManager","removeCallParameters","v3Calls","Multicall","decodeMulticall","v3Call","selector","slice","getSighash","v4AddParams","V4PositionManager","addCallParameters","config","functionSignature","toHexString","Interface","UniversalRouter","UnwrapWETH","wethAddress","toLowerCase","permit2Data","_","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","isOnlyV4","routev4","toV4Pool","routev3","V3Route","toV3Pool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","filter","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","decimals","buyFeeBps","sellFeeBps","Token","parseInt","liquidity","tickCurrent","every","reserve0","reserve1","CommandParser","parseCalldata","genericParser","GenericCommandParser","txDescription","parseTransaction","data","_txDescription$args","args","parse","commandDefinition","commandTypes","getCommands","commandType","_this","_V4BaseActionsParser$","V4BaseActionsParser","actions","commandName","v4RouterCallToParams","abiDef","rawParams","decode","param","j","parseV3PathExactIn","parseV3PathExactOut","byte","substring","strippedPath","replace","getAddress","loc","res","feeAndTokenOut","action","actionName"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/utils/routerCommands.ts","../src/utils/pathCurrency.ts","../src/entities/Command.ts","../src/utils/constants.ts","../src/utils/getCurrencyAddress.ts","../src/utils/numbers.ts","../src/entities/actions/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/actions/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts","../src/utils/commandParser.ts"],"sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  V4_SWAP = 0x10,\n  V3_POSITION_MANAGER_PERMIT = 0x11,\n  V3_POSITION_MANAGER_CALL = 0x12,\n  V4_INITIALIZE_POOL = 0x13,\n  V4_POSITION_MANAGER_CALL = 0x14,\n\n  EXECUTE_SUB_PLAN = 0x21,\n}\n\nexport enum Subparser {\n  V3PathExactIn,\n  V3PathExactOut,\n}\n\nexport enum Parser {\n  Abi,\n  V4Actions,\n  V3Actions,\n}\n\nexport type ParamType = {\n  readonly name: string\n  readonly type: string\n  readonly subparser?: Subparser\n}\n\nexport type CommandDefinition =\n  | {\n      parser: Parser.Abi\n      params: ParamType[]\n    }\n  | {\n      parser: Parser.V4Actions\n    }\n  | {\n      parser: Parser.V3Actions\n    }\n\nconst ALLOW_REVERT_FLAG = 0x80\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([CommandType.EXECUTE_SUB_PLAN])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst POOL_KEY_STRUCT = '(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nexport const COMMAND_DEFINITION: { [key in CommandType]: CommandDefinition } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'commands', type: 'bytes' },\n      { name: 'inputs', type: 'bytes[]' },\n    ],\n  },\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_PERMIT_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_BATCH_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint160' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      {\n        name: 'transferFrom',\n        type: PERMIT2_TRANSFER_FROM_BATCH_STRUCT,\n      },\n    ],\n  },\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactIn, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V3_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactOut, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V4_SWAP]: { parser: Parser.V4Actions },\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n    ],\n  },\n  [CommandType.UNWRAP_WETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.SWEEP]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.TRANSFER]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'value', type: 'uint256' },\n    ],\n  },\n  [CommandType.PAY_PORTION]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'bips', type: 'uint256' },\n    ],\n  },\n  [CommandType.BALANCE_CHECK_ERC20]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'owner', type: 'address' },\n      { name: 'token', type: 'address' },\n      { name: 'minBalance', type: 'uint256' },\n    ],\n  },\n  [CommandType.V4_INITIALIZE_POOL]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'poolKey', type: POOL_KEY_STRUCT },\n      { name: 'sqrtPriceX96', type: 'uint160' },\n    ],\n  },\n\n  // Position Actions\n  [CommandType.V3_POSITION_MANAGER_PERMIT]: { parser: Parser.V3Actions },\n  [CommandType.V3_POSITION_MANAGER_CALL]: { parser: Parser.V3Actions },\n  [CommandType.V4_POSITION_MANAGER_CALL]: { parser: Parser.V4Actions },\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): RoutePlanner {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n    return this\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): RoutePlanner {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n    return this\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const commandDef = COMMAND_DEFINITION[type]\n  switch (commandDef.parser) {\n    case Parser.Abi:\n      const encodedInput = defaultAbiCoder.encode(\n        commandDef.params.map((abi) => abi.type),\n        parameters\n      )\n      return { type, encodedInput }\n    case Parser.V4Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n    case Parser.V3Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n  }\n}\n","import { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport function getPathCurrency(currency: Currency, pool: TPool): Currency {\n  // return currency if the currency matches a currency of the pool\n  if (pool.involvesToken(currency as Token)) {\n    return currency\n\n    // return if currency.wrapped if pool involves wrapped currency\n  } else if (pool.involvesToken(currency.wrapped as Token)) {\n    return currency.wrapped\n\n    // return native currency if pool involves native version of wrapped currency (only applies to V4)\n  } else if (pool instanceof V4Pool && pool.token0.wrapped.equals(currency)) {\n    return pool.token0\n  } else if (pool instanceof V4Pool && pool.token1.wrapped.equals(currency)) {\n    return pool.token1\n  } else {\n    throw new Error(`Expected currency ${currency.symbol} to be either ${pool.token0.symbol} or ${pool.token1.symbol}`)\n  }\n\n  return currency // this line needed for typescript to compile\n}\n","import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterActionType {\n  UniswapTrade = 'UniswapTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterActionType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x66a9893cc07d91d95644aedd05d03f95e1dba8af',\n        creationBlock: 1737658355,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  \n  [11155111]: {\n    weth: '0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9',\n    routerConfigs: {\n     [UniversalRouterVersion.V1_2]: {\n        address: '0x0000000000000000000000000000000000000000',\n        creationBlock: 0,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6872c178C147c487A71e6033B665a5644c4E7990',\n        creationBlock: 9499896,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1095692a6237d83c6a72f3f5efedb9a670c49223',\n        creationBlock: 1737492197,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x851116d9223fabed8e56c0e6b8ad0c31d98b3507',\n        creationBlock: 1737494278,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xa51afafe0263b40edaef0df8781ea9aa03e381a3',\n        creationBlock: 1737487458,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1906c1d672b88cd1b9ac7593301ca990f94eae07',\n        creationBlock: 1737493275,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x94b75331ae8d42c1b61065089b7d48fe14aa73b7',\n        creationBlock: 1737558236,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6ff5693b99212da76ad316178a184ab56d299b43',\n        creationBlock: 1737491485,\n      },\n    },\n  },\n  // blast\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xeabbcb3e8e415306207ef514f660a3f820025be3',\n        creationBlock: 1737564586,\n      },\n    },\n  },\n  // zora\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3315ef7ca28db74abadc6c44570efdf06b04b020',\n        creationBlock: 1737562927,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  // worldchain\n  [480]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n        creationBlock: 4063979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x8ac7bee993bb44dab564ea4bc9ea67bf9eb5e743',\n        creationBlock: 1737559557,\n      },\n    },\n  },\n  [1301]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n        creationBlock: 1241811,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf70536b3bcc1bd1a972dc186a2cf84cc6da6be5d',\n        creationBlock: 7100543,\n      },\n    },\n  },\n  // unichain mainnet\n  [130]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4D73A4411CA1c660035e4AECC8270E5DdDEC8C17',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xef740bf23acae26f6492b10de645d6b98dc8eaf3',\n        creationBlock: 1737568156,\n      },\n    },\n  },\n  [10143]: {\n    weth: '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n    },\n  },\n  [84532]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n    },\n  },\n  [1868]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n    },\n  },\n  [143]: {\n    weth: '0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n","import { Currency } from '@uniswap/sdk-core'\nimport { ETH_ADDRESS } from './constants'\n\nexport function getCurrencyAddress(currency: Currency): string {\n  return currency.isNative ? ETH_ADDRESS : currency.wrapped.address\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Route as V4Route,\n  Trade as V4Trade,\n  Pool as V4Pool,\n  V4Planner,\n  encodeRouteToPath as encodeV4RouteToPath,\n  Actions,\n} from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { getPathCurrency } from '../../utils/pathCurrency'\nimport { Currency, TradeType, Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { getCurrencyAddress } from '../../utils/getCurrencyAddress'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, TPool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap || this.inputRequiresUnwrap || this.options.useRouterBalance) {\n      this.payerIsUser = false\n    } else {\n      this.payerIsUser = true\n    }\n  }\n\n  get isAllV4(): boolean {\n    let result = true\n    for (const swap of this.trade.swaps) {\n      result = result && swap.route.protocol == Protocol.V4\n    }\n    return result\n  }\n\n  // this.trade.swaps is an array of swaps / trades.\n  // we are iterating over one swap (trade) at a time so length is 1\n  // route is either v2, v3, v4, or mixed\n  // pathInput and pathOutput are the currencies of the input and output of the route\n  // this.trade.inputAmount is the input currency of the trade (could be different from pathInput)\n  // this.trade.outputAmount is the output currency of the trade (could be different from pathOutput)\n  // each route can have multiple pools\n  get inputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If first pool is a v4 pool and input currency is native and the path input currency in the route is not native, we need to wrap.\n      return (\n        this.trade.inputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If first pool is not a v4 pool and input currency is native, we need to wrap\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  get inputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If the first pool is a v4 pool and input currency is not native and the path input currency is native, we need to unwrap\n      return (\n        !this.trade.inputAmount.currency.isNative &&\n        (this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If the first pool is not a v4 pool, we don't need to unwrap.\n    return false\n  }\n\n  get outputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is not native but path currency output is native, we need to wrap\n      return (\n        !this.trade.outputAmount.currency.isNative &&\n        (lastRoute as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // if last pool is not v4:\n    // we do not need to wrap because v2 and v3 pools already require wrapped tokens\n    return false\n  }\n\n  get outputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is native and path currency output is not native, we need to unwrap\n      return (\n        this.trade.outputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // else: if path output currency is native, we need to unwrap because v2 and v3 pools already require wrapped tokens\n    return this.trade.outputAmount.currency.isNative\n  }\n\n  get outputRequiresTransition(): boolean {\n    return this.outputRequiresWrap || this.outputRequiresUnwrap\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    } else if (this.inputRequiresUnwrap) {\n      // send wrapped token to router to unwrap\n      planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n        (this.trade.inputAmount.currency as Token).address,\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const routerMustCustody =\n      performAggregatedSlippageCheck || this.outputRequiresTransition || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V4:\n          addV4Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      const pools = this.trade.swaps[0].route.pools\n      const pathOutputCurrencyAddress = getCurrencyAddress(\n        getPathCurrency(this.trade.outputAmount.currency, pools[pools.length - 1])\n      )\n\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [pathOutputCurrencyAddress, this.options.fee.recipient, feeBips])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [pathOutputCurrencyAddress, this.options.flatFee.recipient, feeAmount])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (this.outputRequiresUnwrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else if (this.outputRequiresWrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          getCurrencyAddress(this.trade.outputAmount.currency),\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    // for exactOutput swaps with native input or that perform an inputToken transition (wrap or unwrap)\n    // we need to send back the change to the user\n    if (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade)) {\n      if (this.inputRequiresWrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n      } else if (this.inputRequiresUnwrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else if (this.trade.inputAmount.currency.isNative) {\n        // must refund extra native currency sent along for native v4 trades (no input transition)\n        planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n      }\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      // if router will custody funds, we do aggregated slippage check from router\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\nfunction addV4Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { inputAmount, outputAmount, route }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  // create a deep copy of pools since v4Planner encoding tampers with array\n  const pools = route.pools.map((p) => p) as V4Pool[]\n  const v4Route = new V4Route(pools, inputAmount.currency, outputAmount.currency)\n  const trade = V4Trade.createUncheckedTrade({\n    route: v4Route,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const slippageToleranceOnSwap =\n    routerMustCustody && tradeType == TradeType.EXACT_INPUT ? undefined : options.slippageTolerance\n\n  const v4Planner = new V4Planner()\n  v4Planner.addTrade(trade, slippageToleranceOnSwap)\n  v4Planner.addSettle(trade.route.pathInput, payerIsUser)\n  v4Planner.addTake(\n    trade.route.pathOutput,\n    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n  )\n  planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const route = swap.route as MixedRoute<TInput, TOutput>\n  const inputAmount = swap.inputAmount\n  const outputAmount = swap.outputAmount\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n\n  // single hop, so it can be reduced to plain swap logic for one protocol version\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V4Pool) {\n      return addV4Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = routerMustCustody\n    ? 0\n    : trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let inputToken = route.pathInput\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    const routePool = section[0]\n    const outputToken = getOutputOfPools(section, inputToken)\n    const subRoute = new MixedRoute(new MixedRouteSDK([...section], inputToken, outputToken))\n\n    let nextInputToken\n    let swapRecipient\n\n    if (isLastSectionInRoute(i)) {\n      nextInputToken = outputToken\n      swapRecipient = tradeRecipient\n    } else {\n      const nextPool = sections[i + 1][0]\n      nextInputToken = getPathCurrency(outputToken, nextPool)\n\n      const v2PoolIsSwapRecipient = nextPool instanceof Pair && outputToken.equals(nextInputToken)\n      swapRecipient = v2PoolIsSwapRecipient ? (nextPool as Pair).liquidityToken.address : ROUTER_AS_RECIPIENT\n    }\n\n    if (routePool instanceof V4Pool) {\n      const v4Planner = new V4Planner()\n      const v4SubRoute = new V4Route(section as V4Pool[], subRoute.input, subRoute.output)\n\n      v4Planner.addSettle(inputToken, payerIsUser && i === 0, (i == 0 ? amountIn : CONTRACT_BALANCE) as BigNumber)\n      v4Planner.addAction(Actions.SWAP_EXACT_IN, [\n        {\n          currencyIn: inputToken.isNative ? ETH_ADDRESS : inputToken.address,\n          path: encodeV4RouteToPath(v4SubRoute),\n          amountIn: 0, // denotes open delta, amount set in v4Planner.addSettle()\n          amountOutMinimum: !isLastSectionInRoute(i) ? 0 : amountOut,\n        },\n      ])\n      v4Planner.addTake(outputToken, swapRecipient)\n\n      planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n    } else if (routePool instanceof V3Pool) {\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        encodeMixedRouteToPath(subRoute), // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else if (routePool instanceof Pair) {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        subRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    } else {\n      throw new Error('Unexpected Pool Type')\n    }\n\n    // perform a token transition (wrap/unwrap if necessary)\n    if (!isLastSectionInRoute(i)) {\n      if (outputToken.isNative && !nextInputToken.isNative) {\n        planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, CONTRACT_BALANCE])\n      } else if (!outputToken.isNative && nextInputToken.isNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n      }\n    }\n\n    inputToken = nextInputToken\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { validateAndParseAddress, BigintIsh } from '@uniswap/sdk-core'\nimport { NFTPermitOptions, NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { ROUTER_AS_RECIPIENT } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\nexport function encodeV3PositionPermit(planner: RoutePlanner, permit: NFTPermitOptions, tokenId: BigintIsh): void {\n  const calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n    validateAndParseAddress(permit.spender),\n    tokenId,\n    permit.deadline,\n    permit.v,\n    permit.r,\n    permit.s,\n  ])\n\n  planner.addCommand(CommandType.V3_POSITION_MANAGER_PERMIT, [calldata])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport {\n  MethodParameters,\n  Multicall,\n  Position as V3Position,\n  NonfungiblePositionManager as V3PositionManager,\n  RemoveLiquidityOptions as V3RemoveLiquidityOptions,\n} from '@uniswap/v3-sdk'\nimport {\n  Position as V4Position,\n  V4PositionManager,\n  AddLiquidityOptions as V4AddLiquidityOptions,\n  MintOptions,\n  Pool as V4Pool,\n  PoolKey,\n} from '@uniswap/v4-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Percent, CHAIN_TO_ADDRESSES_MAP, SupportedChainsType } from '@uniswap/sdk-core'\nimport { UniswapTrade, SwapOptions } from './entities/actions/uniswap'\nimport { RoutePlanner, CommandType } from './utils/routerCommands'\nimport { encodePermit, encodeV3PositionPermit } from './utils/inputTokens'\nimport { UNIVERSAL_ROUTER_ADDRESS, UniversalRouterVersion } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport interface MigrateV3ToV4Options {\n  inputPosition: V3Position\n  outputPosition: V4Position\n  v3RemoveLiquidityOptions: V3RemoveLiquidityOptions\n  v4AddLiquidityOptions: V4AddLiquidityOptions\n}\n\nfunction isMint(options: V4AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static swapCallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Builds the call parameters for a migration from a V3 position to a V4 position.\n   * Some requirements of the parameters:\n   *   - v3RemoveLiquidityOptions.collectOptions.recipient must equal v4PositionManager\n   *   - v3RemoveLiquidityOptions.liquidityPercentage must be 100%\n   *   - input pool and output pool must have the same tokens\n   *   - V3 NFT must be approved, or valid inputV3NFTPermit must be provided with UR as spender\n   */\n  public static migrateV3ToV4CallParameters(\n    options: MigrateV3ToV4Options,\n    positionManagerOverride?: string\n  ): MethodParameters {\n    const v4Pool: V4Pool = options.outputPosition.pool\n    const v3Token0 = options.inputPosition.pool.token0\n    const v3Token1 = options.inputPosition.pool.token1\n    const v4PositionManagerAddress =\n      positionManagerOverride ?? CHAIN_TO_ADDRESSES_MAP[v4Pool.chainId as SupportedChainsType].v4PositionManagerAddress\n\n    // owner of the v3 nft must be the receiver of the v4 nft\n\n    // validate the parameters\n    if (v4Pool.currency0.isNative) {\n      invariant(\n        (v4Pool.currency0.wrapped.equals(v3Token0) && v4Pool.currency1.equals(v3Token1)) ||\n          (v4Pool.currency0.wrapped.equals(v3Token1) && v4Pool.currency1.equals(v3Token0)),\n        'TOKEN_MISMATCH'\n      )\n    } else {\n      invariant(v3Token0 === v4Pool.token0, 'TOKEN0_MISMATCH')\n      invariant(v3Token1 === v4Pool.token1, 'TOKEN1_MISMATCH')\n    }\n\n    invariant(\n      options.v3RemoveLiquidityOptions.liquidityPercentage.equalTo(new Percent(100, 100)),\n      'FULL_REMOVAL_REQUIRED'\n    )\n    invariant(options.v3RemoveLiquidityOptions.burnToken == true, 'BURN_TOKEN_REQUIRED')\n    invariant(\n      options.v3RemoveLiquidityOptions.collectOptions.recipient === v4PositionManagerAddress,\n      'RECIPIENT_NOT_POSITION_MANAGER'\n    )\n    invariant(isMint(options.v4AddLiquidityOptions), 'MINT_REQUIRED')\n    invariant(options.v4AddLiquidityOptions.migrate, 'MIGRATE_REQUIRED')\n\n    const planner = new RoutePlanner()\n\n    // to prevent reentrancy by the pool hook, we initialize the v4 pool before moving funds\n    if (options.v4AddLiquidityOptions.createPool) {\n      const poolKey: PoolKey = V4Pool.getPoolKey(\n        v4Pool.currency0,\n        v4Pool.currency1,\n        v4Pool.fee,\n        v4Pool.tickSpacing,\n        v4Pool.hooks\n      )\n      planner.addCommand(CommandType.V4_INITIALIZE_POOL, [poolKey, v4Pool.sqrtRatioX96.toString()])\n      // remove createPool setting, so that it doesnt get encoded again later\n      delete options.v4AddLiquidityOptions.createPool\n    }\n\n    // add position permit to the universal router planner\n    if (options.v3RemoveLiquidityOptions.permit) {\n      // permit spender should be UR\n      const universalRouterAddress = UNIVERSAL_ROUTER_ADDRESS(\n        UniversalRouterVersion.V2_0,\n        options.inputPosition.pool.chainId as SupportedChainsType\n      )\n      invariant(universalRouterAddress == options.v3RemoveLiquidityOptions.permit.spender, 'INVALID_SPENDER')\n      // don't need to transfer it because v3posm uses isApprovedOrOwner()\n      encodeV3PositionPermit(planner, options.v3RemoveLiquidityOptions.permit, options.v3RemoveLiquidityOptions.tokenId)\n      // remove permit so that multicall doesnt add it again\n      delete options.v3RemoveLiquidityOptions.permit\n    }\n\n    // encode v3 withdraw\n    const v3RemoveParams: MethodParameters = V3PositionManager.removeCallParameters(\n      options.inputPosition,\n      options.v3RemoveLiquidityOptions\n    )\n    const v3Calls: string[] = Multicall.decodeMulticall(v3RemoveParams.calldata)\n\n    for (const v3Call of v3Calls) {\n      // slice selector - 0x + 4 bytes = 10 characters\n      const selector = v3Call.slice(0, 10)\n      invariant(\n        selector == V3PositionManager.INTERFACE.getSighash('collect') ||\n          selector == V3PositionManager.INTERFACE.getSighash('decreaseLiquidity') ||\n          selector == V3PositionManager.INTERFACE.getSighash('burn'),\n        'INVALID_V3_CALL: ' + selector\n      )\n      planner.addCommand(CommandType.V3_POSITION_MANAGER_CALL, [v3Call])\n    }\n\n    // encode v4 mint\n    const v4AddParams = V4PositionManager.addCallParameters(options.outputPosition, options.v4AddLiquidityOptions)\n    // only modifyLiquidities can be called by the UniversalRouter\n    const selector = v4AddParams.calldata.slice(0, 10)\n    invariant(selector == V4PositionManager.INTERFACE.getSighash('modifyLiquidities'), 'INVALID_V4_CALL: ' + selector)\n\n    planner.addCommand(CommandType.V4_POSITION_MANAGER_CALL, [v4AddParams.calldata])\n\n    return SwapRouter.encodePlan(planner, BigNumber.from(0), {\n      deadline: BigNumber.from(options.v4AddLiquidityOptions.deadline),\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UnwrapWETH\n  readonly permit2Data?: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool as V3Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool, Route as V4Route } from '@uniswap/v4-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n  V4Pool = 'v4-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V4PoolInRoute = {\n  type: PoolType.V4Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  fee: string\n  tickSpacing: string\n  hooks: string\n  liquidity: string\n  sqrtRatioX96: string\n  tickCurrent: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V4PoolInRoute | V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev4: V4Route<Currency, Currency> | null\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n      const isOnlyV4 = RouterTradeAdapter.isVersionedRoute<V4PoolInRoute>(PoolType.V4Pool, subRoute)\n      return {\n        routev4: isOnlyV4\n          ? new V4Route(\n              (subRoute as V4PoolInRoute[]).map(RouterTradeAdapter.toV4Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toV3Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV4 && !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v4Routes: typedRoutes\n        .filter((route) => route.routev4)\n        .map((route) => ({\n          routev4: route.routev4 as V4Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V4PoolInRoute | V3PoolInRoute | V2PoolInRoute): V4Pool | V3Pool | Pair => {\n    switch (pool.type) {\n      case PoolType.V4Pool:\n        return RouterTradeAdapter.toV4Pool(pool)\n      case PoolType.V3Pool:\n        return RouterTradeAdapter.toV3Pool(pool)\n      case PoolType.V2Pool:\n        return RouterTradeAdapter.toPair(pool)\n      default:\n        throw new Error('Invalid pool type')\n    }\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toV3Pool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): V3Pool {\n    return new V3Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toV4Pool(pool: V4PoolInRoute): V4Pool {\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenIn.address), pool.tokenIn)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenOut.address), pool.tokenOut)\n    return new V4Pool(\n      parsedCurrencyIn,\n      parsedCurrencyOut,\n      parseInt(pool.fee) as FeeAmount,\n      parseInt(pool.tickSpacing),\n      pool.hooks,\n      pool.sqrtRatioX96,\n      pool.liquidity,\n      parseInt(pool.tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute | V4PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute | V4PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import { ethers } from 'ethers'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { V4BaseActionsParser, V4RouterAction } from '@uniswap/v4-sdk'\nimport { CommandType, CommandDefinition, COMMAND_DEFINITION, Subparser, Parser } from '../utils/routerCommands'\n\nexport type Param = {\n  readonly name: string\n  readonly value: any\n}\n\nexport type UniversalRouterCommand = {\n  readonly commandName: string\n  readonly commandType: CommandType\n  readonly params: readonly Param[]\n}\n\nexport type UniversalRouterCall = {\n  readonly commands: readonly UniversalRouterCommand[]\n}\n\nexport type V3PathItem = {\n  readonly tokenIn: string\n  readonly tokenOut: string\n  readonly fee: number\n}\n\nexport interface CommandsDefinition {\n  [key: number]: CommandDefinition\n}\n\n// Parses UniversalRouter V2 commands\nexport abstract class CommandParser {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static parseCalldata(calldata: string): UniversalRouterCall {\n    const genericParser = new GenericCommandParser(COMMAND_DEFINITION)\n    const txDescription = CommandParser.INTERFACE.parseTransaction({ data: calldata })\n    const { commands, inputs } = txDescription.args\n    return genericParser.parse(commands, inputs)\n  }\n}\n\n// Parses commands based on given command definition\nexport class GenericCommandParser {\n  constructor(private readonly commandDefinition: CommandsDefinition) {}\n\n  public parse(commands: string, inputs: string[]): UniversalRouterCall {\n    const commandTypes = GenericCommandParser.getCommands(commands)\n\n    return {\n      commands: commandTypes.map((commandType: CommandType, i: number) => {\n        const commandDef = this.commandDefinition[commandType]\n\n        if (commandDef.parser === Parser.V4Actions) {\n          const { actions } = V4BaseActionsParser.parseCalldata(inputs[i])\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: v4RouterCallToParams(actions),\n          }\n        } else if (commandDef.parser === Parser.Abi) {\n          const abiDef = commandDef.params\n          const rawParams = ethers.utils.defaultAbiCoder.decode(\n            abiDef.map((command) => command.type),\n            inputs[i]\n          )\n\n          const params = rawParams.map((param: any, j: number) => {\n            switch (abiDef[j].subparser) {\n              case Subparser.V3PathExactIn:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactIn(param),\n                }\n              case Subparser.V3PathExactOut:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactOut(param),\n                }\n              default:\n                return {\n                  name: abiDef[j].name,\n                  value: param,\n                }\n            }\n          })\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params,\n          }\n        } else if (commandDef.parser === Parser.V3Actions) {\n          // TODO: implement better parsing here\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: inputs.map((input) => ({ name: 'command', value: input })),\n          }\n        } else {\n          throw new Error(`Unsupported parser: ${commandDef}`)\n        }\n      }),\n    }\n  }\n\n  // parse command types from bytes string\n  private static getCommands(commands: string): CommandType[] {\n    const commandTypes: CommandType[] = []\n\n    for (let i = 2; i < commands.length; i += 2) {\n      const byte = commands.substring(i, i + 2)\n      commandTypes.push(parseInt(byte, 16) as CommandType)\n    }\n\n    return commandTypes\n  }\n}\n\nexport function parseV3PathExactIn(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(0, 40))\n  let loc = 40\n  const res: V3PathItem[] = []\n  while (loc < strippedPath.length) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const fee = parseInt(feeAndTokenOut.substring(0, 6), 16)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(6, 46))\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n    loc += 46\n  }\n\n  return res\n}\n\nexport function parseV3PathExactOut(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(strippedPath.length - 40))\n  let loc = strippedPath.length - 86 // 86 = (20 addr + 3 fee + 20 addr) * 2 (for hex characters)\n  const res: V3PathItem[] = []\n  while (loc >= 0) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(0, 40))\n    const fee = parseInt(feeAndTokenOut.substring(40, 46), 16)\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n\n    loc -= 46\n  }\n\n  return res\n}\n\nfunction v4RouterCallToParams(actions: readonly V4RouterAction[]): readonly Param[] {\n  return actions.map((action) => {\n    return {\n      name: action.actionName,\n      value: action.params.map((param) => {\n        return {\n          name: param.name,\n          value: param.value,\n        }\n      }),\n    }\n  })\n}\n"],"names":["CommandType","Subparser","Parser","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","EXECUTE_SUB_PLAN","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","POOL_KEY_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","COMMAND_DEFINITION","_COMMAND_DEFINITION","parser","Abi","params","name","type","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","subparser","V3PathExactIn","V3_SWAP_EXACT_OUT","V3PathExactOut","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","V4_SWAP","V4Actions","WRAP_ETH","UNWRAP_WETH","SWEEP","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","V4_INITIALIZE_POOL","V3_POSITION_MANAGER_PERMIT","V3Actions","V3_POSITION_MANAGER_CALL","V4_POSITION_MANAGER_CALL","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","commandDef","defaultAbiCoder","encode","map","abi","getPathCurrency","currency","pool","involvesToken","wrapped","V4Pool","token0","equals","token1","symbol","RouterActionType","UniversalRouterVersion","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs0","_routerConfigs1","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","UNIVERSAL_ROUTER_ADDRESS","version","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","getCurrencyAddress","isNative","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","inputRequiresUnwrap","useRouterBalance","payerIsUser","planner","_config","maximumAmountIn","slippageTolerance","inputAmount","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","length","routerMustCustody","outputRequiresTransition","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","V4","addV4Swap","MIXED","addMixedSwap","minimumAmountOut","pools","pathOutputCurrencyAddress","outputAmount","feeBips","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","outputRequiresUnwrap","outputRequiresWrap","riskOfPartialFill","safeMode","_createClass","key","get","result","_iterator2","_step2","firstPool","pathInput","lastRoute","lastPool","pathOutput","_ref","V2Trade","path","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","_ref3","p","v4Route","V4Route","V4Trade","slippageToleranceOnSwap","undefined","v4Planner","V4Planner","addTrade","addSettle","addTake","_options$recipient","finalize","tradeRecipient","_options$recipient2","V3Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","section","routePool","outputToken","getOutputOfPools","subRoute","MixedRoute","MixedRouteSDK","nextInputToken","swapRecipient","nextPool","v2PoolIsSwapRecipient","liquidityToken","v4SubRoute","input","output","addAction","Actions","SWAP_EXACT_IN","currencyIn","encodeV4RouteToPath","amountOutMinimum","encodeMixedRouteToPath","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeV3PositionPermit","permit","tokenId","calldata","NonfungiblePositionManager","INTERFACE","encodeFunctionData","validateAndParseAddress","spender","deadline","v","r","s","encodeInputTokenOptions","permit2TransferFrom","permit2Permit","details","process","invariant","isMint","Object","keys","some","k","SwapRouter","swapCallParameters","trades","inputCurrency","inputTokenPermit","nativeCurrencyValue","encodePlan","deadlineOrPreviousBlockhash","migrateV3ToV4CallParameters","positionManagerOverride","v4Pool","outputPosition","v3Token0","inputPosition","v3Token1","v4PositionManagerAddress","CHAIN_TO_ADDRESSES_MAP","currency0","currency1","v3RemoveLiquidityOptions","liquidityPercentage","equalTo","burnToken","collectOptions","v4AddLiquidityOptions","migrate","createPool","poolKey","getPoolKey","tickSpacing","hooks","sqrtRatioX96","universalRouterAddress","v3RemoveParams","V3PositionManager","removeCallParameters","v3Calls","Multicall","decodeMulticall","v3Call","selector","slice","getSighash","v4AddParams","V4PositionManager","addCallParameters","config","functionSignature","toHexString","Interface","UniversalRouter","UnwrapWETH","wethAddress","toLowerCase","permit2Data","_","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","isOnlyV4","routev4","toV4Pool","routev3","V3Route","toV3Pool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","filter","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","decimals","buyFeeBps","sellFeeBps","Token","parseInt","liquidity","tickCurrent","every","reserve0","reserve1","CommandParser","parseCalldata","genericParser","GenericCommandParser","txDescription","parseTransaction","data","_txDescription$args","args","parse","commandDefinition","commandTypes","getCommands","commandType","_this","_V4BaseActionsParser$","V4BaseActionsParser","actions","commandName","v4RouterCallToParams","abiDef","rawParams","decode","param","j","parseV3PathExactIn","parseV3PathExactOut","byte","substring","strippedPath","replace","getAddress","loc","res","feeAndTokenOut","action","actionName"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/universal-router-sdk.cjs.production.min.js b/dist/universal-router-sdk.cjs.production.min.js
index 22a84ce..bfe8c68 100644
--- a/dist/universal-router-sdk.cjs.production.min.js
+++ b/dist/universal-router-sdk.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var t,r,o,n,a=e(require("tiny-invariant")),i=e(require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json")),s=require("@ethersproject/abi"),u=require("ethers"),p=require("@uniswap/v3-sdk"),d=require("@uniswap/v4-sdk"),m=require("@uniswap/sdk-core"),c=require("ethers/lib/utils"),l=require("@uniswap/v2-sdk"),f=require("@uniswap/router-sdk");function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,o=Array(t);r<t;r++)o[r]=e[r];return o}function T(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(r)return(r=r.call(e)).next.bind(r);if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return A(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?A(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function C(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:t+""}require("jsbi"),require("bignumber.js"),(r=exports.CommandType||(exports.CommandType={}))[r.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",r[r.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",r[r.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",r[r.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",r[r.SWEEP=4]="SWEEP",r[r.TRANSFER=5]="TRANSFER",r[r.PAY_PORTION=6]="PAY_PORTION",r[r.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",r[r.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",r[r.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",r[r.WRAP_ETH=11]="WRAP_ETH",r[r.UNWRAP_WETH=12]="UNWRAP_WETH",r[r.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",r[r.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",r[r.V4_SWAP=16]="V4_SWAP",r[r.V3_POSITION_MANAGER_PERMIT=17]="V3_POSITION_MANAGER_PERMIT",r[r.V3_POSITION_MANAGER_CALL=18]="V3_POSITION_MANAGER_CALL",r[r.V4_INITIALIZE_POOL=19]="V4_INITIALIZE_POOL",r[r.V4_POSITION_MANAGER_CALL=20]="V4_POSITION_MANAGER_CALL",r[r.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",(o=exports.Subparser||(exports.Subparser={}))[o.V3PathExactIn=0]="V3PathExactIn",o[o.V3PathExactOut=1]="V3PathExactOut",(n=exports.Parser||(exports.Parser={}))[n.Abi=0]="Abi",n[n.V4Actions=1]="V4Actions",n[n.V3Actions=2]="V3Actions";var x,y,P,h,v,_,R,b,E,V,I,w,g,k,U,N,O,B,S,F,D,q,M,W,L,X,H,j,G=new Set([exports.CommandType.EXECUTE_SUB_PLAN]),K=((t={})[exports.CommandType.EXECUTE_SUB_PLAN]={parser:exports.Parser.Abi,params:[{name:"commands",type:"bytes"},{name:"inputs",type:"bytes[]"}]},t[exports.CommandType.PERMIT2_PERMIT]={parser:exports.Parser.Abi,params:[{name:"permit",type:"((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)"},{name:"signature",type:"bytes"}]},t[exports.CommandType.PERMIT2_PERMIT_BATCH]={parser:exports.Parser.Abi,params:[{name:"permit",type:"((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)"},{name:"signature",type:"bytes"}]},t[exports.CommandType.PERMIT2_TRANSFER_FROM]={parser:exports.Parser.Abi,params:[{name:"token",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint160"}]},t[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH]={parser:exports.Parser.Abi,params:[{name:"transferFrom",type:"(address from,address to,uint160 amount,address token)[]"}]},t[exports.CommandType.V3_SWAP_EXACT_IN]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountIn",type:"uint256"},{name:"amountOutMin",type:"uint256"},{name:"path",subparser:exports.Subparser.V3PathExactIn,type:"bytes"},{name:"payerIsUser",type:"bool"}]},t[exports.CommandType.V3_SWAP_EXACT_OUT]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountOut",type:"uint256"},{name:"amountInMax",type:"uint256"},{name:"path",subparser:exports.Subparser.V3PathExactOut,type:"bytes"},{name:"payerIsUser",type:"bool"}]},t[exports.CommandType.V2_SWAP_EXACT_IN]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountIn",type:"uint256"},{name:"amountOutMin",type:"uint256"},{name:"path",type:"address[]"},{name:"payerIsUser",type:"bool"}]},t[exports.CommandType.V2_SWAP_EXACT_OUT]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountOut",type:"uint256"},{name:"amountInMax",type:"uint256"},{name:"path",type:"address[]"},{name:"payerIsUser",type:"bool"}]},t[exports.CommandType.V4_SWAP]={parser:exports.Parser.V4Actions},t[exports.CommandType.WRAP_ETH]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}]},t[exports.CommandType.UNWRAP_WETH]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountMin",type:"uint256"}]},t[exports.CommandType.SWEEP]={parser:exports.Parser.Abi,params:[{name:"token",type:"address"},{name:"recipient",type:"address"},{name:"amountMin",type:"uint256"}]},t[exports.CommandType.TRANSFER]={parser:exports.Parser.Abi,params:[{name:"token",type:"address"},{name:"recipient",type:"address"},{name:"value",type:"uint256"}]},t[exports.CommandType.PAY_PORTION]={parser:exports.Parser.Abi,params:[{name:"token",type:"address"},{name:"recipient",type:"address"},{name:"bips",type:"uint256"}]},t[exports.CommandType.BALANCE_CHECK_ERC20]={parser:exports.Parser.Abi,params:[{name:"owner",type:"address"},{name:"token",type:"address"},{name:"minBalance",type:"uint256"}]},t[exports.CommandType.V4_INITIALIZE_POOL]={parser:exports.Parser.Abi,params:[{name:"poolKey",type:"(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)"},{name:"sqrtPriceX96",type:"uint160"}]},t[exports.CommandType.V3_POSITION_MANAGER_PERMIT]={parser:exports.Parser.V3Actions},t[exports.CommandType.V3_POSITION_MANAGER_CALL]={parser:exports.Parser.V3Actions},t[exports.CommandType.V4_POSITION_MANAGER_CALL]={parser:exports.Parser.V4Actions},t),Y=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){return this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0),this},t.addCommand=function(e,t,r){void 0===r&&(r=!1);var o=function(e,t){var r=K[e];switch(r.parser){case exports.Parser.Abi:return{type:e,encodedInput:c.defaultAbiCoder.encode(r.params.map((function(e){return e.type})),t)};case exports.Parser.V4Actions:case exports.Parser.V3Actions:return{type:e,encodedInput:t[0]}}}(e,t);if(this.inputs.push(o.encodedInput),r){if(!G.has(o.type))throw new Error("command type: "+o.type+" cannot be allowed to revert");o.type=128|o.type}return this.commands=this.commands.concat(o.type.toString(16).padStart(2,"0")),this},e}();function Z(e,t){if(t.involvesToken(e))return e;if(t.involvesToken(e.wrapped))return e.wrapped;if(t instanceof d.Pool&&t.token0.wrapped.equals(e))return t.token0;if(t instanceof d.Pool&&t.token1.wrapped.equals(e))return t.token1;throw new Error("Expected currency "+e.symbol+" to be either "+t.token0.symbol+" or "+t.token1.symbol)}(x=exports.RouterActionType||(exports.RouterActionType={})).UniswapTrade="UniswapTrade",x.UnwrapWETH="UnwrapWETH",(j=exports.UniversalRouterVersion||(exports.UniversalRouterVersion={})).V1_2="1.2",j.V2_0="2.0";var z=((H={})[1]={weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",routerConfigs:(y={},y[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17143817},y[exports.UniversalRouterVersion.V2_0]={address:"0x66a9893cc07d91d95644aedd05d03f95e1dba8af",creationBlock:1737658355},y)},H[5]={weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",routerConfigs:(P={},P[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8940568},P[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8940568},P)},H[11155111]={weth:"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",routerConfigs:(h={},h[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:3543575},h[exports.UniversalRouterVersion.V2_0]={address:"0x3a9d48ab9751398bbfa63ad67599bb04e4bdf98b",creationBlock:7259601},h)},H[137]={weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",routerConfigs:(v={},v[exports.UniversalRouterVersion.V1_2]={address:"0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2",creationBlock:52210153},v[exports.UniversalRouterVersion.V2_0]={address:"0x1095692a6237d83c6a72f3f5efedb9a670c49223",creationBlock:1737492197},v)},H[80001]={weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",routerConfigs:(_={},_[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:35176052},_[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:35176052},_)},H[10]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(R={},R[exports.UniversalRouterVersion.V1_2]={address:"0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8",creationBlock:114702266},R[exports.UniversalRouterVersion.V2_0]={address:"0x851116d9223fabed8e56c0e6b8ad0c31d98b3507",creationBlock:1737494278},R)},H[420]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(b={},b[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8887728},b[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8887728},b)},H[42161]={weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",routerConfigs:(E={},E[exports.UniversalRouterVersion.V1_2]={address:"0x5E325eDA8064b456f4781070C0738d849c824258",creationBlock:169472836},E[exports.UniversalRouterVersion.V2_0]={address:"0xa51afafe0263b40edaef0df8781ea9aa03e381a3",creationBlock:1737487458},E)},H[421613]={weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",routerConfigs:(V={},V[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:18815277},V[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:18815277},V)},H[42220]={weth:"0x0000000000000000000000000000000000000000",routerConfigs:(I={},I[exports.UniversalRouterVersion.V1_2]={address:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",creationBlock:21407637},I[exports.UniversalRouterVersion.V2_0]={address:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",creationBlock:21407637},I)},H[44787]={weth:"0x0000000000000000000000000000000000000000",routerConfigs:(w={},w[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17566658},w[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17566658},w)},H[56]={weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",routerConfigs:(g={},g[exports.UniversalRouterVersion.V1_2]={address:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",creationBlock:35160263},g[exports.UniversalRouterVersion.V2_0]={address:"0x1906c1d672b88cd1b9ac7593301ca990f94eae07",creationBlock:1737493275},g)},H[43114]={weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",routerConfigs:(k={},k[exports.UniversalRouterVersion.V1_2]={address:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",creationBlock:40237257},k[exports.UniversalRouterVersion.V2_0]={address:"0x94b75331ae8d42c1b61065089b7d48fe14aa73b7",creationBlock:1737558236},k)},H[84531]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(U={},U[exports.UniversalRouterVersion.V1_2]={address:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",creationBlock:6915289},U[exports.UniversalRouterVersion.V2_0]={address:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",creationBlock:6915289},U)},H[8453]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(N={},N[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:9107268},N[exports.UniversalRouterVersion.V2_0]={address:"0x6ff5693b99212da76ad316178a184ab56d299b43",creationBlock:1737491485},N)},H[81457]={weth:"0x4300000000000000000000000000000000000004",routerConfigs:(O={},O[exports.UniversalRouterVersion.V1_2]={address:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",creationBlock:1116444},O[exports.UniversalRouterVersion.V2_0]={address:"0xeabbcb3e8e415306207ef514f660a3f820025be3",creationBlock:1737564586},O)},H[7777777]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(B={},B[exports.UniversalRouterVersion.V1_2]={address:"0x2986d9721A49838ab4297b695858aF7F17f38014",creationBlock:11832155},B[exports.UniversalRouterVersion.V2_0]={address:"0x3315ef7ca28db74abadc6c44570efdf06b04b020",creationBlock:1737562927},B)},H[324]={weth:"0x5aea5775959fbc2557cc8789bc1bf90a239d9a91",routerConfigs:(S={},S[exports.UniversalRouterVersion.V1_2]={address:"0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06",creationBlock:12640979},S[exports.UniversalRouterVersion.V2_0]={address:"0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06",creationBlock:12640979},S)},H[480]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(F={},F[exports.UniversalRouterVersion.V1_2]={address:"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",creationBlock:4063979},F[exports.UniversalRouterVersion.V2_0]={address:"0x8ac7bee993bb44dab564ea4bc9ea67bf9eb5e743",creationBlock:1737559557},F)},H[1301]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(D={},D[exports.UniversalRouterVersion.V1_2]={address:"0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6",creationBlock:1241811},D[exports.UniversalRouterVersion.V2_0]={address:"0xf70536b3bcc1bd1a972dc186a2cf84cc6da6be5d",creationBlock:7100543},D)},H[130]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(q={},q[exports.UniversalRouterVersion.V1_2]={address:"0x4D73A4411CA1c660035e4AECC8270E5DdDEC8C17",creationBlock:23678},q[exports.UniversalRouterVersion.V2_0]={address:"0xef740bf23acae26f6492b10de645d6b98dc8eaf3",creationBlock:1737568156},q)},H[10143]={weth:"0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701",routerConfigs:(M={},M[exports.UniversalRouterVersion.V1_2]={address:"0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893",creationBlock:23678},M[exports.UniversalRouterVersion.V2_0]={address:"0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893",creationBlock:23678},M)},H[84532]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(W={},W[exports.UniversalRouterVersion.V1_2]={address:"0x492e6456d9528771018deb9e87ef7750ef184104",creationBlock:20216585},W[exports.UniversalRouterVersion.V2_0]={address:"0x492e6456d9528771018deb9e87ef7750ef184104",creationBlock:20216585},W)},H[1868]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(L={},L[exports.UniversalRouterVersion.V1_2]={address:"0x0e2850543f69f678257266e0907ff9a58b3f13de",creationBlock:3254782},L[exports.UniversalRouterVersion.V2_0]={address:"0x0e2850543f69f678257266e0907ff9a58b3f13de",creationBlock:3254782},L)},H[143]={weth:"0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A",routerConfigs:(X={},X[exports.UniversalRouterVersion.V1_2]={address:"0x0d97dc33264bfc1c226207428a79b26757fb9dc3",creationBlock:29255937},X[exports.UniversalRouterVersion.V2_0]={address:"0x0d97dc33264bfc1c226207428a79b26757fb9dc3",creationBlock:29255937},X)},H),Q=function(e,t){if(!(t in z))throw new Error("Universal Router not deployed on chain "+t);return z[t].routerConfigs[e].address},$=function(e){if(!(e in z))throw new Error("Universal Router not deployed on chain "+e);if("0x0000000000000000000000000000000000000000"==z[e].weth)throw new Error("Chain "+e+" does not have WETH");return z[e].weth},J=u.BigNumber.from(2).pow(255),ee="0x0000000000000000000000000000000000000000",te="0x0000000000000000000000000000000000000001",re="0x0000000000000000000000000000000000000002";function oe(e){return e.isNative?ee:e.wrapped.address}var ne=new m.Percent(50,100),ae=function(){function e(e,t){if(this.trade=e,this.options=t,this.tradeType=exports.RouterActionType.UniswapTrade,t.fee&&t.flatFee)throw new Error("Only one fee option permitted");this.payerIsUser=!(this.inputRequiresWrap||this.inputRequiresUnwrap||this.options.useRouterBalance)}var t,r;return e.prototype.encode=function(e,t){var r;this.inputRequiresWrap?e.addCommand(exports.CommandType.WRAP_ETH,[re,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]):this.inputRequiresUnwrap&&(e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[this.trade.inputAmount.currency.address,re,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),e.addCommand(exports.CommandType.UNWRAP_WETH,[re,0])),this.options.recipient=null!=(r=this.options.recipient)?r:te;for(var o,n,a=this.trade.tradeType===m.TradeType.EXACT_INPUT&&this.trade.routes.length>2||this.outputRequiresTransition||!!(o=this.options).fee||!!o.flatFee,i=T(this.trade.swaps);!(n=i()).done;){var s=n.value;switch(s.route.protocol){case f.Protocol.V2:ie(e,s,this.trade.tradeType,this.options,this.payerIsUser,a);break;case f.Protocol.V3:se(e,s,this.trade.tradeType,this.options,this.payerIsUser,a);break;case f.Protocol.V4:ue(e,s,this.trade.tradeType,this.options,this.payerIsUser,a);break;case f.Protocol.MIXED:pe(e,s,this.trade.tradeType,this.options,this.payerIsUser,a);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}var d=u.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());if(a){var c=this.trade.swaps[0].route.pools,l=oe(Z(this.trade.outputAmount.currency,c[c.length-1]));if(this.options.fee){var A=p.toHex(this.options.fee.fee.multiply(1e4).quotient);e.addCommand(exports.CommandType.PAY_PORTION,[l,this.options.fee.recipient,A]),this.trade.tradeType===m.TradeType.EXACT_OUTPUT&&(d=d.sub(d.mul(A).div(1e4)))}if(this.options.flatFee){var C=this.options.flatFee.amount;if(d.lt(C))throw new Error("Flat fee amount greater than minimumAmountOut");e.addCommand(exports.CommandType.TRANSFER,[l,this.options.flatFee.recipient,C]),this.trade.tradeType===m.TradeType.EXACT_OUTPUT&&(d=d.sub(C))}this.outputRequiresUnwrap?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,d]):this.outputRequiresWrap?e.addCommand(exports.CommandType.WRAP_ETH,[this.options.recipient,J]):e.addCommand(exports.CommandType.SWEEP,[oe(this.trade.outputAmount.currency),this.options.recipient,d])}(this.trade.tradeType===m.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(ne))&&(this.inputRequiresWrap?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,0]):this.inputRequiresUnwrap?e.addCommand(exports.CommandType.WRAP_ETH,[this.options.recipient,J]):this.trade.inputAmount.currency.isNative&&e.addCommand(exports.CommandType.SWEEP,[ee,this.options.recipient,0])),this.options.safeMode&&e.addCommand(exports.CommandType.SWEEP,[ee,this.options.recipient,0])},t=e,(r=[{key:"isAllV4",get:function(){for(var e,t=!0,r=T(this.trade.swaps);!(e=r()).done;)t=t&&e.value.route.protocol==f.Protocol.V4;return t}},{key:"inputRequiresWrap",get:function(){return this.trade.swaps[0].route.pools[0]instanceof d.Pool?this.trade.inputAmount.currency.isNative&&!this.trade.swaps[0].route.pathInput.isNative:this.trade.inputAmount.currency.isNative}},{key:"inputRequiresUnwrap",get:function(){return this.trade.swaps[0].route.pools[0]instanceof d.Pool&&!this.trade.inputAmount.currency.isNative&&this.trade.swaps[0].route.pathInput.isNative}},{key:"outputRequiresWrap",get:function(){var e=this.trade.swaps[0].route;return e.pools[e.pools.length-1]instanceof d.Pool&&!this.trade.outputAmount.currency.isNative&&e.pathOutput.isNative}},{key:"outputRequiresUnwrap",get:function(){var e=this.trade.swaps[0].route;return e.pools[e.pools.length-1]instanceof d.Pool?this.trade.outputAmount.currency.isNative&&!this.trade.swaps[0].route.pathOutput.isNative:this.trade.outputAmount.currency.isNative}},{key:"outputRequiresTransition",get:function(){return this.outputRequiresWrap||this.outputRequiresUnwrap}}])&&function(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,C(o.key),o)}}(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),t}();function ie(e,t,r,o,n,a){var i=t.route,s=new l.Trade(i,r==m.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,r);r==m.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[a?re:o.recipient,s.maximumAmountIn(o.slippageTolerance).quotient.toString(),a?0:s.minimumAmountOut(o.slippageTolerance).quotient.toString(),i.path.map((function(e){return e.wrapped.address})),n]):r==m.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT,[a?re:o.recipient,s.minimumAmountOut(o.slippageTolerance).quotient.toString(),s.maximumAmountIn(o.slippageTolerance).quotient.toString(),i.path.map((function(e){return e.wrapped.address})),n])}function se(e,t,r,o,n,a){var i=t.route,s=p.Trade.createUncheckedTrade({route:i,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:r}),u=p.encodeRouteToPath(i,s.tradeType===m.TradeType.EXACT_OUTPUT);r==m.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[a?re:o.recipient,s.maximumAmountIn(o.slippageTolerance).quotient.toString(),a?0:s.minimumAmountOut(o.slippageTolerance).quotient.toString(),u,n]):r==m.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT,[a?re:o.recipient,s.minimumAmountOut(o.slippageTolerance).quotient.toString(),s.maximumAmountIn(o.slippageTolerance).quotient.toString(),u,n])}function ue(e,t,r,o,n,a){var i,s=t.inputAmount,u=t.outputAmount,p=t.route.pools.map((function(e){return e})),c=new d.Route(p,s.currency,u.currency),l=d.Trade.createUncheckedTrade({route:c,inputAmount:s,outputAmount:u,tradeType:r}),f=a&&r==m.TradeType.EXACT_INPUT?void 0:o.slippageTolerance,A=new d.V4Planner;A.addTrade(l,f),A.addSettle(l.route.pathInput,n),A.addTake(l.route.pathOutput,a?re:null!=(i=o.recipient)?i:te),e.addCommand(exports.CommandType.V4_SWAP,[A.finalize()])}function pe(e,t,r,o,n,a){var i,s=t.route,u=t.inputAmount,m=t.outputAmount,c=a?re:null!=(i=o.recipient)?i:te;if(1===s.pools.length){if(s.pools[0]instanceof d.Pool)return ue(e,t,r,o,n,a);if(s.pools[0]instanceof p.Pool)return se(e,t,r,o,n,a);if(s.pools[0]instanceof l.Pair)return ie(e,t,r,o,n,a);throw new Error("Invalid route type")}for(var A=f.MixedRouteTrade.createUncheckedTrade({route:s,inputAmount:u,outputAmount:m,tradeType:r}),T=A.maximumAmountIn(o.slippageTolerance,u).quotient.toString(),C=a?0:A.minimumAmountOut(o.slippageTolerance,m).quotient.toString(),x=f.partitionMixedRouteByProtocol(s),y=function(e){return e===x.length-1},P=s.pathInput,h=0;h<x.length;h++){var v=x[h],_=v[0],R=f.getOutputOfPools(v,P),b=new f.MixedRoute(new f.MixedRouteSDK([].concat(v),P,R)),E=void 0,V=void 0;if(y(h))E=R,V=c;else{var I=x[h+1][0];E=Z(R,I),V=I instanceof l.Pair&&R.equals(E)?I.liquidityToken.address:re}if(_ instanceof d.Pool){var w=new d.V4Planner,g=new d.Route(v,b.input,b.output);w.addSettle(P,n&&0===h,0==h?T:J),w.addAction(d.Actions.SWAP_EXACT_IN,[{currencyIn:P.isNative?ee:P.address,path:d.encodeRouteToPath(g),amountIn:0,amountOutMinimum:y(h)?C:0}]),w.addTake(R,V),e.addCommand(exports.CommandType.V4_SWAP,[w.finalize()])}else if(_ instanceof p.Pool)e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[V,0==h?T:J,y(h)?C:0,f.encodeMixedRouteToPath(b),n&&0===h]);else{if(!(_ instanceof l.Pair))throw new Error("Unexpected Pool Type");e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[V,0===h?T:J,y(h)?C:0,b.path.map((function(e){return e.wrapped.address})),n&&0===h])}y(h)||(R.isNative&&!E.isNative?e.addCommand(exports.CommandType.WRAP_ETH,[re,J]):!R.isNative&&E.isNative&&e.addCommand(exports.CommandType.UNWRAP_WETH,[re,0])),P=E}}function de(e,t){var r=t.signature,o=u.ethers.utils.arrayify(t.signature).length;65!==o&&64!==o||(r=u.ethers.utils.joinSignature(u.ethers.utils.splitSignature(t.signature))),e.addCommand(exports.CommandType.PERMIT2_PERMIT,[t,r])}var me=function(){function e(){}return e.swapCallParameters=function(t,r){var o=new Y,n=new ae(t,r),i=n.trade.inputAmount.currency;i.isNative&&r.inputTokenPermit&&a(!1),r.inputTokenPermit&&de(o,r.inputTokenPermit);var s=u.BigNumber.from(i.isNative?n.trade.maximumAmountIn(r.slippageTolerance).quotient.toString():0);return n.encode(o,{allowRevert:!1}),e.encodePlan(o,s,{deadline:r.deadlineOrPreviousBlockhash?u.BigNumber.from(r.deadlineOrPreviousBlockhash):void 0})},e.migrateV3ToV4CallParameters=function(t,r){var o=t.outputPosition.pool,n=t.inputPosition.pool.token0,i=t.inputPosition.pool.token1,s=null!=r?r:m.CHAIN_TO_ADDRESSES_MAP[o.chainId].v4PositionManagerAddress;o.currency0.isNative?o.currency0.wrapped.equals(n)&&o.currency1.equals(i)||o.currency0.wrapped.equals(i)&&o.currency1.equals(n)||a(!1):(n!==o.token0&&a(!1),i!==o.token1&&a(!1)),t.v3RemoveLiquidityOptions.liquidityPercentage.equalTo(new m.Percent(100,100))||a(!1),1!=t.v3RemoveLiquidityOptions.burnToken&&a(!1),t.v3RemoveLiquidityOptions.collectOptions.recipient!==s&&a(!1),!function(e){return Object.keys(e).some((function(e){return"recipient"===e}))}(t.v4AddLiquidityOptions)&&a(!1),t.v4AddLiquidityOptions.migrate||a(!1);var c=new Y;if(t.v4AddLiquidityOptions.createPool){var l=d.Pool.getPoolKey(o.currency0,o.currency1,o.fee,o.tickSpacing,o.hooks);c.addCommand(exports.CommandType.V4_INITIALIZE_POOL,[l,o.sqrtRatioX96.toString()]),delete t.v4AddLiquidityOptions.createPool}t.v3RemoveLiquidityOptions.permit&&(Q(exports.UniversalRouterVersion.V2_0,t.inputPosition.pool.chainId)!=t.v3RemoveLiquidityOptions.permit.spender&&a(!1),function(e,t,r){var o=p.NonfungiblePositionManager.INTERFACE.encodeFunctionData("permit",[m.validateAndParseAddress(t.spender),r,t.deadline,t.v,t.r,t.s]);e.addCommand(exports.CommandType.V3_POSITION_MANAGER_PERMIT,[o])}(c,t.v3RemoveLiquidityOptions.permit,t.v3RemoveLiquidityOptions.tokenId),delete t.v3RemoveLiquidityOptions.permit);for(var f,A=p.NonfungiblePositionManager.removeCallParameters(t.inputPosition,t.v3RemoveLiquidityOptions),C=T(p.Multicall.decodeMulticall(A.calldata));!(f=C()).done;){var x=f.value,y=x.slice(0,10);y!=p.NonfungiblePositionManager.INTERFACE.getSighash("collect")&&y!=p.NonfungiblePositionManager.INTERFACE.getSighash("decreaseLiquidity")&&y!=p.NonfungiblePositionManager.INTERFACE.getSighash("burn")&&a(!1),c.addCommand(exports.CommandType.V3_POSITION_MANAGER_CALL,[x])}var P=d.V4PositionManager.addCallParameters(t.outputPosition,t.v4AddLiquidityOptions);return P.calldata.slice(0,10)!=d.V4PositionManager.INTERFACE.getSighash("modifyLiquidities")&&a(!1),c.addCommand(exports.CommandType.V4_POSITION_MANAGER_CALL,[P.calldata]),e.encodePlan(c,u.BigNumber.from(0),{deadline:u.BigNumber.from(t.v4AddLiquidityOptions.deadline)})},e.encodePlan=function(t,r,o){void 0===o&&(o={});var n=t.commands,a=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(o.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",o.deadline?[n,a,o.deadline]:[n,a]),value:r.toHexString()}},e}();me.INTERFACE=new s.Interface(i.abi);var ce,le=function(){function e(e,t,r){this.tradeType=exports.RouterActionType.UnwrapWETH,this.wethAddress=$(t),this.amount=e,r&&(r.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&a(!1),r.details.amount>=e||a(!1),this.permit2Data=r)}return e.prototype.encode=function(e,t){!function(e,t){t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&a(!1),t.permit2Permit&&de(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:re,t.permit2TransferFrom.amount])}(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.UNWRAP_WETH,[re,this.amount])},e}();(ce=exports.PoolType||(exports.PoolType={})).V2Pool="v2-pool",ce.V3Pool="v3-pool",ce.V4Pool="v4-pool";var fe=function(e){return e.toLowerCase()===ee.toLowerCase()||e.toLowerCase()==="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".toLowerCase()},Ae=function(){function e(){}return e.fromClassicQuote=function(t){var r=t.route,o=t.tokenIn,n=t.tokenOut;if(!r)throw new Error("Expected route to be present");if(!r.length)throw new Error("Expected there to be at least one route");if(r.some((function(e){return!e.length})))throw new Error("Expected all routes to have at least one pool");var a=r[0],i=a[0].tokenIn,s=a[a.length-1].tokenOut;if(!i||!s)throw new Error("Expected both tokenIn and tokenOut to be present");if(i.chainId!==s.chainId)throw new Error("Expected tokenIn and tokenOut to be have same chainId");var u=e.toCurrency(fe(o),i),c=e.toCurrency(fe(n),s),A=r.map((function(t){var r=t[0].amountIn,o=t[t.length-1].amountOut;if(!r||!o)throw new Error("Expected both raw amountIn and raw amountOut to be present");var n=m.CurrencyAmount.fromRawAmount(u,r),a=m.CurrencyAmount.fromRawAmount(c,o),i=e.isVersionedRoute(exports.PoolType.V2Pool,t),s=e.isVersionedRoute(exports.PoolType.V3Pool,t),A=e.isVersionedRoute(exports.PoolType.V4Pool,t);return{routev4:A?new d.Route(t.map(e.toV4Pool),u,c):null,routev3:s?new p.Route(t.map(e.toV3Pool),u,c):null,routev2:i?new l.Route(t.map(e.toPair),u,c):null,mixedRoute:A||s||i?null:new f.MixedRouteSDK(t.map(e.toPoolOrPair),u,c),inputAmount:n,outputAmount:a}}));return new f.Trade({v2Routes:A.filter((function(e){return e.routev2})).map((function(e){return{routev2:e.routev2,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v3Routes:A.filter((function(e){return e.routev3})).map((function(e){return{routev3:e.routev3,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v4Routes:A.filter((function(e){return e.routev4})).map((function(e){return{routev4:e.routev4,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),mixedRoutes:A.filter((function(e){return e.mixedRoute})).map((function(e){return{mixedRoute:e.mixedRoute,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),tradeType:t.tradeType})},e.toCurrency=function(e,t){return e?m.Ether.onChain(t.chainId):this.toToken(t)},e.toToken=function(e){var t=e.symbol,r=e.buyFeeBps,o=e.sellFeeBps;return new m.Token(e.chainId,e.address,parseInt(e.decimals.toString()),t,void 0,!1,r?u.BigNumber.from(r):void 0,o?u.BigNumber.from(o):void 0)},e.toV3Pool=function(t){var r=t.fee,o=t.sqrtRatioX96,n=t.liquidity,a=t.tickCurrent,i=t.tokenOut;return new p.Pool(e.toToken(t.tokenIn),e.toToken(i),parseInt(r),o,n,parseInt(a))},e.toV4Pool=function(t){var r=e.toCurrency(fe(t.tokenIn.address),t.tokenIn),o=e.toCurrency(fe(t.tokenOut.address),t.tokenOut);return new d.Pool(r,o,parseInt(t.fee),parseInt(t.tickSpacing),t.hooks,t.sqrtRatioX96,t.liquidity,parseInt(t.tickCurrent))},e.isVersionedRoute=function(e,t){return t.every((function(t){return t.type===e}))},e}();Ae.toPoolOrPair=function(e){switch(e.type){case exports.PoolType.V4Pool:return Ae.toV4Pool(e);case exports.PoolType.V3Pool:return Ae.toV3Pool(e);case exports.PoolType.V2Pool:return Ae.toPair(e);default:throw new Error("Invalid pool type")}},Ae.toPair=function(e){var t=e.reserve0,r=e.reserve1;return new l.Pair(m.CurrencyAmount.fromRawAmount(Ae.toToken(t.token),t.quotient),m.CurrencyAmount.fromRawAmount(Ae.toToken(r.token),r.quotient))};var Te=function(){function e(){}return e.parseCalldata=function(t){var r=new Ce(K),o=e.INTERFACE.parseTransaction({data:t}).args;return r.parse(o.commands,o.inputs)},e}();Te.INTERFACE=new s.Interface(i.abi);var Ce=function(){function e(e){this.commandDefinition=e}return e.prototype.parse=function(t,r){var o=this;return{commands:e.getCommands(t).map((function(e,t){var n,a=o.commandDefinition[e];if(a.parser===exports.Parser.V4Actions){var i=d.V4BaseActionsParser.parseCalldata(r[t]);return{commandName:exports.CommandType[e],commandType:e,params:(n=i.actions,n.map((function(e){return{name:e.actionName,value:e.params.map((function(e){return{name:e.name,value:e.value}}))}})))}}if(a.parser===exports.Parser.Abi){var s=a.params,p=u.ethers.utils.defaultAbiCoder.decode(s.map((function(e){return e.type})),r[t]).map((function(e,t){switch(s[t].subparser){case exports.Subparser.V3PathExactIn:return{name:s[t].name,value:xe(e)};case exports.Subparser.V3PathExactOut:return{name:s[t].name,value:ye(e)};default:return{name:s[t].name,value:e}}}));return{commandName:exports.CommandType[e],commandType:e,params:p}}if(a.parser===exports.Parser.V3Actions)return{commandName:exports.CommandType[e],commandType:e,params:r.map((function(e){return{name:"command",value:e}}))};throw new Error("Unsupported parser: "+a)}))}},e.getCommands=function(e){for(var t=[],r=2;r<e.length;r+=2){var o=e.substring(r,r+2);t.push(parseInt(o,16))}return t},e}();function xe(e){for(var t=e.replace("0x",""),r=u.ethers.utils.getAddress(t.substring(0,40)),o=40,n=[];o<t.length;){var a=t.substring(o,o+46),i=parseInt(a.substring(0,6),16),s=u.ethers.utils.getAddress(a.substring(6,46));n.push({tokenIn:r,tokenOut:s,fee:i}),r=s,o+=46}return n}function ye(e){for(var t=e.replace("0x",""),r=u.ethers.utils.getAddress(t.substring(t.length-40)),o=t.length-86,n=[];o>=0;){var a=t.substring(o,o+46),i=u.ethers.utils.getAddress(a.substring(0,40)),s=parseInt(a.substring(40,46),16);n.push({tokenIn:r,tokenOut:i,fee:s}),r=i,o-=46}return n}exports.COMMAND_DEFINITION=K,exports.CommandParser=Te,exports.GenericCommandParser=Ce,exports.ROUTER_AS_RECIPIENT=re,exports.RoutePlanner=Y,exports.RouterTradeAdapter=Ae,exports.SwapRouter=me,exports.UNIVERSAL_ROUTER_ADDRESS=Q,exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e,t){if(!(t in z))throw new Error("Universal Router not deployed on chain "+t);return z[t].routerConfigs[e].creationBlock},exports.UniswapTrade=ae,exports.UnwrapWETH=le,exports.WETH_ADDRESS=$,exports.isNativeCurrency=fe;
+"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var t,r,o,n,a=e(require("tiny-invariant")),i=e(require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json")),s=require("@ethersproject/abi"),u=require("ethers"),p=require("@uniswap/v3-sdk"),d=require("@uniswap/v4-sdk"),m=require("@uniswap/sdk-core"),c=require("ethers/lib/utils"),l=require("@uniswap/v2-sdk"),f=require("@uniswap/router-sdk");function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,o=Array(t);r<t;r++)o[r]=e[r];return o}function T(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(r)return(r=r.call(e)).next.bind(r);if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return A(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?A(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function C(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,"string");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:t+""}require("jsbi"),require("bignumber.js"),(r=exports.CommandType||(exports.CommandType={}))[r.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",r[r.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",r[r.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",r[r.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",r[r.SWEEP=4]="SWEEP",r[r.TRANSFER=5]="TRANSFER",r[r.PAY_PORTION=6]="PAY_PORTION",r[r.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",r[r.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",r[r.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",r[r.WRAP_ETH=11]="WRAP_ETH",r[r.UNWRAP_WETH=12]="UNWRAP_WETH",r[r.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",r[r.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",r[r.V4_SWAP=16]="V4_SWAP",r[r.V3_POSITION_MANAGER_PERMIT=17]="V3_POSITION_MANAGER_PERMIT",r[r.V3_POSITION_MANAGER_CALL=18]="V3_POSITION_MANAGER_CALL",r[r.V4_INITIALIZE_POOL=19]="V4_INITIALIZE_POOL",r[r.V4_POSITION_MANAGER_CALL=20]="V4_POSITION_MANAGER_CALL",r[r.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",(o=exports.Subparser||(exports.Subparser={}))[o.V3PathExactIn=0]="V3PathExactIn",o[o.V3PathExactOut=1]="V3PathExactOut",(n=exports.Parser||(exports.Parser={}))[n.Abi=0]="Abi",n[n.V4Actions=1]="V4Actions",n[n.V3Actions=2]="V3Actions";var x,y,P,h,v,_,R,E,b,V,I,w,g,k,U,N,O,B,S,F,q,D,M,W,L,X,H,j,G=new Set([exports.CommandType.EXECUTE_SUB_PLAN]),K=((t={})[exports.CommandType.EXECUTE_SUB_PLAN]={parser:exports.Parser.Abi,params:[{name:"commands",type:"bytes"},{name:"inputs",type:"bytes[]"}]},t[exports.CommandType.PERMIT2_PERMIT]={parser:exports.Parser.Abi,params:[{name:"permit",type:"((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)"},{name:"signature",type:"bytes"}]},t[exports.CommandType.PERMIT2_PERMIT_BATCH]={parser:exports.Parser.Abi,params:[{name:"permit",type:"((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)"},{name:"signature",type:"bytes"}]},t[exports.CommandType.PERMIT2_TRANSFER_FROM]={parser:exports.Parser.Abi,params:[{name:"token",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint160"}]},t[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH]={parser:exports.Parser.Abi,params:[{name:"transferFrom",type:"(address from,address to,uint160 amount,address token)[]"}]},t[exports.CommandType.V3_SWAP_EXACT_IN]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountIn",type:"uint256"},{name:"amountOutMin",type:"uint256"},{name:"path",subparser:exports.Subparser.V3PathExactIn,type:"bytes"},{name:"payerIsUser",type:"bool"}]},t[exports.CommandType.V3_SWAP_EXACT_OUT]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountOut",type:"uint256"},{name:"amountInMax",type:"uint256"},{name:"path",subparser:exports.Subparser.V3PathExactOut,type:"bytes"},{name:"payerIsUser",type:"bool"}]},t[exports.CommandType.V2_SWAP_EXACT_IN]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountIn",type:"uint256"},{name:"amountOutMin",type:"uint256"},{name:"path",type:"address[]"},{name:"payerIsUser",type:"bool"}]},t[exports.CommandType.V2_SWAP_EXACT_OUT]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountOut",type:"uint256"},{name:"amountInMax",type:"uint256"},{name:"path",type:"address[]"},{name:"payerIsUser",type:"bool"}]},t[exports.CommandType.V4_SWAP]={parser:exports.Parser.V4Actions},t[exports.CommandType.WRAP_ETH]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}]},t[exports.CommandType.UNWRAP_WETH]={parser:exports.Parser.Abi,params:[{name:"recipient",type:"address"},{name:"amountMin",type:"uint256"}]},t[exports.CommandType.SWEEP]={parser:exports.Parser.Abi,params:[{name:"token",type:"address"},{name:"recipient",type:"address"},{name:"amountMin",type:"uint256"}]},t[exports.CommandType.TRANSFER]={parser:exports.Parser.Abi,params:[{name:"token",type:"address"},{name:"recipient",type:"address"},{name:"value",type:"uint256"}]},t[exports.CommandType.PAY_PORTION]={parser:exports.Parser.Abi,params:[{name:"token",type:"address"},{name:"recipient",type:"address"},{name:"bips",type:"uint256"}]},t[exports.CommandType.BALANCE_CHECK_ERC20]={parser:exports.Parser.Abi,params:[{name:"owner",type:"address"},{name:"token",type:"address"},{name:"minBalance",type:"uint256"}]},t[exports.CommandType.V4_INITIALIZE_POOL]={parser:exports.Parser.Abi,params:[{name:"poolKey",type:"(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)"},{name:"sqrtPriceX96",type:"uint160"}]},t[exports.CommandType.V3_POSITION_MANAGER_PERMIT]={parser:exports.Parser.V3Actions},t[exports.CommandType.V3_POSITION_MANAGER_CALL]={parser:exports.Parser.V3Actions},t[exports.CommandType.V4_POSITION_MANAGER_CALL]={parser:exports.Parser.V4Actions},t),Y=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){return this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0),this},t.addCommand=function(e,t,r){void 0===r&&(r=!1);var o=function(e,t){var r=K[e];switch(r.parser){case exports.Parser.Abi:return{type:e,encodedInput:c.defaultAbiCoder.encode(r.params.map((function(e){return e.type})),t)};case exports.Parser.V4Actions:case exports.Parser.V3Actions:return{type:e,encodedInput:t[0]}}}(e,t);if(this.inputs.push(o.encodedInput),r){if(!G.has(o.type))throw new Error("command type: "+o.type+" cannot be allowed to revert");o.type=128|o.type}return this.commands=this.commands.concat(o.type.toString(16).padStart(2,"0")),this},e}();function Z(e,t){if(t.involvesToken(e))return e;if(t.involvesToken(e.wrapped))return e.wrapped;if(t instanceof d.Pool&&t.token0.wrapped.equals(e))return t.token0;if(t instanceof d.Pool&&t.token1.wrapped.equals(e))return t.token1;throw new Error("Expected currency "+e.symbol+" to be either "+t.token0.symbol+" or "+t.token1.symbol)}(x=exports.RouterActionType||(exports.RouterActionType={})).UniswapTrade="UniswapTrade",x.UnwrapWETH="UnwrapWETH",(j=exports.UniversalRouterVersion||(exports.UniversalRouterVersion={})).V1_2="1.2",j.V2_0="2.0";var z=((H={})[1]={weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",routerConfigs:(y={},y[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17143817},y[exports.UniversalRouterVersion.V2_0]={address:"0x66a9893cc07d91d95644aedd05d03f95e1dba8af",creationBlock:1737658355},y)},H[5]={weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",routerConfigs:(P={},P[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8940568},P[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8940568},P)},H[11155111]={weth:"0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",routerConfigs:(h={},h[exports.UniversalRouterVersion.V1_2]={address:"0x0000000000000000000000000000000000000000",creationBlock:0},h[exports.UniversalRouterVersion.V2_0]={address:"0x6872c178C147c487A71e6033B665a5644c4E7990",creationBlock:9499896},h)},H[137]={weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",routerConfigs:(v={},v[exports.UniversalRouterVersion.V1_2]={address:"0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2",creationBlock:52210153},v[exports.UniversalRouterVersion.V2_0]={address:"0x1095692a6237d83c6a72f3f5efedb9a670c49223",creationBlock:1737492197},v)},H[80001]={weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",routerConfigs:(_={},_[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:35176052},_[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:35176052},_)},H[10]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(R={},R[exports.UniversalRouterVersion.V1_2]={address:"0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8",creationBlock:114702266},R[exports.UniversalRouterVersion.V2_0]={address:"0x851116d9223fabed8e56c0e6b8ad0c31d98b3507",creationBlock:1737494278},R)},H[420]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(E={},E[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8887728},E[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:8887728},E)},H[42161]={weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",routerConfigs:(b={},b[exports.UniversalRouterVersion.V1_2]={address:"0x5E325eDA8064b456f4781070C0738d849c824258",creationBlock:169472836},b[exports.UniversalRouterVersion.V2_0]={address:"0xa51afafe0263b40edaef0df8781ea9aa03e381a3",creationBlock:1737487458},b)},H[421613]={weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",routerConfigs:(V={},V[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:18815277},V[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:18815277},V)},H[42220]={weth:"0x0000000000000000000000000000000000000000",routerConfigs:(I={},I[exports.UniversalRouterVersion.V1_2]={address:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",creationBlock:21407637},I[exports.UniversalRouterVersion.V2_0]={address:"0x643770e279d5d0733f21d6dc03a8efbabf3255b4",creationBlock:21407637},I)},H[44787]={weth:"0x0000000000000000000000000000000000000000",routerConfigs:(w={},w[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17566658},w[exports.UniversalRouterVersion.V2_0]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:17566658},w)},H[56]={weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",routerConfigs:(g={},g[exports.UniversalRouterVersion.V1_2]={address:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",creationBlock:35160263},g[exports.UniversalRouterVersion.V2_0]={address:"0x1906c1d672b88cd1b9ac7593301ca990f94eae07",creationBlock:1737493275},g)},H[43114]={weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",routerConfigs:(k={},k[exports.UniversalRouterVersion.V1_2]={address:"0x4Dae2f939ACf50408e13d58534Ff8c2776d45265",creationBlock:40237257},k[exports.UniversalRouterVersion.V2_0]={address:"0x94b75331ae8d42c1b61065089b7d48fe14aa73b7",creationBlock:1737558236},k)},H[84531]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(U={},U[exports.UniversalRouterVersion.V1_2]={address:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",creationBlock:6915289},U[exports.UniversalRouterVersion.V2_0]={address:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",creationBlock:6915289},U)},H[8453]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(N={},N[exports.UniversalRouterVersion.V1_2]={address:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",creationBlock:9107268},N[exports.UniversalRouterVersion.V2_0]={address:"0x6ff5693b99212da76ad316178a184ab56d299b43",creationBlock:1737491485},N)},H[81457]={weth:"0x4300000000000000000000000000000000000004",routerConfigs:(O={},O[exports.UniversalRouterVersion.V1_2]={address:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",creationBlock:1116444},O[exports.UniversalRouterVersion.V2_0]={address:"0xeabbcb3e8e415306207ef514f660a3f820025be3",creationBlock:1737564586},O)},H[7777777]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(B={},B[exports.UniversalRouterVersion.V1_2]={address:"0x2986d9721A49838ab4297b695858aF7F17f38014",creationBlock:11832155},B[exports.UniversalRouterVersion.V2_0]={address:"0x3315ef7ca28db74abadc6c44570efdf06b04b020",creationBlock:1737562927},B)},H[324]={weth:"0x5aea5775959fbc2557cc8789bc1bf90a239d9a91",routerConfigs:(S={},S[exports.UniversalRouterVersion.V1_2]={address:"0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06",creationBlock:12640979},S[exports.UniversalRouterVersion.V2_0]={address:"0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06",creationBlock:12640979},S)},H[480]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(F={},F[exports.UniversalRouterVersion.V1_2]={address:"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",creationBlock:4063979},F[exports.UniversalRouterVersion.V2_0]={address:"0x8ac7bee993bb44dab564ea4bc9ea67bf9eb5e743",creationBlock:1737559557},F)},H[1301]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(q={},q[exports.UniversalRouterVersion.V1_2]={address:"0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6",creationBlock:1241811},q[exports.UniversalRouterVersion.V2_0]={address:"0xf70536b3bcc1bd1a972dc186a2cf84cc6da6be5d",creationBlock:7100543},q)},H[130]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(D={},D[exports.UniversalRouterVersion.V1_2]={address:"0x4D73A4411CA1c660035e4AECC8270E5DdDEC8C17",creationBlock:23678},D[exports.UniversalRouterVersion.V2_0]={address:"0xef740bf23acae26f6492b10de645d6b98dc8eaf3",creationBlock:1737568156},D)},H[10143]={weth:"0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701",routerConfigs:(M={},M[exports.UniversalRouterVersion.V1_2]={address:"0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893",creationBlock:23678},M[exports.UniversalRouterVersion.V2_0]={address:"0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893",creationBlock:23678},M)},H[84532]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(W={},W[exports.UniversalRouterVersion.V1_2]={address:"0x492e6456d9528771018deb9e87ef7750ef184104",creationBlock:20216585},W[exports.UniversalRouterVersion.V2_0]={address:"0x492e6456d9528771018deb9e87ef7750ef184104",creationBlock:20216585},W)},H[1868]={weth:"0x4200000000000000000000000000000000000006",routerConfigs:(L={},L[exports.UniversalRouterVersion.V1_2]={address:"0x0e2850543f69f678257266e0907ff9a58b3f13de",creationBlock:3254782},L[exports.UniversalRouterVersion.V2_0]={address:"0x0e2850543f69f678257266e0907ff9a58b3f13de",creationBlock:3254782},L)},H[143]={weth:"0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A",routerConfigs:(X={},X[exports.UniversalRouterVersion.V1_2]={address:"0x0d97dc33264bfc1c226207428a79b26757fb9dc3",creationBlock:29255937},X[exports.UniversalRouterVersion.V2_0]={address:"0x0d97dc33264bfc1c226207428a79b26757fb9dc3",creationBlock:29255937},X)},H),Q=function(e,t){if(!(t in z))throw new Error("Universal Router not deployed on chain "+t);return z[t].routerConfigs[e].address},$=function(e){if(!(e in z))throw new Error("Universal Router not deployed on chain "+e);if("0x0000000000000000000000000000000000000000"==z[e].weth)throw new Error("Chain "+e+" does not have WETH");return z[e].weth},J=u.BigNumber.from(2).pow(255),ee="0x0000000000000000000000000000000000000000",te="0x0000000000000000000000000000000000000001",re="0x0000000000000000000000000000000000000002";function oe(e){return e.isNative?ee:e.wrapped.address}var ne=new m.Percent(50,100),ae=function(){function e(e,t){if(this.trade=e,this.options=t,this.tradeType=exports.RouterActionType.UniswapTrade,t.fee&&t.flatFee)throw new Error("Only one fee option permitted");this.payerIsUser=!(this.inputRequiresWrap||this.inputRequiresUnwrap||this.options.useRouterBalance)}var t,r;return e.prototype.encode=function(e,t){var r;this.inputRequiresWrap?e.addCommand(exports.CommandType.WRAP_ETH,[re,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]):this.inputRequiresUnwrap&&(e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[this.trade.inputAmount.currency.address,re,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),e.addCommand(exports.CommandType.UNWRAP_WETH,[re,0])),this.options.recipient=null!=(r=this.options.recipient)?r:te;for(var o,n,a=this.trade.tradeType===m.TradeType.EXACT_INPUT&&this.trade.routes.length>2||this.outputRequiresTransition||!!(o=this.options).fee||!!o.flatFee,i=T(this.trade.swaps);!(n=i()).done;){var s=n.value;switch(s.route.protocol){case f.Protocol.V2:ie(e,s,this.trade.tradeType,this.options,this.payerIsUser,a);break;case f.Protocol.V3:se(e,s,this.trade.tradeType,this.options,this.payerIsUser,a);break;case f.Protocol.V4:ue(e,s,this.trade.tradeType,this.options,this.payerIsUser,a);break;case f.Protocol.MIXED:pe(e,s,this.trade.tradeType,this.options,this.payerIsUser,a);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}var d=u.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());if(a){var c=this.trade.swaps[0].route.pools,l=oe(Z(this.trade.outputAmount.currency,c[c.length-1]));if(this.options.fee){var A=p.toHex(this.options.fee.fee.multiply(1e4).quotient);e.addCommand(exports.CommandType.PAY_PORTION,[l,this.options.fee.recipient,A]),this.trade.tradeType===m.TradeType.EXACT_OUTPUT&&(d=d.sub(d.mul(A).div(1e4)))}if(this.options.flatFee){var C=this.options.flatFee.amount;if(d.lt(C))throw new Error("Flat fee amount greater than minimumAmountOut");e.addCommand(exports.CommandType.TRANSFER,[l,this.options.flatFee.recipient,C]),this.trade.tradeType===m.TradeType.EXACT_OUTPUT&&(d=d.sub(C))}this.outputRequiresUnwrap?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,d]):this.outputRequiresWrap?e.addCommand(exports.CommandType.WRAP_ETH,[this.options.recipient,J]):e.addCommand(exports.CommandType.SWEEP,[oe(this.trade.outputAmount.currency),this.options.recipient,d])}(this.trade.tradeType===m.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(ne))&&(this.inputRequiresWrap?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,0]):this.inputRequiresUnwrap?e.addCommand(exports.CommandType.WRAP_ETH,[this.options.recipient,J]):this.trade.inputAmount.currency.isNative&&e.addCommand(exports.CommandType.SWEEP,[ee,this.options.recipient,0])),this.options.safeMode&&e.addCommand(exports.CommandType.SWEEP,[ee,this.options.recipient,0])},t=e,(r=[{key:"isAllV4",get:function(){for(var e,t=!0,r=T(this.trade.swaps);!(e=r()).done;)t=t&&e.value.route.protocol==f.Protocol.V4;return t}},{key:"inputRequiresWrap",get:function(){return this.trade.swaps[0].route.pools[0]instanceof d.Pool?this.trade.inputAmount.currency.isNative&&!this.trade.swaps[0].route.pathInput.isNative:this.trade.inputAmount.currency.isNative}},{key:"inputRequiresUnwrap",get:function(){return this.trade.swaps[0].route.pools[0]instanceof d.Pool&&!this.trade.inputAmount.currency.isNative&&this.trade.swaps[0].route.pathInput.isNative}},{key:"outputRequiresWrap",get:function(){var e=this.trade.swaps[0].route;return e.pools[e.pools.length-1]instanceof d.Pool&&!this.trade.outputAmount.currency.isNative&&e.pathOutput.isNative}},{key:"outputRequiresUnwrap",get:function(){var e=this.trade.swaps[0].route;return e.pools[e.pools.length-1]instanceof d.Pool?this.trade.outputAmount.currency.isNative&&!this.trade.swaps[0].route.pathOutput.isNative:this.trade.outputAmount.currency.isNative}},{key:"outputRequiresTransition",get:function(){return this.outputRequiresWrap||this.outputRequiresUnwrap}}])&&function(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,C(o.key),o)}}(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),t}();function ie(e,t,r,o,n,a){var i=t.route,s=new l.Trade(i,r==m.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,r);r==m.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[a?re:o.recipient,s.maximumAmountIn(o.slippageTolerance).quotient.toString(),a?0:s.minimumAmountOut(o.slippageTolerance).quotient.toString(),i.path.map((function(e){return e.wrapped.address})),n]):r==m.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT,[a?re:o.recipient,s.minimumAmountOut(o.slippageTolerance).quotient.toString(),s.maximumAmountIn(o.slippageTolerance).quotient.toString(),i.path.map((function(e){return e.wrapped.address})),n])}function se(e,t,r,o,n,a){var i=t.route,s=p.Trade.createUncheckedTrade({route:i,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:r}),u=p.encodeRouteToPath(i,s.tradeType===m.TradeType.EXACT_OUTPUT);r==m.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[a?re:o.recipient,s.maximumAmountIn(o.slippageTolerance).quotient.toString(),a?0:s.minimumAmountOut(o.slippageTolerance).quotient.toString(),u,n]):r==m.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT,[a?re:o.recipient,s.minimumAmountOut(o.slippageTolerance).quotient.toString(),s.maximumAmountIn(o.slippageTolerance).quotient.toString(),u,n])}function ue(e,t,r,o,n,a){var i,s=t.inputAmount,u=t.outputAmount,p=t.route.pools.map((function(e){return e})),c=new d.Route(p,s.currency,u.currency),l=d.Trade.createUncheckedTrade({route:c,inputAmount:s,outputAmount:u,tradeType:r}),f=a&&r==m.TradeType.EXACT_INPUT?void 0:o.slippageTolerance,A=new d.V4Planner;A.addTrade(l,f),A.addSettle(l.route.pathInput,n),A.addTake(l.route.pathOutput,a?re:null!=(i=o.recipient)?i:te),e.addCommand(exports.CommandType.V4_SWAP,[A.finalize()])}function pe(e,t,r,o,n,a){var i,s=t.route,u=t.inputAmount,m=t.outputAmount,c=a?re:null!=(i=o.recipient)?i:te;if(1===s.pools.length){if(s.pools[0]instanceof d.Pool)return ue(e,t,r,o,n,a);if(s.pools[0]instanceof p.Pool)return se(e,t,r,o,n,a);if(s.pools[0]instanceof l.Pair)return ie(e,t,r,o,n,a);throw new Error("Invalid route type")}for(var A=f.MixedRouteTrade.createUncheckedTrade({route:s,inputAmount:u,outputAmount:m,tradeType:r}),T=A.maximumAmountIn(o.slippageTolerance,u).quotient.toString(),C=a?0:A.minimumAmountOut(o.slippageTolerance,m).quotient.toString(),x=f.partitionMixedRouteByProtocol(s),y=function(e){return e===x.length-1},P=s.pathInput,h=0;h<x.length;h++){var v=x[h],_=v[0],R=f.getOutputOfPools(v,P),E=new f.MixedRoute(new f.MixedRouteSDK([].concat(v),P,R)),b=void 0,V=void 0;if(y(h))b=R,V=c;else{var I=x[h+1][0];b=Z(R,I),V=I instanceof l.Pair&&R.equals(b)?I.liquidityToken.address:re}if(_ instanceof d.Pool){var w=new d.V4Planner,g=new d.Route(v,E.input,E.output);w.addSettle(P,n&&0===h,0==h?T:J),w.addAction(d.Actions.SWAP_EXACT_IN,[{currencyIn:P.isNative?ee:P.address,path:d.encodeRouteToPath(g),amountIn:0,amountOutMinimum:y(h)?C:0}]),w.addTake(R,V),e.addCommand(exports.CommandType.V4_SWAP,[w.finalize()])}else if(_ instanceof p.Pool)e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[V,0==h?T:J,y(h)?C:0,f.encodeMixedRouteToPath(E),n&&0===h]);else{if(!(_ instanceof l.Pair))throw new Error("Unexpected Pool Type");e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[V,0===h?T:J,y(h)?C:0,E.path.map((function(e){return e.wrapped.address})),n&&0===h])}y(h)||(R.isNative&&!b.isNative?e.addCommand(exports.CommandType.WRAP_ETH,[re,J]):!R.isNative&&b.isNative&&e.addCommand(exports.CommandType.UNWRAP_WETH,[re,0])),P=b}}function de(e,t){var r=t.signature,o=u.ethers.utils.arrayify(t.signature).length;65!==o&&64!==o||(r=u.ethers.utils.joinSignature(u.ethers.utils.splitSignature(t.signature))),e.addCommand(exports.CommandType.PERMIT2_PERMIT,[t,r])}var me=function(){function e(){}return e.swapCallParameters=function(t,r){var o=new Y,n=new ae(t,r),i=n.trade.inputAmount.currency;i.isNative&&r.inputTokenPermit&&a(!1),r.inputTokenPermit&&de(o,r.inputTokenPermit);var s=u.BigNumber.from(i.isNative?n.trade.maximumAmountIn(r.slippageTolerance).quotient.toString():0);return n.encode(o,{allowRevert:!1}),e.encodePlan(o,s,{deadline:r.deadlineOrPreviousBlockhash?u.BigNumber.from(r.deadlineOrPreviousBlockhash):void 0})},e.migrateV3ToV4CallParameters=function(t,r){var o=t.outputPosition.pool,n=t.inputPosition.pool.token0,i=t.inputPosition.pool.token1,s=null!=r?r:m.CHAIN_TO_ADDRESSES_MAP[o.chainId].v4PositionManagerAddress;o.currency0.isNative?o.currency0.wrapped.equals(n)&&o.currency1.equals(i)||o.currency0.wrapped.equals(i)&&o.currency1.equals(n)||a(!1):(n!==o.token0&&a(!1),i!==o.token1&&a(!1)),t.v3RemoveLiquidityOptions.liquidityPercentage.equalTo(new m.Percent(100,100))||a(!1),1!=t.v3RemoveLiquidityOptions.burnToken&&a(!1),t.v3RemoveLiquidityOptions.collectOptions.recipient!==s&&a(!1),!function(e){return Object.keys(e).some((function(e){return"recipient"===e}))}(t.v4AddLiquidityOptions)&&a(!1),t.v4AddLiquidityOptions.migrate||a(!1);var c=new Y;if(t.v4AddLiquidityOptions.createPool){var l=d.Pool.getPoolKey(o.currency0,o.currency1,o.fee,o.tickSpacing,o.hooks);c.addCommand(exports.CommandType.V4_INITIALIZE_POOL,[l,o.sqrtRatioX96.toString()]),delete t.v4AddLiquidityOptions.createPool}t.v3RemoveLiquidityOptions.permit&&(Q(exports.UniversalRouterVersion.V2_0,t.inputPosition.pool.chainId)!=t.v3RemoveLiquidityOptions.permit.spender&&a(!1),function(e,t,r){var o=p.NonfungiblePositionManager.INTERFACE.encodeFunctionData("permit",[m.validateAndParseAddress(t.spender),r,t.deadline,t.v,t.r,t.s]);e.addCommand(exports.CommandType.V3_POSITION_MANAGER_PERMIT,[o])}(c,t.v3RemoveLiquidityOptions.permit,t.v3RemoveLiquidityOptions.tokenId),delete t.v3RemoveLiquidityOptions.permit);for(var f,A=p.NonfungiblePositionManager.removeCallParameters(t.inputPosition,t.v3RemoveLiquidityOptions),C=T(p.Multicall.decodeMulticall(A.calldata));!(f=C()).done;){var x=f.value,y=x.slice(0,10);y!=p.NonfungiblePositionManager.INTERFACE.getSighash("collect")&&y!=p.NonfungiblePositionManager.INTERFACE.getSighash("decreaseLiquidity")&&y!=p.NonfungiblePositionManager.INTERFACE.getSighash("burn")&&a(!1),c.addCommand(exports.CommandType.V3_POSITION_MANAGER_CALL,[x])}var P=d.V4PositionManager.addCallParameters(t.outputPosition,t.v4AddLiquidityOptions);return P.calldata.slice(0,10)!=d.V4PositionManager.INTERFACE.getSighash("modifyLiquidities")&&a(!1),c.addCommand(exports.CommandType.V4_POSITION_MANAGER_CALL,[P.calldata]),e.encodePlan(c,u.BigNumber.from(0),{deadline:u.BigNumber.from(t.v4AddLiquidityOptions.deadline)})},e.encodePlan=function(t,r,o){void 0===o&&(o={});var n=t.commands,a=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(o.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",o.deadline?[n,a,o.deadline]:[n,a]),value:r.toHexString()}},e}();me.INTERFACE=new s.Interface(i.abi);var ce,le=function(){function e(e,t,r){this.tradeType=exports.RouterActionType.UnwrapWETH,this.wethAddress=$(t),this.amount=e,r&&(r.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&a(!1),r.details.amount>=e||a(!1),this.permit2Data=r)}return e.prototype.encode=function(e,t){!function(e,t){t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&a(!1),t.permit2Permit&&de(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:re,t.permit2TransferFrom.amount])}(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.UNWRAP_WETH,[re,this.amount])},e}();(ce=exports.PoolType||(exports.PoolType={})).V2Pool="v2-pool",ce.V3Pool="v3-pool",ce.V4Pool="v4-pool";var fe=function(e){return e.toLowerCase()===ee.toLowerCase()||e.toLowerCase()==="0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee".toLowerCase()},Ae=function(){function e(){}return e.fromClassicQuote=function(t){var r=t.route,o=t.tokenIn,n=t.tokenOut;if(!r)throw new Error("Expected route to be present");if(!r.length)throw new Error("Expected there to be at least one route");if(r.some((function(e){return!e.length})))throw new Error("Expected all routes to have at least one pool");var a=r[0],i=a[0].tokenIn,s=a[a.length-1].tokenOut;if(!i||!s)throw new Error("Expected both tokenIn and tokenOut to be present");if(i.chainId!==s.chainId)throw new Error("Expected tokenIn and tokenOut to be have same chainId");var u=e.toCurrency(fe(o),i),c=e.toCurrency(fe(n),s),A=r.map((function(t){var r=t[0].amountIn,o=t[t.length-1].amountOut;if(!r||!o)throw new Error("Expected both raw amountIn and raw amountOut to be present");var n=m.CurrencyAmount.fromRawAmount(u,r),a=m.CurrencyAmount.fromRawAmount(c,o),i=e.isVersionedRoute(exports.PoolType.V2Pool,t),s=e.isVersionedRoute(exports.PoolType.V3Pool,t),A=e.isVersionedRoute(exports.PoolType.V4Pool,t);return{routev4:A?new d.Route(t.map(e.toV4Pool),u,c):null,routev3:s?new p.Route(t.map(e.toV3Pool),u,c):null,routev2:i?new l.Route(t.map(e.toPair),u,c):null,mixedRoute:A||s||i?null:new f.MixedRouteSDK(t.map(e.toPoolOrPair),u,c),inputAmount:n,outputAmount:a}}));return new f.Trade({v2Routes:A.filter((function(e){return e.routev2})).map((function(e){return{routev2:e.routev2,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v3Routes:A.filter((function(e){return e.routev3})).map((function(e){return{routev3:e.routev3,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),v4Routes:A.filter((function(e){return e.routev4})).map((function(e){return{routev4:e.routev4,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),mixedRoutes:A.filter((function(e){return e.mixedRoute})).map((function(e){return{mixedRoute:e.mixedRoute,inputAmount:e.inputAmount,outputAmount:e.outputAmount}})),tradeType:t.tradeType})},e.toCurrency=function(e,t){return e?m.Ether.onChain(t.chainId):this.toToken(t)},e.toToken=function(e){var t=e.symbol,r=e.buyFeeBps,o=e.sellFeeBps;return new m.Token(e.chainId,e.address,parseInt(e.decimals.toString()),t,void 0,!1,r?u.BigNumber.from(r):void 0,o?u.BigNumber.from(o):void 0)},e.toV3Pool=function(t){var r=t.fee,o=t.sqrtRatioX96,n=t.liquidity,a=t.tickCurrent,i=t.tokenOut;return new p.Pool(e.toToken(t.tokenIn),e.toToken(i),parseInt(r),o,n,parseInt(a))},e.toV4Pool=function(t){var r=e.toCurrency(fe(t.tokenIn.address),t.tokenIn),o=e.toCurrency(fe(t.tokenOut.address),t.tokenOut);return new d.Pool(r,o,parseInt(t.fee),parseInt(t.tickSpacing),t.hooks,t.sqrtRatioX96,t.liquidity,parseInt(t.tickCurrent))},e.isVersionedRoute=function(e,t){return t.every((function(t){return t.type===e}))},e}();Ae.toPoolOrPair=function(e){switch(e.type){case exports.PoolType.V4Pool:return Ae.toV4Pool(e);case exports.PoolType.V3Pool:return Ae.toV3Pool(e);case exports.PoolType.V2Pool:return Ae.toPair(e);default:throw new Error("Invalid pool type")}},Ae.toPair=function(e){var t=e.reserve0,r=e.reserve1;return new l.Pair(m.CurrencyAmount.fromRawAmount(Ae.toToken(t.token),t.quotient),m.CurrencyAmount.fromRawAmount(Ae.toToken(r.token),r.quotient))};var Te=function(){function e(){}return e.parseCalldata=function(t){var r=new Ce(K),o=e.INTERFACE.parseTransaction({data:t}).args;return r.parse(o.commands,o.inputs)},e}();Te.INTERFACE=new s.Interface(i.abi);var Ce=function(){function e(e){this.commandDefinition=e}return e.prototype.parse=function(t,r){var o=this;return{commands:e.getCommands(t).map((function(e,t){var n,a=o.commandDefinition[e];if(a.parser===exports.Parser.V4Actions){var i=d.V4BaseActionsParser.parseCalldata(r[t]);return{commandName:exports.CommandType[e],commandType:e,params:(n=i.actions,n.map((function(e){return{name:e.actionName,value:e.params.map((function(e){return{name:e.name,value:e.value}}))}})))}}if(a.parser===exports.Parser.Abi){var s=a.params,p=u.ethers.utils.defaultAbiCoder.decode(s.map((function(e){return e.type})),r[t]).map((function(e,t){switch(s[t].subparser){case exports.Subparser.V3PathExactIn:return{name:s[t].name,value:xe(e)};case exports.Subparser.V3PathExactOut:return{name:s[t].name,value:ye(e)};default:return{name:s[t].name,value:e}}}));return{commandName:exports.CommandType[e],commandType:e,params:p}}if(a.parser===exports.Parser.V3Actions)return{commandName:exports.CommandType[e],commandType:e,params:r.map((function(e){return{name:"command",value:e}}))};throw new Error("Unsupported parser: "+a)}))}},e.getCommands=function(e){for(var t=[],r=2;r<e.length;r+=2){var o=e.substring(r,r+2);t.push(parseInt(o,16))}return t},e}();function xe(e){for(var t=e.replace("0x",""),r=u.ethers.utils.getAddress(t.substring(0,40)),o=40,n=[];o<t.length;){var a=t.substring(o,o+46),i=parseInt(a.substring(0,6),16),s=u.ethers.utils.getAddress(a.substring(6,46));n.push({tokenIn:r,tokenOut:s,fee:i}),r=s,o+=46}return n}function ye(e){for(var t=e.replace("0x",""),r=u.ethers.utils.getAddress(t.substring(t.length-40)),o=t.length-86,n=[];o>=0;){var a=t.substring(o,o+46),i=u.ethers.utils.getAddress(a.substring(0,40)),s=parseInt(a.substring(40,46),16);n.push({tokenIn:r,tokenOut:i,fee:s}),r=i,o-=46}return n}exports.COMMAND_DEFINITION=K,exports.CommandParser=Te,exports.GenericCommandParser=Ce,exports.ROUTER_AS_RECIPIENT=re,exports.RoutePlanner=Y,exports.RouterTradeAdapter=Ae,exports.SwapRouter=me,exports.UNIVERSAL_ROUTER_ADDRESS=Q,exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e,t){if(!(t in z))throw new Error("Universal Router not deployed on chain "+t);return z[t].routerConfigs[e].creationBlock},exports.UniswapTrade=ae,exports.UnwrapWETH=le,exports.WETH_ADDRESS=$,exports.isNativeCurrency=fe;
 //# sourceMappingURL=universal-router-sdk.cjs.production.min.js.map
diff --git a/dist/universal-router-sdk.cjs.production.min.js.map b/dist/universal-router-sdk.cjs.production.min.js.map
index 5a9d5b8..f4def97 100644
--- a/dist/universal-router-sdk.cjs.production.min.js.map
+++ b/dist/universal-router-sdk.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/utils/routerCommands.ts","../src/entities/Command.ts","../src/utils/constants.ts","../src/utils/pathCurrency.ts","../src/utils/getCurrencyAddress.ts","../src/entities/actions/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/utils/routerTradeAdapter.ts","../src/entities/actions/unwrapWETH.ts","../src/utils/commandParser.ts"],"sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  V4_SWAP = 0x10,\n  V3_POSITION_MANAGER_PERMIT = 0x11,\n  V3_POSITION_MANAGER_CALL = 0x12,\n  V4_INITIALIZE_POOL = 0x13,\n  V4_POSITION_MANAGER_CALL = 0x14,\n\n  EXECUTE_SUB_PLAN = 0x21,\n}\n\nexport enum Subparser {\n  V3PathExactIn,\n  V3PathExactOut,\n}\n\nexport enum Parser {\n  Abi,\n  V4Actions,\n  V3Actions,\n}\n\nexport type ParamType = {\n  readonly name: string\n  readonly type: string\n  readonly subparser?: Subparser\n}\n\nexport type CommandDefinition =\n  | {\n      parser: Parser.Abi\n      params: ParamType[]\n    }\n  | {\n      parser: Parser.V4Actions\n    }\n  | {\n      parser: Parser.V3Actions\n    }\n\nconst ALLOW_REVERT_FLAG = 0x80\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([CommandType.EXECUTE_SUB_PLAN])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst POOL_KEY_STRUCT = '(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nexport const COMMAND_DEFINITION: { [key in CommandType]: CommandDefinition } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'commands', type: 'bytes' },\n      { name: 'inputs', type: 'bytes[]' },\n    ],\n  },\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_PERMIT_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_BATCH_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint160' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      {\n        name: 'transferFrom',\n        type: PERMIT2_TRANSFER_FROM_BATCH_STRUCT,\n      },\n    ],\n  },\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactIn, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V3_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactOut, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V4_SWAP]: { parser: Parser.V4Actions },\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n    ],\n  },\n  [CommandType.UNWRAP_WETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.SWEEP]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.TRANSFER]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'value', type: 'uint256' },\n    ],\n  },\n  [CommandType.PAY_PORTION]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'bips', type: 'uint256' },\n    ],\n  },\n  [CommandType.BALANCE_CHECK_ERC20]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'owner', type: 'address' },\n      { name: 'token', type: 'address' },\n      { name: 'minBalance', type: 'uint256' },\n    ],\n  },\n  [CommandType.V4_INITIALIZE_POOL]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'poolKey', type: POOL_KEY_STRUCT },\n      { name: 'sqrtPriceX96', type: 'uint160' },\n    ],\n  },\n\n  // Position Actions\n  [CommandType.V3_POSITION_MANAGER_PERMIT]: { parser: Parser.V3Actions },\n  [CommandType.V3_POSITION_MANAGER_CALL]: { parser: Parser.V3Actions },\n  [CommandType.V4_POSITION_MANAGER_CALL]: { parser: Parser.V4Actions },\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): RoutePlanner {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n    return this\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): RoutePlanner {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n    return this\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const commandDef = COMMAND_DEFINITION[type]\n  switch (commandDef.parser) {\n    case Parser.Abi:\n      const encodedInput = defaultAbiCoder.encode(\n        commandDef.params.map((abi) => abi.type),\n        parameters\n      )\n      return { type, encodedInput }\n    case Parser.V4Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n    case Parser.V3Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n  }\n}\n","import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterActionType {\n  UniswapTrade = 'UniswapTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterActionType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x66a9893cc07d91d95644aedd05d03f95e1dba8af',\n        creationBlock: 1737658355,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  [11155111]: {\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3a9d48ab9751398bbfa63ad67599bb04e4bdf98b',\n        creationBlock: 7259601,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1095692a6237d83c6a72f3f5efedb9a670c49223',\n        creationBlock: 1737492197,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x851116d9223fabed8e56c0e6b8ad0c31d98b3507',\n        creationBlock: 1737494278,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xa51afafe0263b40edaef0df8781ea9aa03e381a3',\n        creationBlock: 1737487458,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1906c1d672b88cd1b9ac7593301ca990f94eae07',\n        creationBlock: 1737493275,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x94b75331ae8d42c1b61065089b7d48fe14aa73b7',\n        creationBlock: 1737558236,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6ff5693b99212da76ad316178a184ab56d299b43',\n        creationBlock: 1737491485,\n      },\n    },\n  },\n  // blast\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xeabbcb3e8e415306207ef514f660a3f820025be3',\n        creationBlock: 1737564586,\n      },\n    },\n  },\n  // zora\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3315ef7ca28db74abadc6c44570efdf06b04b020',\n        creationBlock: 1737562927,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  // worldchain\n  [480]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n        creationBlock: 4063979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x8ac7bee993bb44dab564ea4bc9ea67bf9eb5e743',\n        creationBlock: 1737559557,\n      },\n    },\n  },\n  [1301]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n        creationBlock: 1241811,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf70536b3bcc1bd1a972dc186a2cf84cc6da6be5d',\n        creationBlock: 7100543,\n      },\n    },\n  },\n  // unichain mainnet\n  [130]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4D73A4411CA1c660035e4AECC8270E5DdDEC8C17',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xef740bf23acae26f6492b10de645d6b98dc8eaf3',\n        creationBlock: 1737568156,\n      },\n    },\n  },\n  [10143]: {\n    weth: '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n    },\n  },\n  [84532]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n    },\n  },\n  [1868]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n    },\n  },\n  [143]: {\n    weth: '0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n","import { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport function getPathCurrency(currency: Currency, pool: TPool): Currency {\n  // return currency if the currency matches a currency of the pool\n  if (pool.involvesToken(currency as Token)) {\n    return currency\n\n    // return if currency.wrapped if pool involves wrapped currency\n  } else if (pool.involvesToken(currency.wrapped as Token)) {\n    return currency.wrapped\n\n    // return native currency if pool involves native version of wrapped currency (only applies to V4)\n  } else if (pool instanceof V4Pool && pool.token0.wrapped.equals(currency)) {\n    return pool.token0\n  } else if (pool instanceof V4Pool && pool.token1.wrapped.equals(currency)) {\n    return pool.token1\n  } else {\n    throw new Error(`Expected currency ${currency.symbol} to be either ${pool.token0.symbol} or ${pool.token1.symbol}`)\n  }\n\n  return currency // this line needed for typescript to compile\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { ETH_ADDRESS } from './constants'\n\nexport function getCurrencyAddress(currency: Currency): string {\n  return currency.isNative ? ETH_ADDRESS : currency.wrapped.address\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Route as V4Route,\n  Trade as V4Trade,\n  Pool as V4Pool,\n  V4Planner,\n  encodeRouteToPath as encodeV4RouteToPath,\n  Actions,\n} from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { getPathCurrency } from '../../utils/pathCurrency'\nimport { Currency, TradeType, Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { getCurrencyAddress } from '../../utils/getCurrencyAddress'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, TPool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap || this.inputRequiresUnwrap || this.options.useRouterBalance) {\n      this.payerIsUser = false\n    } else {\n      this.payerIsUser = true\n    }\n  }\n\n  get isAllV4(): boolean {\n    let result = true\n    for (const swap of this.trade.swaps) {\n      result = result && swap.route.protocol == Protocol.V4\n    }\n    return result\n  }\n\n  // this.trade.swaps is an array of swaps / trades.\n  // we are iterating over one swap (trade) at a time so length is 1\n  // route is either v2, v3, v4, or mixed\n  // pathInput and pathOutput are the currencies of the input and output of the route\n  // this.trade.inputAmount is the input currency of the trade (could be different from pathInput)\n  // this.trade.outputAmount is the output currency of the trade (could be different from pathOutput)\n  // each route can have multiple pools\n  get inputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If first pool is a v4 pool and input currency is native and the path input currency in the route is not native, we need to wrap.\n      return (\n        this.trade.inputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If first pool is not a v4 pool and input currency is native, we need to wrap\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  get inputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If the first pool is a v4 pool and input currency is not native and the path input currency is native, we need to unwrap\n      return (\n        !this.trade.inputAmount.currency.isNative &&\n        (this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If the first pool is not a v4 pool, we don't need to unwrap.\n    return false\n  }\n\n  get outputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is not native but path currency output is native, we need to wrap\n      return (\n        !this.trade.outputAmount.currency.isNative &&\n        (lastRoute as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // if last pool is not v4:\n    // we do not need to wrap because v2 and v3 pools already require wrapped tokens\n    return false\n  }\n\n  get outputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is native and path currency output is not native, we need to unwrap\n      return (\n        this.trade.outputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // else: if path output currency is native, we need to unwrap because v2 and v3 pools already require wrapped tokens\n    return this.trade.outputAmount.currency.isNative\n  }\n\n  get outputRequiresTransition(): boolean {\n    return this.outputRequiresWrap || this.outputRequiresUnwrap\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    } else if (this.inputRequiresUnwrap) {\n      // send wrapped token to router to unwrap\n      planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n        (this.trade.inputAmount.currency as Token).address,\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const routerMustCustody =\n      performAggregatedSlippageCheck || this.outputRequiresTransition || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V4:\n          addV4Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      const pools = this.trade.swaps[0].route.pools\n      const pathOutputCurrencyAddress = getCurrencyAddress(\n        getPathCurrency(this.trade.outputAmount.currency, pools[pools.length - 1])\n      )\n\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [pathOutputCurrencyAddress, this.options.fee.recipient, feeBips])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [pathOutputCurrencyAddress, this.options.flatFee.recipient, feeAmount])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (this.outputRequiresUnwrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else if (this.outputRequiresWrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          getCurrencyAddress(this.trade.outputAmount.currency),\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    // for exactOutput swaps with native input or that perform an inputToken transition (wrap or unwrap)\n    // we need to send back the change to the user\n    if (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade)) {\n      if (this.inputRequiresWrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n      } else if (this.inputRequiresUnwrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else if (this.trade.inputAmount.currency.isNative) {\n        // must refund extra native currency sent along for native v4 trades (no input transition)\n        planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n      }\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      // if router will custody funds, we do aggregated slippage check from router\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\nfunction addV4Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { inputAmount, outputAmount, route }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  // create a deep copy of pools since v4Planner encoding tampers with array\n  const pools = route.pools.map((p) => p) as V4Pool[]\n  const v4Route = new V4Route(pools, inputAmount.currency, outputAmount.currency)\n  const trade = V4Trade.createUncheckedTrade({\n    route: v4Route,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const slippageToleranceOnSwap =\n    routerMustCustody && tradeType == TradeType.EXACT_INPUT ? undefined : options.slippageTolerance\n\n  const v4Planner = new V4Planner()\n  v4Planner.addTrade(trade, slippageToleranceOnSwap)\n  v4Planner.addSettle(trade.route.pathInput, payerIsUser)\n  v4Planner.addTake(\n    trade.route.pathOutput,\n    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n  )\n  planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const route = swap.route as MixedRoute<TInput, TOutput>\n  const inputAmount = swap.inputAmount\n  const outputAmount = swap.outputAmount\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n\n  // single hop, so it can be reduced to plain swap logic for one protocol version\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V4Pool) {\n      return addV4Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = routerMustCustody\n    ? 0\n    : trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let inputToken = route.pathInput\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    const routePool = section[0]\n    const outputToken = getOutputOfPools(section, inputToken)\n    const subRoute = new MixedRoute(new MixedRouteSDK([...section], inputToken, outputToken))\n\n    let nextInputToken\n    let swapRecipient\n\n    if (isLastSectionInRoute(i)) {\n      nextInputToken = outputToken\n      swapRecipient = tradeRecipient\n    } else {\n      const nextPool = sections[i + 1][0]\n      nextInputToken = getPathCurrency(outputToken, nextPool)\n\n      const v2PoolIsSwapRecipient = nextPool instanceof Pair && outputToken.equals(nextInputToken)\n      swapRecipient = v2PoolIsSwapRecipient ? (nextPool as Pair).liquidityToken.address : ROUTER_AS_RECIPIENT\n    }\n\n    if (routePool instanceof V4Pool) {\n      const v4Planner = new V4Planner()\n      const v4SubRoute = new V4Route(section as V4Pool[], subRoute.input, subRoute.output)\n\n      v4Planner.addSettle(inputToken, payerIsUser && i === 0, (i == 0 ? amountIn : CONTRACT_BALANCE) as BigNumber)\n      v4Planner.addAction(Actions.SWAP_EXACT_IN, [\n        {\n          currencyIn: inputToken.isNative ? ETH_ADDRESS : inputToken.address,\n          path: encodeV4RouteToPath(v4SubRoute),\n          amountIn: 0, // denotes open delta, amount set in v4Planner.addSettle()\n          amountOutMinimum: !isLastSectionInRoute(i) ? 0 : amountOut,\n        },\n      ])\n      v4Planner.addTake(outputToken, swapRecipient)\n\n      planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n    } else if (routePool instanceof V3Pool) {\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        encodeMixedRouteToPath(subRoute), // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else if (routePool instanceof Pair) {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        subRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    } else {\n      throw new Error('Unexpected Pool Type')\n    }\n\n    // perform a token transition (wrap/unwrap if necessary)\n    if (!isLastSectionInRoute(i)) {\n      if (outputToken.isNative && !nextInputToken.isNative) {\n        planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, CONTRACT_BALANCE])\n      } else if (!outputToken.isNative && nextInputToken.isNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n      }\n    }\n\n    inputToken = nextInputToken\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { validateAndParseAddress, BigintIsh } from '@uniswap/sdk-core'\nimport { NFTPermitOptions, NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { ROUTER_AS_RECIPIENT } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\nexport function encodeV3PositionPermit(planner: RoutePlanner, permit: NFTPermitOptions, tokenId: BigintIsh): void {\n  const calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n    validateAndParseAddress(permit.spender),\n    tokenId,\n    permit.deadline,\n    permit.v,\n    permit.r,\n    permit.s,\n  ])\n\n  planner.addCommand(CommandType.V3_POSITION_MANAGER_PERMIT, [calldata])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport {\n  MethodParameters,\n  Multicall,\n  Position as V3Position,\n  NonfungiblePositionManager as V3PositionManager,\n  RemoveLiquidityOptions as V3RemoveLiquidityOptions,\n} from '@uniswap/v3-sdk'\nimport {\n  Position as V4Position,\n  V4PositionManager,\n  AddLiquidityOptions as V4AddLiquidityOptions,\n  MintOptions,\n  Pool as V4Pool,\n  PoolKey,\n} from '@uniswap/v4-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Percent, CHAIN_TO_ADDRESSES_MAP, SupportedChainsType } from '@uniswap/sdk-core'\nimport { UniswapTrade, SwapOptions } from './entities/actions/uniswap'\nimport { RoutePlanner, CommandType } from './utils/routerCommands'\nimport { encodePermit, encodeV3PositionPermit } from './utils/inputTokens'\nimport { UNIVERSAL_ROUTER_ADDRESS, UniversalRouterVersion } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport interface MigrateV3ToV4Options {\n  inputPosition: V3Position\n  outputPosition: V4Position\n  v3RemoveLiquidityOptions: V3RemoveLiquidityOptions\n  v4AddLiquidityOptions: V4AddLiquidityOptions\n}\n\nfunction isMint(options: V4AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static swapCallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Builds the call parameters for a migration from a V3 position to a V4 position.\n   * Some requirements of the parameters:\n   *   - v3RemoveLiquidityOptions.collectOptions.recipient must equal v4PositionManager\n   *   - v3RemoveLiquidityOptions.liquidityPercentage must be 100%\n   *   - input pool and output pool must have the same tokens\n   *   - V3 NFT must be approved, or valid inputV3NFTPermit must be provided with UR as spender\n   */\n  public static migrateV3ToV4CallParameters(\n    options: MigrateV3ToV4Options,\n    positionManagerOverride?: string\n  ): MethodParameters {\n    const v4Pool: V4Pool = options.outputPosition.pool\n    const v3Token0 = options.inputPosition.pool.token0\n    const v3Token1 = options.inputPosition.pool.token1\n    const v4PositionManagerAddress =\n      positionManagerOverride ?? CHAIN_TO_ADDRESSES_MAP[v4Pool.chainId as SupportedChainsType].v4PositionManagerAddress\n\n    // owner of the v3 nft must be the receiver of the v4 nft\n\n    // validate the parameters\n    if (v4Pool.currency0.isNative) {\n      invariant(\n        (v4Pool.currency0.wrapped.equals(v3Token0) && v4Pool.currency1.equals(v3Token1)) ||\n          (v4Pool.currency0.wrapped.equals(v3Token1) && v4Pool.currency1.equals(v3Token0)),\n        'TOKEN_MISMATCH'\n      )\n    } else {\n      invariant(v3Token0 === v4Pool.token0, 'TOKEN0_MISMATCH')\n      invariant(v3Token1 === v4Pool.token1, 'TOKEN1_MISMATCH')\n    }\n\n    invariant(\n      options.v3RemoveLiquidityOptions.liquidityPercentage.equalTo(new Percent(100, 100)),\n      'FULL_REMOVAL_REQUIRED'\n    )\n    invariant(options.v3RemoveLiquidityOptions.burnToken == true, 'BURN_TOKEN_REQUIRED')\n    invariant(\n      options.v3RemoveLiquidityOptions.collectOptions.recipient === v4PositionManagerAddress,\n      'RECIPIENT_NOT_POSITION_MANAGER'\n    )\n    invariant(isMint(options.v4AddLiquidityOptions), 'MINT_REQUIRED')\n    invariant(options.v4AddLiquidityOptions.migrate, 'MIGRATE_REQUIRED')\n\n    const planner = new RoutePlanner()\n\n    // to prevent reentrancy by the pool hook, we initialize the v4 pool before moving funds\n    if (options.v4AddLiquidityOptions.createPool) {\n      const poolKey: PoolKey = V4Pool.getPoolKey(\n        v4Pool.currency0,\n        v4Pool.currency1,\n        v4Pool.fee,\n        v4Pool.tickSpacing,\n        v4Pool.hooks\n      )\n      planner.addCommand(CommandType.V4_INITIALIZE_POOL, [poolKey, v4Pool.sqrtRatioX96.toString()])\n      // remove createPool setting, so that it doesnt get encoded again later\n      delete options.v4AddLiquidityOptions.createPool\n    }\n\n    // add position permit to the universal router planner\n    if (options.v3RemoveLiquidityOptions.permit) {\n      // permit spender should be UR\n      const universalRouterAddress = UNIVERSAL_ROUTER_ADDRESS(\n        UniversalRouterVersion.V2_0,\n        options.inputPosition.pool.chainId as SupportedChainsType\n      )\n      invariant(universalRouterAddress == options.v3RemoveLiquidityOptions.permit.spender, 'INVALID_SPENDER')\n      // don't need to transfer it because v3posm uses isApprovedOrOwner()\n      encodeV3PositionPermit(planner, options.v3RemoveLiquidityOptions.permit, options.v3RemoveLiquidityOptions.tokenId)\n      // remove permit so that multicall doesnt add it again\n      delete options.v3RemoveLiquidityOptions.permit\n    }\n\n    // encode v3 withdraw\n    const v3RemoveParams: MethodParameters = V3PositionManager.removeCallParameters(\n      options.inputPosition,\n      options.v3RemoveLiquidityOptions\n    )\n    const v3Calls: string[] = Multicall.decodeMulticall(v3RemoveParams.calldata)\n\n    for (const v3Call of v3Calls) {\n      // slice selector - 0x + 4 bytes = 10 characters\n      const selector = v3Call.slice(0, 10)\n      invariant(\n        selector == V3PositionManager.INTERFACE.getSighash('collect') ||\n          selector == V3PositionManager.INTERFACE.getSighash('decreaseLiquidity') ||\n          selector == V3PositionManager.INTERFACE.getSighash('burn'),\n        'INVALID_V3_CALL: ' + selector\n      )\n      planner.addCommand(CommandType.V3_POSITION_MANAGER_CALL, [v3Call])\n    }\n\n    // encode v4 mint\n    const v4AddParams = V4PositionManager.addCallParameters(options.outputPosition, options.v4AddLiquidityOptions)\n    // only modifyLiquidities can be called by the UniversalRouter\n    const selector = v4AddParams.calldata.slice(0, 10)\n    invariant(selector == V4PositionManager.INTERFACE.getSighash('modifyLiquidities'), 'INVALID_V4_CALL: ' + selector)\n\n    planner.addCommand(CommandType.V4_POSITION_MANAGER_CALL, [v4AddParams.calldata])\n\n    return SwapRouter.encodePlan(planner, BigNumber.from(0), {\n      deadline: BigNumber.from(options.v4AddLiquidityOptions.deadline),\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool as V3Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool, Route as V4Route } from '@uniswap/v4-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n  V4Pool = 'v4-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V4PoolInRoute = {\n  type: PoolType.V4Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  fee: string\n  tickSpacing: string\n  hooks: string\n  liquidity: string\n  sqrtRatioX96: string\n  tickCurrent: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V4PoolInRoute | V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev4: V4Route<Currency, Currency> | null\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n      const isOnlyV4 = RouterTradeAdapter.isVersionedRoute<V4PoolInRoute>(PoolType.V4Pool, subRoute)\n      return {\n        routev4: isOnlyV4\n          ? new V4Route(\n              (subRoute as V4PoolInRoute[]).map(RouterTradeAdapter.toV4Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toV3Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV4 && !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v4Routes: typedRoutes\n        .filter((route) => route.routev4)\n        .map((route) => ({\n          routev4: route.routev4 as V4Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V4PoolInRoute | V3PoolInRoute | V2PoolInRoute): V4Pool | V3Pool | Pair => {\n    switch (pool.type) {\n      case PoolType.V4Pool:\n        return RouterTradeAdapter.toV4Pool(pool)\n      case PoolType.V3Pool:\n        return RouterTradeAdapter.toV3Pool(pool)\n      case PoolType.V2Pool:\n        return RouterTradeAdapter.toPair(pool)\n      default:\n        throw new Error('Invalid pool type')\n    }\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toV3Pool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): V3Pool {\n    return new V3Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toV4Pool(pool: V4PoolInRoute): V4Pool {\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenIn.address), pool.tokenIn)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenOut.address), pool.tokenOut)\n    return new V4Pool(\n      parsedCurrencyIn,\n      parsedCurrencyOut,\n      parseInt(pool.fee) as FeeAmount,\n      parseInt(pool.tickSpacing),\n      pool.hooks,\n      pool.sqrtRatioX96,\n      pool.liquidity,\n      parseInt(pool.tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute | V4PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute | V4PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UnwrapWETH\n  readonly permit2Data?: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { ethers } from 'ethers'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { V4BaseActionsParser, V4RouterAction } from '@uniswap/v4-sdk'\nimport { CommandType, CommandDefinition, COMMAND_DEFINITION, Subparser, Parser } from '../utils/routerCommands'\n\nexport type Param = {\n  readonly name: string\n  readonly value: any\n}\n\nexport type UniversalRouterCommand = {\n  readonly commandName: string\n  readonly commandType: CommandType\n  readonly params: readonly Param[]\n}\n\nexport type UniversalRouterCall = {\n  readonly commands: readonly UniversalRouterCommand[]\n}\n\nexport type V3PathItem = {\n  readonly tokenIn: string\n  readonly tokenOut: string\n  readonly fee: number\n}\n\nexport interface CommandsDefinition {\n  [key: number]: CommandDefinition\n}\n\n// Parses UniversalRouter V2 commands\nexport abstract class CommandParser {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static parseCalldata(calldata: string): UniversalRouterCall {\n    const genericParser = new GenericCommandParser(COMMAND_DEFINITION)\n    const txDescription = CommandParser.INTERFACE.parseTransaction({ data: calldata })\n    const { commands, inputs } = txDescription.args\n    return genericParser.parse(commands, inputs)\n  }\n}\n\n// Parses commands based on given command definition\nexport class GenericCommandParser {\n  constructor(private readonly commandDefinition: CommandsDefinition) {}\n\n  public parse(commands: string, inputs: string[]): UniversalRouterCall {\n    const commandTypes = GenericCommandParser.getCommands(commands)\n\n    return {\n      commands: commandTypes.map((commandType: CommandType, i: number) => {\n        const commandDef = this.commandDefinition[commandType]\n\n        if (commandDef.parser === Parser.V4Actions) {\n          const { actions } = V4BaseActionsParser.parseCalldata(inputs[i])\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: v4RouterCallToParams(actions),\n          }\n        } else if (commandDef.parser === Parser.Abi) {\n          const abiDef = commandDef.params\n          const rawParams = ethers.utils.defaultAbiCoder.decode(\n            abiDef.map((command) => command.type),\n            inputs[i]\n          )\n\n          const params = rawParams.map((param: any, j: number) => {\n            switch (abiDef[j].subparser) {\n              case Subparser.V3PathExactIn:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactIn(param),\n                }\n              case Subparser.V3PathExactOut:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactOut(param),\n                }\n              default:\n                return {\n                  name: abiDef[j].name,\n                  value: param,\n                }\n            }\n          })\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params,\n          }\n        } else if (commandDef.parser === Parser.V3Actions) {\n          // TODO: implement better parsing here\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: inputs.map((input) => ({ name: 'command', value: input })),\n          }\n        } else {\n          throw new Error(`Unsupported parser: ${commandDef}`)\n        }\n      }),\n    }\n  }\n\n  // parse command types from bytes string\n  private static getCommands(commands: string): CommandType[] {\n    const commandTypes: CommandType[] = []\n\n    for (let i = 2; i < commands.length; i += 2) {\n      const byte = commands.substring(i, i + 2)\n      commandTypes.push(parseInt(byte, 16) as CommandType)\n    }\n\n    return commandTypes\n  }\n}\n\nexport function parseV3PathExactIn(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(0, 40))\n  let loc = 40\n  const res: V3PathItem[] = []\n  while (loc < strippedPath.length) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const fee = parseInt(feeAndTokenOut.substring(0, 6), 16)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(6, 46))\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n    loc += 46\n  }\n\n  return res\n}\n\nexport function parseV3PathExactOut(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(strippedPath.length - 40))\n  let loc = strippedPath.length - 86 // 86 = (20 addr + 3 fee + 20 addr) * 2 (for hex characters)\n  const res: V3PathItem[] = []\n  while (loc >= 0) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(0, 40))\n    const fee = parseInt(feeAndTokenOut.substring(40, 46), 16)\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n\n    loc -= 46\n  }\n\n  return res\n}\n\nfunction v4RouterCallToParams(actions: readonly V4RouterAction[]): readonly Param[] {\n  return actions.map((action) => {\n    return {\n      name: action.actionName,\n      value: action.params.map((param) => {\n        return {\n          name: param.name,\n          value: param.value,\n        }\n      }),\n    }\n  })\n}\n"],"names":["CommandType","Subparser","Parser","RouterActionType","UniversalRouterVersion","REVERTIBLE_COMMANDS","Set","EXECUTE_SUB_PLAN","COMMAND_DEFINITION","_COMMAND_DEFINITION","parser","Abi","params","name","type","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","subparser","V3PathExactIn","V3_SWAP_EXACT_OUT","V3PathExactOut","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","V4_SWAP","V4Actions","WRAP_ETH","UNWRAP_WETH","SWEEP","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","V4_INITIALIZE_POOL","V3_POSITION_MANAGER_PERMIT","V3Actions","V3_POSITION_MANAGER_CALL","V4_POSITION_MANAGER_CALL","RoutePlanner","this","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","parameters","allowRevert","command","commandDef","encodedInput","defaultAbiCoder","encode","map","abi","createCommand","push","has","Error","concat","toString","padStart","getPathCurrency","currency","pool","involvesToken","wrapped","V4Pool","token0","equals","token1","symbol","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs0","_routerConfigs1","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","UNIVERSAL_ROUTER_ADDRESS","version","chainId","WETH_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","getCurrencyAddress","isNative","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","payerIsUser","inputRequiresWrap","inputRequiresUnwrap","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","quotient","inputAmount","recipient","_this$options$recipie","swapOptions","_step","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","length","outputRequiresTransition","_iterator","_createForOfIteratorHelperLoose","swaps","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","V4","addV4Swap","MIXED","addMixedSwap","minimumAmountOut","pools","pathOutputCurrencyAddress","outputAmount","feeBips","toHex","multiply","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","outputRequiresUnwrap","outputRequiresWrap","priceImpact","greaterThan","safeMode","key","get","_step2","result","_iterator2","pathInput","lastRoute","pathOutput","_ref","V2Trade","path","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","_ref3","p","v4Route","V4Route","V4Trade","slippageToleranceOnSwap","undefined","v4Planner","V4Planner","addTrade","addSettle","addTake","_options$recipient","finalize","tradeRecipient","_options$recipient2","V3Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","section","routePool","outputToken","getOutputOfPools","subRoute","MixedRoute","MixedRouteSDK","nextInputToken","swapRecipient","nextPool","liquidityToken","v4SubRoute","input","output","addAction","Actions","SWAP_EXACT_IN","currencyIn","encodeV4RouteToPath","amountOutMinimum","encodeMixedRouteToPath","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","SwapRouter","swapCallParameters","trades","inputCurrency","inputTokenPermit","invariant","nativeCurrencyValue","encodePlan","deadline","deadlineOrPreviousBlockhash","migrateV3ToV4CallParameters","positionManagerOverride","v4Pool","outputPosition","v3Token0","inputPosition","v3Token1","v4PositionManagerAddress","CHAIN_TO_ADDRESSES_MAP","currency0","currency1","v3RemoveLiquidityOptions","liquidityPercentage","equalTo","burnToken","collectOptions","Object","keys","some","k","isMint","v4AddLiquidityOptions","migrate","createPool","poolKey","getPoolKey","tickSpacing","hooks","sqrtRatioX96","permit","spender","tokenId","calldata","NonfungiblePositionManager","INTERFACE","encodeFunctionData","validateAndParseAddress","v","r","s","encodeV3PositionPermit","v3RemoveParams","V3PositionManager","removeCallParameters","Multicall","decodeMulticall","v3Call","selector","slice","getSighash","v4AddParams","V4PositionManager","addCallParameters","config","toHexString","Interface","UniversalRouter","PoolType","UnwrapWETH","wethAddress","details","toLowerCase","permit2Data","_","permit2TransferFrom","permit2Permit","encodeInputTokenOptions","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","isOnlyV4","routev4","toV4Pool","routev3","V3Route","toV3Pool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","filter","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","buyFeeBps","sellFeeBps","Token","parseInt","decimals","liquidity","tickCurrent","every","reserve0","reserve1","CommandParser","parseCalldata","genericParser","GenericCommandParser","_txDescription$args","parseTransaction","data","args","parse","commandDefinition","getCommands","commandType","actions","_this","_V4BaseActionsParser$","V4BaseActionsParser","commandName","action","actionName","param","abiDef","decode","j","parseV3PathExactIn","parseV3PathExactOut","commandTypes","byte","substring","strippedPath","replace","getAddress","loc","res","feeAndTokenOut"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/utils/routerCommands.ts","../src/entities/Command.ts","../src/utils/constants.ts","../src/utils/pathCurrency.ts","../src/utils/getCurrencyAddress.ts","../src/entities/actions/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/utils/routerTradeAdapter.ts","../src/entities/actions/unwrapWETH.ts","../src/utils/commandParser.ts"],"sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  V4_SWAP = 0x10,\n  V3_POSITION_MANAGER_PERMIT = 0x11,\n  V3_POSITION_MANAGER_CALL = 0x12,\n  V4_INITIALIZE_POOL = 0x13,\n  V4_POSITION_MANAGER_CALL = 0x14,\n\n  EXECUTE_SUB_PLAN = 0x21,\n}\n\nexport enum Subparser {\n  V3PathExactIn,\n  V3PathExactOut,\n}\n\nexport enum Parser {\n  Abi,\n  V4Actions,\n  V3Actions,\n}\n\nexport type ParamType = {\n  readonly name: string\n  readonly type: string\n  readonly subparser?: Subparser\n}\n\nexport type CommandDefinition =\n  | {\n      parser: Parser.Abi\n      params: ParamType[]\n    }\n  | {\n      parser: Parser.V4Actions\n    }\n  | {\n      parser: Parser.V3Actions\n    }\n\nconst ALLOW_REVERT_FLAG = 0x80\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([CommandType.EXECUTE_SUB_PLAN])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst POOL_KEY_STRUCT = '(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nexport const COMMAND_DEFINITION: { [key in CommandType]: CommandDefinition } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'commands', type: 'bytes' },\n      { name: 'inputs', type: 'bytes[]' },\n    ],\n  },\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_PERMIT_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_BATCH_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint160' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      {\n        name: 'transferFrom',\n        type: PERMIT2_TRANSFER_FROM_BATCH_STRUCT,\n      },\n    ],\n  },\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactIn, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V3_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactOut, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V4_SWAP]: { parser: Parser.V4Actions },\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n    ],\n  },\n  [CommandType.UNWRAP_WETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.SWEEP]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.TRANSFER]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'value', type: 'uint256' },\n    ],\n  },\n  [CommandType.PAY_PORTION]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'bips', type: 'uint256' },\n    ],\n  },\n  [CommandType.BALANCE_CHECK_ERC20]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'owner', type: 'address' },\n      { name: 'token', type: 'address' },\n      { name: 'minBalance', type: 'uint256' },\n    ],\n  },\n  [CommandType.V4_INITIALIZE_POOL]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'poolKey', type: POOL_KEY_STRUCT },\n      { name: 'sqrtPriceX96', type: 'uint160' },\n    ],\n  },\n\n  // Position Actions\n  [CommandType.V3_POSITION_MANAGER_PERMIT]: { parser: Parser.V3Actions },\n  [CommandType.V3_POSITION_MANAGER_CALL]: { parser: Parser.V3Actions },\n  [CommandType.V4_POSITION_MANAGER_CALL]: { parser: Parser.V4Actions },\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): RoutePlanner {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n    return this\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): RoutePlanner {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n    return this\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const commandDef = COMMAND_DEFINITION[type]\n  switch (commandDef.parser) {\n    case Parser.Abi:\n      const encodedInput = defaultAbiCoder.encode(\n        commandDef.params.map((abi) => abi.type),\n        parameters\n      )\n      return { type, encodedInput }\n    case Parser.V4Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n    case Parser.V3Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n  }\n}\n","import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterActionType {\n  UniswapTrade = 'UniswapTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterActionType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x66a9893cc07d91d95644aedd05d03f95e1dba8af',\n        creationBlock: 1737658355,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  \n  [11155111]: {\n    weth: '0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9',\n    routerConfigs: {\n     [UniversalRouterVersion.V1_2]: {\n        address: '0x0000000000000000000000000000000000000000',\n        creationBlock: 0,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6872c178C147c487A71e6033B665a5644c4E7990',\n        creationBlock: 9499896,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1095692a6237d83c6a72f3f5efedb9a670c49223',\n        creationBlock: 1737492197,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x851116d9223fabed8e56c0e6b8ad0c31d98b3507',\n        creationBlock: 1737494278,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xa51afafe0263b40edaef0df8781ea9aa03e381a3',\n        creationBlock: 1737487458,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1906c1d672b88cd1b9ac7593301ca990f94eae07',\n        creationBlock: 1737493275,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x94b75331ae8d42c1b61065089b7d48fe14aa73b7',\n        creationBlock: 1737558236,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6ff5693b99212da76ad316178a184ab56d299b43',\n        creationBlock: 1737491485,\n      },\n    },\n  },\n  // blast\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xeabbcb3e8e415306207ef514f660a3f820025be3',\n        creationBlock: 1737564586,\n      },\n    },\n  },\n  // zora\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3315ef7ca28db74abadc6c44570efdf06b04b020',\n        creationBlock: 1737562927,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  // worldchain\n  [480]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n        creationBlock: 4063979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x8ac7bee993bb44dab564ea4bc9ea67bf9eb5e743',\n        creationBlock: 1737559557,\n      },\n    },\n  },\n  [1301]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n        creationBlock: 1241811,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf70536b3bcc1bd1a972dc186a2cf84cc6da6be5d',\n        creationBlock: 7100543,\n      },\n    },\n  },\n  // unichain mainnet\n  [130]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4D73A4411CA1c660035e4AECC8270E5DdDEC8C17',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xef740bf23acae26f6492b10de645d6b98dc8eaf3',\n        creationBlock: 1737568156,\n      },\n    },\n  },\n  [10143]: {\n    weth: '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n    },\n  },\n  [84532]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n    },\n  },\n  [1868]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n    },\n  },\n  [143]: {\n    weth: '0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n","import { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport function getPathCurrency(currency: Currency, pool: TPool): Currency {\n  // return currency if the currency matches a currency of the pool\n  if (pool.involvesToken(currency as Token)) {\n    return currency\n\n    // return if currency.wrapped if pool involves wrapped currency\n  } else if (pool.involvesToken(currency.wrapped as Token)) {\n    return currency.wrapped\n\n    // return native currency if pool involves native version of wrapped currency (only applies to V4)\n  } else if (pool instanceof V4Pool && pool.token0.wrapped.equals(currency)) {\n    return pool.token0\n  } else if (pool instanceof V4Pool && pool.token1.wrapped.equals(currency)) {\n    return pool.token1\n  } else {\n    throw new Error(`Expected currency ${currency.symbol} to be either ${pool.token0.symbol} or ${pool.token1.symbol}`)\n  }\n\n  return currency // this line needed for typescript to compile\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { ETH_ADDRESS } from './constants'\n\nexport function getCurrencyAddress(currency: Currency): string {\n  return currency.isNative ? ETH_ADDRESS : currency.wrapped.address\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Route as V4Route,\n  Trade as V4Trade,\n  Pool as V4Pool,\n  V4Planner,\n  encodeRouteToPath as encodeV4RouteToPath,\n  Actions,\n} from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { getPathCurrency } from '../../utils/pathCurrency'\nimport { Currency, TradeType, Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { getCurrencyAddress } from '../../utils/getCurrencyAddress'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, TPool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap || this.inputRequiresUnwrap || this.options.useRouterBalance) {\n      this.payerIsUser = false\n    } else {\n      this.payerIsUser = true\n    }\n  }\n\n  get isAllV4(): boolean {\n    let result = true\n    for (const swap of this.trade.swaps) {\n      result = result && swap.route.protocol == Protocol.V4\n    }\n    return result\n  }\n\n  // this.trade.swaps is an array of swaps / trades.\n  // we are iterating over one swap (trade) at a time so length is 1\n  // route is either v2, v3, v4, or mixed\n  // pathInput and pathOutput are the currencies of the input and output of the route\n  // this.trade.inputAmount is the input currency of the trade (could be different from pathInput)\n  // this.trade.outputAmount is the output currency of the trade (could be different from pathOutput)\n  // each route can have multiple pools\n  get inputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If first pool is a v4 pool and input currency is native and the path input currency in the route is not native, we need to wrap.\n      return (\n        this.trade.inputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If first pool is not a v4 pool and input currency is native, we need to wrap\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  get inputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If the first pool is a v4 pool and input currency is not native and the path input currency is native, we need to unwrap\n      return (\n        !this.trade.inputAmount.currency.isNative &&\n        (this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If the first pool is not a v4 pool, we don't need to unwrap.\n    return false\n  }\n\n  get outputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is not native but path currency output is native, we need to wrap\n      return (\n        !this.trade.outputAmount.currency.isNative &&\n        (lastRoute as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // if last pool is not v4:\n    // we do not need to wrap because v2 and v3 pools already require wrapped tokens\n    return false\n  }\n\n  get outputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is native and path currency output is not native, we need to unwrap\n      return (\n        this.trade.outputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // else: if path output currency is native, we need to unwrap because v2 and v3 pools already require wrapped tokens\n    return this.trade.outputAmount.currency.isNative\n  }\n\n  get outputRequiresTransition(): boolean {\n    return this.outputRequiresWrap || this.outputRequiresUnwrap\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    } else if (this.inputRequiresUnwrap) {\n      // send wrapped token to router to unwrap\n      planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n        (this.trade.inputAmount.currency as Token).address,\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const routerMustCustody =\n      performAggregatedSlippageCheck || this.outputRequiresTransition || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V4:\n          addV4Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      const pools = this.trade.swaps[0].route.pools\n      const pathOutputCurrencyAddress = getCurrencyAddress(\n        getPathCurrency(this.trade.outputAmount.currency, pools[pools.length - 1])\n      )\n\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [pathOutputCurrencyAddress, this.options.fee.recipient, feeBips])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [pathOutputCurrencyAddress, this.options.flatFee.recipient, feeAmount])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (this.outputRequiresUnwrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else if (this.outputRequiresWrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          getCurrencyAddress(this.trade.outputAmount.currency),\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    // for exactOutput swaps with native input or that perform an inputToken transition (wrap or unwrap)\n    // we need to send back the change to the user\n    if (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade)) {\n      if (this.inputRequiresWrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n      } else if (this.inputRequiresUnwrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else if (this.trade.inputAmount.currency.isNative) {\n        // must refund extra native currency sent along for native v4 trades (no input transition)\n        planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n      }\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      // if router will custody funds, we do aggregated slippage check from router\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\nfunction addV4Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { inputAmount, outputAmount, route }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  // create a deep copy of pools since v4Planner encoding tampers with array\n  const pools = route.pools.map((p) => p) as V4Pool[]\n  const v4Route = new V4Route(pools, inputAmount.currency, outputAmount.currency)\n  const trade = V4Trade.createUncheckedTrade({\n    route: v4Route,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const slippageToleranceOnSwap =\n    routerMustCustody && tradeType == TradeType.EXACT_INPUT ? undefined : options.slippageTolerance\n\n  const v4Planner = new V4Planner()\n  v4Planner.addTrade(trade, slippageToleranceOnSwap)\n  v4Planner.addSettle(trade.route.pathInput, payerIsUser)\n  v4Planner.addTake(\n    trade.route.pathOutput,\n    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n  )\n  planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const route = swap.route as MixedRoute<TInput, TOutput>\n  const inputAmount = swap.inputAmount\n  const outputAmount = swap.outputAmount\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n\n  // single hop, so it can be reduced to plain swap logic for one protocol version\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V4Pool) {\n      return addV4Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = routerMustCustody\n    ? 0\n    : trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let inputToken = route.pathInput\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    const routePool = section[0]\n    const outputToken = getOutputOfPools(section, inputToken)\n    const subRoute = new MixedRoute(new MixedRouteSDK([...section], inputToken, outputToken))\n\n    let nextInputToken\n    let swapRecipient\n\n    if (isLastSectionInRoute(i)) {\n      nextInputToken = outputToken\n      swapRecipient = tradeRecipient\n    } else {\n      const nextPool = sections[i + 1][0]\n      nextInputToken = getPathCurrency(outputToken, nextPool)\n\n      const v2PoolIsSwapRecipient = nextPool instanceof Pair && outputToken.equals(nextInputToken)\n      swapRecipient = v2PoolIsSwapRecipient ? (nextPool as Pair).liquidityToken.address : ROUTER_AS_RECIPIENT\n    }\n\n    if (routePool instanceof V4Pool) {\n      const v4Planner = new V4Planner()\n      const v4SubRoute = new V4Route(section as V4Pool[], subRoute.input, subRoute.output)\n\n      v4Planner.addSettle(inputToken, payerIsUser && i === 0, (i == 0 ? amountIn : CONTRACT_BALANCE) as BigNumber)\n      v4Planner.addAction(Actions.SWAP_EXACT_IN, [\n        {\n          currencyIn: inputToken.isNative ? ETH_ADDRESS : inputToken.address,\n          path: encodeV4RouteToPath(v4SubRoute),\n          amountIn: 0, // denotes open delta, amount set in v4Planner.addSettle()\n          amountOutMinimum: !isLastSectionInRoute(i) ? 0 : amountOut,\n        },\n      ])\n      v4Planner.addTake(outputToken, swapRecipient)\n\n      planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n    } else if (routePool instanceof V3Pool) {\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        encodeMixedRouteToPath(subRoute), // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else if (routePool instanceof Pair) {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        subRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    } else {\n      throw new Error('Unexpected Pool Type')\n    }\n\n    // perform a token transition (wrap/unwrap if necessary)\n    if (!isLastSectionInRoute(i)) {\n      if (outputToken.isNative && !nextInputToken.isNative) {\n        planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, CONTRACT_BALANCE])\n      } else if (!outputToken.isNative && nextInputToken.isNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n      }\n    }\n\n    inputToken = nextInputToken\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { validateAndParseAddress, BigintIsh } from '@uniswap/sdk-core'\nimport { NFTPermitOptions, NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { ROUTER_AS_RECIPIENT } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\nexport function encodeV3PositionPermit(planner: RoutePlanner, permit: NFTPermitOptions, tokenId: BigintIsh): void {\n  const calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n    validateAndParseAddress(permit.spender),\n    tokenId,\n    permit.deadline,\n    permit.v,\n    permit.r,\n    permit.s,\n  ])\n\n  planner.addCommand(CommandType.V3_POSITION_MANAGER_PERMIT, [calldata])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport {\n  MethodParameters,\n  Multicall,\n  Position as V3Position,\n  NonfungiblePositionManager as V3PositionManager,\n  RemoveLiquidityOptions as V3RemoveLiquidityOptions,\n} from '@uniswap/v3-sdk'\nimport {\n  Position as V4Position,\n  V4PositionManager,\n  AddLiquidityOptions as V4AddLiquidityOptions,\n  MintOptions,\n  Pool as V4Pool,\n  PoolKey,\n} from '@uniswap/v4-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Percent, CHAIN_TO_ADDRESSES_MAP, SupportedChainsType } from '@uniswap/sdk-core'\nimport { UniswapTrade, SwapOptions } from './entities/actions/uniswap'\nimport { RoutePlanner, CommandType } from './utils/routerCommands'\nimport { encodePermit, encodeV3PositionPermit } from './utils/inputTokens'\nimport { UNIVERSAL_ROUTER_ADDRESS, UniversalRouterVersion } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport interface MigrateV3ToV4Options {\n  inputPosition: V3Position\n  outputPosition: V4Position\n  v3RemoveLiquidityOptions: V3RemoveLiquidityOptions\n  v4AddLiquidityOptions: V4AddLiquidityOptions\n}\n\nfunction isMint(options: V4AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static swapCallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Builds the call parameters for a migration from a V3 position to a V4 position.\n   * Some requirements of the parameters:\n   *   - v3RemoveLiquidityOptions.collectOptions.recipient must equal v4PositionManager\n   *   - v3RemoveLiquidityOptions.liquidityPercentage must be 100%\n   *   - input pool and output pool must have the same tokens\n   *   - V3 NFT must be approved, or valid inputV3NFTPermit must be provided with UR as spender\n   */\n  public static migrateV3ToV4CallParameters(\n    options: MigrateV3ToV4Options,\n    positionManagerOverride?: string\n  ): MethodParameters {\n    const v4Pool: V4Pool = options.outputPosition.pool\n    const v3Token0 = options.inputPosition.pool.token0\n    const v3Token1 = options.inputPosition.pool.token1\n    const v4PositionManagerAddress =\n      positionManagerOverride ?? CHAIN_TO_ADDRESSES_MAP[v4Pool.chainId as SupportedChainsType].v4PositionManagerAddress\n\n    // owner of the v3 nft must be the receiver of the v4 nft\n\n    // validate the parameters\n    if (v4Pool.currency0.isNative) {\n      invariant(\n        (v4Pool.currency0.wrapped.equals(v3Token0) && v4Pool.currency1.equals(v3Token1)) ||\n          (v4Pool.currency0.wrapped.equals(v3Token1) && v4Pool.currency1.equals(v3Token0)),\n        'TOKEN_MISMATCH'\n      )\n    } else {\n      invariant(v3Token0 === v4Pool.token0, 'TOKEN0_MISMATCH')\n      invariant(v3Token1 === v4Pool.token1, 'TOKEN1_MISMATCH')\n    }\n\n    invariant(\n      options.v3RemoveLiquidityOptions.liquidityPercentage.equalTo(new Percent(100, 100)),\n      'FULL_REMOVAL_REQUIRED'\n    )\n    invariant(options.v3RemoveLiquidityOptions.burnToken == true, 'BURN_TOKEN_REQUIRED')\n    invariant(\n      options.v3RemoveLiquidityOptions.collectOptions.recipient === v4PositionManagerAddress,\n      'RECIPIENT_NOT_POSITION_MANAGER'\n    )\n    invariant(isMint(options.v4AddLiquidityOptions), 'MINT_REQUIRED')\n    invariant(options.v4AddLiquidityOptions.migrate, 'MIGRATE_REQUIRED')\n\n    const planner = new RoutePlanner()\n\n    // to prevent reentrancy by the pool hook, we initialize the v4 pool before moving funds\n    if (options.v4AddLiquidityOptions.createPool) {\n      const poolKey: PoolKey = V4Pool.getPoolKey(\n        v4Pool.currency0,\n        v4Pool.currency1,\n        v4Pool.fee,\n        v4Pool.tickSpacing,\n        v4Pool.hooks\n      )\n      planner.addCommand(CommandType.V4_INITIALIZE_POOL, [poolKey, v4Pool.sqrtRatioX96.toString()])\n      // remove createPool setting, so that it doesnt get encoded again later\n      delete options.v4AddLiquidityOptions.createPool\n    }\n\n    // add position permit to the universal router planner\n    if (options.v3RemoveLiquidityOptions.permit) {\n      // permit spender should be UR\n      const universalRouterAddress = UNIVERSAL_ROUTER_ADDRESS(\n        UniversalRouterVersion.V2_0,\n        options.inputPosition.pool.chainId as SupportedChainsType\n      )\n      invariant(universalRouterAddress == options.v3RemoveLiquidityOptions.permit.spender, 'INVALID_SPENDER')\n      // don't need to transfer it because v3posm uses isApprovedOrOwner()\n      encodeV3PositionPermit(planner, options.v3RemoveLiquidityOptions.permit, options.v3RemoveLiquidityOptions.tokenId)\n      // remove permit so that multicall doesnt add it again\n      delete options.v3RemoveLiquidityOptions.permit\n    }\n\n    // encode v3 withdraw\n    const v3RemoveParams: MethodParameters = V3PositionManager.removeCallParameters(\n      options.inputPosition,\n      options.v3RemoveLiquidityOptions\n    )\n    const v3Calls: string[] = Multicall.decodeMulticall(v3RemoveParams.calldata)\n\n    for (const v3Call of v3Calls) {\n      // slice selector - 0x + 4 bytes = 10 characters\n      const selector = v3Call.slice(0, 10)\n      invariant(\n        selector == V3PositionManager.INTERFACE.getSighash('collect') ||\n          selector == V3PositionManager.INTERFACE.getSighash('decreaseLiquidity') ||\n          selector == V3PositionManager.INTERFACE.getSighash('burn'),\n        'INVALID_V3_CALL: ' + selector\n      )\n      planner.addCommand(CommandType.V3_POSITION_MANAGER_CALL, [v3Call])\n    }\n\n    // encode v4 mint\n    const v4AddParams = V4PositionManager.addCallParameters(options.outputPosition, options.v4AddLiquidityOptions)\n    // only modifyLiquidities can be called by the UniversalRouter\n    const selector = v4AddParams.calldata.slice(0, 10)\n    invariant(selector == V4PositionManager.INTERFACE.getSighash('modifyLiquidities'), 'INVALID_V4_CALL: ' + selector)\n\n    planner.addCommand(CommandType.V4_POSITION_MANAGER_CALL, [v4AddParams.calldata])\n\n    return SwapRouter.encodePlan(planner, BigNumber.from(0), {\n      deadline: BigNumber.from(options.v4AddLiquidityOptions.deadline),\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool as V3Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool, Route as V4Route } from '@uniswap/v4-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n  V4Pool = 'v4-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V4PoolInRoute = {\n  type: PoolType.V4Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  fee: string\n  tickSpacing: string\n  hooks: string\n  liquidity: string\n  sqrtRatioX96: string\n  tickCurrent: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V4PoolInRoute | V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev4: V4Route<Currency, Currency> | null\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n      const isOnlyV4 = RouterTradeAdapter.isVersionedRoute<V4PoolInRoute>(PoolType.V4Pool, subRoute)\n      return {\n        routev4: isOnlyV4\n          ? new V4Route(\n              (subRoute as V4PoolInRoute[]).map(RouterTradeAdapter.toV4Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toV3Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV4 && !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v4Routes: typedRoutes\n        .filter((route) => route.routev4)\n        .map((route) => ({\n          routev4: route.routev4 as V4Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V4PoolInRoute | V3PoolInRoute | V2PoolInRoute): V4Pool | V3Pool | Pair => {\n    switch (pool.type) {\n      case PoolType.V4Pool:\n        return RouterTradeAdapter.toV4Pool(pool)\n      case PoolType.V3Pool:\n        return RouterTradeAdapter.toV3Pool(pool)\n      case PoolType.V2Pool:\n        return RouterTradeAdapter.toPair(pool)\n      default:\n        throw new Error('Invalid pool type')\n    }\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toV3Pool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): V3Pool {\n    return new V3Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toV4Pool(pool: V4PoolInRoute): V4Pool {\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenIn.address), pool.tokenIn)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenOut.address), pool.tokenOut)\n    return new V4Pool(\n      parsedCurrencyIn,\n      parsedCurrencyOut,\n      parseInt(pool.fee) as FeeAmount,\n      parseInt(pool.tickSpacing),\n      pool.hooks,\n      pool.sqrtRatioX96,\n      pool.liquidity,\n      parseInt(pool.tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute | V4PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute | V4PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UnwrapWETH\n  readonly permit2Data?: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { ethers } from 'ethers'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { V4BaseActionsParser, V4RouterAction } from '@uniswap/v4-sdk'\nimport { CommandType, CommandDefinition, COMMAND_DEFINITION, Subparser, Parser } from '../utils/routerCommands'\n\nexport type Param = {\n  readonly name: string\n  readonly value: any\n}\n\nexport type UniversalRouterCommand = {\n  readonly commandName: string\n  readonly commandType: CommandType\n  readonly params: readonly Param[]\n}\n\nexport type UniversalRouterCall = {\n  readonly commands: readonly UniversalRouterCommand[]\n}\n\nexport type V3PathItem = {\n  readonly tokenIn: string\n  readonly tokenOut: string\n  readonly fee: number\n}\n\nexport interface CommandsDefinition {\n  [key: number]: CommandDefinition\n}\n\n// Parses UniversalRouter V2 commands\nexport abstract class CommandParser {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static parseCalldata(calldata: string): UniversalRouterCall {\n    const genericParser = new GenericCommandParser(COMMAND_DEFINITION)\n    const txDescription = CommandParser.INTERFACE.parseTransaction({ data: calldata })\n    const { commands, inputs } = txDescription.args\n    return genericParser.parse(commands, inputs)\n  }\n}\n\n// Parses commands based on given command definition\nexport class GenericCommandParser {\n  constructor(private readonly commandDefinition: CommandsDefinition) {}\n\n  public parse(commands: string, inputs: string[]): UniversalRouterCall {\n    const commandTypes = GenericCommandParser.getCommands(commands)\n\n    return {\n      commands: commandTypes.map((commandType: CommandType, i: number) => {\n        const commandDef = this.commandDefinition[commandType]\n\n        if (commandDef.parser === Parser.V4Actions) {\n          const { actions } = V4BaseActionsParser.parseCalldata(inputs[i])\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: v4RouterCallToParams(actions),\n          }\n        } else if (commandDef.parser === Parser.Abi) {\n          const abiDef = commandDef.params\n          const rawParams = ethers.utils.defaultAbiCoder.decode(\n            abiDef.map((command) => command.type),\n            inputs[i]\n          )\n\n          const params = rawParams.map((param: any, j: number) => {\n            switch (abiDef[j].subparser) {\n              case Subparser.V3PathExactIn:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactIn(param),\n                }\n              case Subparser.V3PathExactOut:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactOut(param),\n                }\n              default:\n                return {\n                  name: abiDef[j].name,\n                  value: param,\n                }\n            }\n          })\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params,\n          }\n        } else if (commandDef.parser === Parser.V3Actions) {\n          // TODO: implement better parsing here\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: inputs.map((input) => ({ name: 'command', value: input })),\n          }\n        } else {\n          throw new Error(`Unsupported parser: ${commandDef}`)\n        }\n      }),\n    }\n  }\n\n  // parse command types from bytes string\n  private static getCommands(commands: string): CommandType[] {\n    const commandTypes: CommandType[] = []\n\n    for (let i = 2; i < commands.length; i += 2) {\n      const byte = commands.substring(i, i + 2)\n      commandTypes.push(parseInt(byte, 16) as CommandType)\n    }\n\n    return commandTypes\n  }\n}\n\nexport function parseV3PathExactIn(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(0, 40))\n  let loc = 40\n  const res: V3PathItem[] = []\n  while (loc < strippedPath.length) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const fee = parseInt(feeAndTokenOut.substring(0, 6), 16)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(6, 46))\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n    loc += 46\n  }\n\n  return res\n}\n\nexport function parseV3PathExactOut(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(strippedPath.length - 40))\n  let loc = strippedPath.length - 86 // 86 = (20 addr + 3 fee + 20 addr) * 2 (for hex characters)\n  const res: V3PathItem[] = []\n  while (loc >= 0) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(0, 40))\n    const fee = parseInt(feeAndTokenOut.substring(40, 46), 16)\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n\n    loc -= 46\n  }\n\n  return res\n}\n\nfunction v4RouterCallToParams(actions: readonly V4RouterAction[]): readonly Param[] {\n  return actions.map((action) => {\n    return {\n      name: action.actionName,\n      value: action.params.map((param) => {\n        return {\n          name: param.name,\n          value: param.value,\n        }\n      }),\n    }\n  })\n}\n"],"names":["CommandType","Subparser","Parser","RouterActionType","UniversalRouterVersion","REVERTIBLE_COMMANDS","Set","EXECUTE_SUB_PLAN","COMMAND_DEFINITION","_COMMAND_DEFINITION","parser","Abi","params","name","type","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","subparser","V3PathExactIn","V3_SWAP_EXACT_OUT","V3PathExactOut","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","V4_SWAP","V4Actions","WRAP_ETH","UNWRAP_WETH","SWEEP","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","V4_INITIALIZE_POOL","V3_POSITION_MANAGER_PERMIT","V3Actions","V3_POSITION_MANAGER_CALL","V4_POSITION_MANAGER_CALL","RoutePlanner","this","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","parameters","allowRevert","command","commandDef","encodedInput","defaultAbiCoder","encode","map","abi","createCommand","push","has","Error","concat","toString","padStart","getPathCurrency","currency","pool","involvesToken","wrapped","V4Pool","token0","equals","token1","symbol","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs0","_routerConfigs1","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","UNIVERSAL_ROUTER_ADDRESS","version","chainId","WETH_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","getCurrencyAddress","isNative","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","payerIsUser","inputRequiresWrap","inputRequiresUnwrap","useRouterBalance","planner","_config","maximumAmountIn","slippageTolerance","quotient","inputAmount","recipient","_this$options$recipie","swapOptions","_step","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","length","outputRequiresTransition","_iterator","_createForOfIteratorHelperLoose","swaps","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","V4","addV4Swap","MIXED","addMixedSwap","minimumAmountOut","pools","pathOutputCurrencyAddress","outputAmount","feeBips","toHex","multiply","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","outputRequiresUnwrap","outputRequiresWrap","priceImpact","greaterThan","safeMode","key","get","_step2","result","_iterator2","pathInput","lastRoute","pathOutput","_ref","V2Trade","path","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","_ref3","p","v4Route","V4Route","V4Trade","slippageToleranceOnSwap","undefined","v4Planner","V4Planner","addTrade","addSettle","addTake","_options$recipient","finalize","tradeRecipient","_options$recipient2","V3Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","section","routePool","outputToken","getOutputOfPools","subRoute","MixedRoute","MixedRouteSDK","nextInputToken","swapRecipient","nextPool","liquidityToken","v4SubRoute","input","output","addAction","Actions","SWAP_EXACT_IN","currencyIn","encodeV4RouteToPath","amountOutMinimum","encodeMixedRouteToPath","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","SwapRouter","swapCallParameters","trades","inputCurrency","inputTokenPermit","invariant","nativeCurrencyValue","encodePlan","deadline","deadlineOrPreviousBlockhash","migrateV3ToV4CallParameters","positionManagerOverride","v4Pool","outputPosition","v3Token0","inputPosition","v3Token1","v4PositionManagerAddress","CHAIN_TO_ADDRESSES_MAP","currency0","currency1","v3RemoveLiquidityOptions","liquidityPercentage","equalTo","burnToken","collectOptions","Object","keys","some","k","isMint","v4AddLiquidityOptions","migrate","createPool","poolKey","getPoolKey","tickSpacing","hooks","sqrtRatioX96","permit","spender","tokenId","calldata","NonfungiblePositionManager","INTERFACE","encodeFunctionData","validateAndParseAddress","v","r","s","encodeV3PositionPermit","v3RemoveParams","V3PositionManager","removeCallParameters","Multicall","decodeMulticall","v3Call","selector","slice","getSighash","v4AddParams","V4PositionManager","addCallParameters","config","toHexString","Interface","UniversalRouter","PoolType","UnwrapWETH","wethAddress","details","toLowerCase","permit2Data","_","permit2TransferFrom","permit2Permit","encodeInputTokenOptions","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","isOnlyV4","routev4","toV4Pool","routev3","V3Route","toV3Pool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","filter","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","buyFeeBps","sellFeeBps","Token","parseInt","decimals","liquidity","tickCurrent","every","reserve0","reserve1","CommandParser","parseCalldata","genericParser","GenericCommandParser","_txDescription$args","parseTransaction","data","args","parse","commandDefinition","getCommands","commandType","actions","_this","_V4BaseActionsParser$","V4BaseActionsParser","commandName","action","actionName","param","abiDef","decode","j","parseV3PathExactIn","parseV3PathExactOut","commandTypes","byte","substring","strippedPath","replace","getAddress","loc","res","feeAndTokenOut"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/universal-router-sdk.esm.js b/dist/universal-router-sdk.esm.js
index 3eaaab0..aa6d469 100644
--- a/dist/universal-router-sdk.esm.js
+++ b/dist/universal-router-sdk.esm.js
@@ -419,13 +419,13 @@ var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
     creationBlock: 8940568
   }, _routerConfigs2)
 }, _CHAIN_CONFIGS[11155111] = {
-  weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
+  weth: '0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9',
   routerConfigs: (_routerConfigs3 = {}, _routerConfigs3[UniversalRouterVersion.V1_2] = {
-    address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-    creationBlock: 3543575
+    address: '0x0000000000000000000000000000000000000000',
+    creationBlock: 0
   }, _routerConfigs3[UniversalRouterVersion.V2_0] = {
-    address: '0x3a9d48ab9751398bbfa63ad67599bb04e4bdf98b',
-    creationBlock: 7259601
+    address: '0x6872c178C147c487A71e6033B665a5644c4E7990',
+    creationBlock: 9499896
   }, _routerConfigs3)
 }, _CHAIN_CONFIGS[137] = {
   weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
diff --git a/dist/universal-router-sdk.esm.js.map b/dist/universal-router-sdk.esm.js.map
index 8da76dc..6fe3735 100644
--- a/dist/universal-router-sdk.esm.js.map
+++ b/dist/universal-router-sdk.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/utils/routerCommands.ts","../src/utils/pathCurrency.ts","../src/entities/Command.ts","../src/utils/constants.ts","../src/utils/getCurrencyAddress.ts","../src/utils/numbers.ts","../src/entities/actions/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/actions/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts","../src/utils/commandParser.ts"],"sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  V4_SWAP = 0x10,\n  V3_POSITION_MANAGER_PERMIT = 0x11,\n  V3_POSITION_MANAGER_CALL = 0x12,\n  V4_INITIALIZE_POOL = 0x13,\n  V4_POSITION_MANAGER_CALL = 0x14,\n\n  EXECUTE_SUB_PLAN = 0x21,\n}\n\nexport enum Subparser {\n  V3PathExactIn,\n  V3PathExactOut,\n}\n\nexport enum Parser {\n  Abi,\n  V4Actions,\n  V3Actions,\n}\n\nexport type ParamType = {\n  readonly name: string\n  readonly type: string\n  readonly subparser?: Subparser\n}\n\nexport type CommandDefinition =\n  | {\n      parser: Parser.Abi\n      params: ParamType[]\n    }\n  | {\n      parser: Parser.V4Actions\n    }\n  | {\n      parser: Parser.V3Actions\n    }\n\nconst ALLOW_REVERT_FLAG = 0x80\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([CommandType.EXECUTE_SUB_PLAN])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst POOL_KEY_STRUCT = '(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nexport const COMMAND_DEFINITION: { [key in CommandType]: CommandDefinition } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'commands', type: 'bytes' },\n      { name: 'inputs', type: 'bytes[]' },\n    ],\n  },\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_PERMIT_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_BATCH_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint160' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      {\n        name: 'transferFrom',\n        type: PERMIT2_TRANSFER_FROM_BATCH_STRUCT,\n      },\n    ],\n  },\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactIn, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V3_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactOut, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V4_SWAP]: { parser: Parser.V4Actions },\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n    ],\n  },\n  [CommandType.UNWRAP_WETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.SWEEP]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.TRANSFER]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'value', type: 'uint256' },\n    ],\n  },\n  [CommandType.PAY_PORTION]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'bips', type: 'uint256' },\n    ],\n  },\n  [CommandType.BALANCE_CHECK_ERC20]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'owner', type: 'address' },\n      { name: 'token', type: 'address' },\n      { name: 'minBalance', type: 'uint256' },\n    ],\n  },\n  [CommandType.V4_INITIALIZE_POOL]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'poolKey', type: POOL_KEY_STRUCT },\n      { name: 'sqrtPriceX96', type: 'uint160' },\n    ],\n  },\n\n  // Position Actions\n  [CommandType.V3_POSITION_MANAGER_PERMIT]: { parser: Parser.V3Actions },\n  [CommandType.V3_POSITION_MANAGER_CALL]: { parser: Parser.V3Actions },\n  [CommandType.V4_POSITION_MANAGER_CALL]: { parser: Parser.V4Actions },\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): RoutePlanner {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n    return this\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): RoutePlanner {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n    return this\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const commandDef = COMMAND_DEFINITION[type]\n  switch (commandDef.parser) {\n    case Parser.Abi:\n      const encodedInput = defaultAbiCoder.encode(\n        commandDef.params.map((abi) => abi.type),\n        parameters\n      )\n      return { type, encodedInput }\n    case Parser.V4Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n    case Parser.V3Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n  }\n}\n","import { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport function getPathCurrency(currency: Currency, pool: TPool): Currency {\n  // return currency if the currency matches a currency of the pool\n  if (pool.involvesToken(currency as Token)) {\n    return currency\n\n    // return if currency.wrapped if pool involves wrapped currency\n  } else if (pool.involvesToken(currency.wrapped as Token)) {\n    return currency.wrapped\n\n    // return native currency if pool involves native version of wrapped currency (only applies to V4)\n  } else if (pool instanceof V4Pool && pool.token0.wrapped.equals(currency)) {\n    return pool.token0\n  } else if (pool instanceof V4Pool && pool.token1.wrapped.equals(currency)) {\n    return pool.token1\n  } else {\n    throw new Error(`Expected currency ${currency.symbol} to be either ${pool.token0.symbol} or ${pool.token1.symbol}`)\n  }\n\n  return currency // this line needed for typescript to compile\n}\n","import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterActionType {\n  UniswapTrade = 'UniswapTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterActionType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x66a9893cc07d91d95644aedd05d03f95e1dba8af',\n        creationBlock: 1737658355,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  [11155111]: {\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 3543575,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3a9d48ab9751398bbfa63ad67599bb04e4bdf98b',\n        creationBlock: 7259601,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1095692a6237d83c6a72f3f5efedb9a670c49223',\n        creationBlock: 1737492197,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x851116d9223fabed8e56c0e6b8ad0c31d98b3507',\n        creationBlock: 1737494278,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xa51afafe0263b40edaef0df8781ea9aa03e381a3',\n        creationBlock: 1737487458,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1906c1d672b88cd1b9ac7593301ca990f94eae07',\n        creationBlock: 1737493275,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x94b75331ae8d42c1b61065089b7d48fe14aa73b7',\n        creationBlock: 1737558236,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6ff5693b99212da76ad316178a184ab56d299b43',\n        creationBlock: 1737491485,\n      },\n    },\n  },\n  // blast\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xeabbcb3e8e415306207ef514f660a3f820025be3',\n        creationBlock: 1737564586,\n      },\n    },\n  },\n  // zora\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3315ef7ca28db74abadc6c44570efdf06b04b020',\n        creationBlock: 1737562927,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  // worldchain\n  [480]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n        creationBlock: 4063979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x8ac7bee993bb44dab564ea4bc9ea67bf9eb5e743',\n        creationBlock: 1737559557,\n      },\n    },\n  },\n  [1301]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n        creationBlock: 1241811,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf70536b3bcc1bd1a972dc186a2cf84cc6da6be5d',\n        creationBlock: 7100543,\n      },\n    },\n  },\n  // unichain mainnet\n  [130]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4D73A4411CA1c660035e4AECC8270E5DdDEC8C17',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xef740bf23acae26f6492b10de645d6b98dc8eaf3',\n        creationBlock: 1737568156,\n      },\n    },\n  },\n  [10143]: {\n    weth: '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n    },\n  },\n  [84532]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n    },\n  },\n  [1868]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n    },\n  },\n  [143]: {\n    weth: '0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n","import { Currency } from '@uniswap/sdk-core'\nimport { ETH_ADDRESS } from './constants'\n\nexport function getCurrencyAddress(currency: Currency): string {\n  return currency.isNative ? ETH_ADDRESS : currency.wrapped.address\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Route as V4Route,\n  Trade as V4Trade,\n  Pool as V4Pool,\n  V4Planner,\n  encodeRouteToPath as encodeV4RouteToPath,\n  Actions,\n} from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { getPathCurrency } from '../../utils/pathCurrency'\nimport { Currency, TradeType, Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { getCurrencyAddress } from '../../utils/getCurrencyAddress'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, TPool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap || this.inputRequiresUnwrap || this.options.useRouterBalance) {\n      this.payerIsUser = false\n    } else {\n      this.payerIsUser = true\n    }\n  }\n\n  get isAllV4(): boolean {\n    let result = true\n    for (const swap of this.trade.swaps) {\n      result = result && swap.route.protocol == Protocol.V4\n    }\n    return result\n  }\n\n  // this.trade.swaps is an array of swaps / trades.\n  // we are iterating over one swap (trade) at a time so length is 1\n  // route is either v2, v3, v4, or mixed\n  // pathInput and pathOutput are the currencies of the input and output of the route\n  // this.trade.inputAmount is the input currency of the trade (could be different from pathInput)\n  // this.trade.outputAmount is the output currency of the trade (could be different from pathOutput)\n  // each route can have multiple pools\n  get inputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If first pool is a v4 pool and input currency is native and the path input currency in the route is not native, we need to wrap.\n      return (\n        this.trade.inputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If first pool is not a v4 pool and input currency is native, we need to wrap\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  get inputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If the first pool is a v4 pool and input currency is not native and the path input currency is native, we need to unwrap\n      return (\n        !this.trade.inputAmount.currency.isNative &&\n        (this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If the first pool is not a v4 pool, we don't need to unwrap.\n    return false\n  }\n\n  get outputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is not native but path currency output is native, we need to wrap\n      return (\n        !this.trade.outputAmount.currency.isNative &&\n        (lastRoute as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // if last pool is not v4:\n    // we do not need to wrap because v2 and v3 pools already require wrapped tokens\n    return false\n  }\n\n  get outputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is native and path currency output is not native, we need to unwrap\n      return (\n        this.trade.outputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // else: if path output currency is native, we need to unwrap because v2 and v3 pools already require wrapped tokens\n    return this.trade.outputAmount.currency.isNative\n  }\n\n  get outputRequiresTransition(): boolean {\n    return this.outputRequiresWrap || this.outputRequiresUnwrap\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    } else if (this.inputRequiresUnwrap) {\n      // send wrapped token to router to unwrap\n      planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n        (this.trade.inputAmount.currency as Token).address,\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const routerMustCustody =\n      performAggregatedSlippageCheck || this.outputRequiresTransition || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V4:\n          addV4Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      const pools = this.trade.swaps[0].route.pools\n      const pathOutputCurrencyAddress = getCurrencyAddress(\n        getPathCurrency(this.trade.outputAmount.currency, pools[pools.length - 1])\n      )\n\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [pathOutputCurrencyAddress, this.options.fee.recipient, feeBips])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [pathOutputCurrencyAddress, this.options.flatFee.recipient, feeAmount])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (this.outputRequiresUnwrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else if (this.outputRequiresWrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          getCurrencyAddress(this.trade.outputAmount.currency),\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    // for exactOutput swaps with native input or that perform an inputToken transition (wrap or unwrap)\n    // we need to send back the change to the user\n    if (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade)) {\n      if (this.inputRequiresWrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n      } else if (this.inputRequiresUnwrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else if (this.trade.inputAmount.currency.isNative) {\n        // must refund extra native currency sent along for native v4 trades (no input transition)\n        planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n      }\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      // if router will custody funds, we do aggregated slippage check from router\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\nfunction addV4Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { inputAmount, outputAmount, route }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  // create a deep copy of pools since v4Planner encoding tampers with array\n  const pools = route.pools.map((p) => p) as V4Pool[]\n  const v4Route = new V4Route(pools, inputAmount.currency, outputAmount.currency)\n  const trade = V4Trade.createUncheckedTrade({\n    route: v4Route,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const slippageToleranceOnSwap =\n    routerMustCustody && tradeType == TradeType.EXACT_INPUT ? undefined : options.slippageTolerance\n\n  const v4Planner = new V4Planner()\n  v4Planner.addTrade(trade, slippageToleranceOnSwap)\n  v4Planner.addSettle(trade.route.pathInput, payerIsUser)\n  v4Planner.addTake(\n    trade.route.pathOutput,\n    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n  )\n  planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const route = swap.route as MixedRoute<TInput, TOutput>\n  const inputAmount = swap.inputAmount\n  const outputAmount = swap.outputAmount\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n\n  // single hop, so it can be reduced to plain swap logic for one protocol version\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V4Pool) {\n      return addV4Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = routerMustCustody\n    ? 0\n    : trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let inputToken = route.pathInput\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    const routePool = section[0]\n    const outputToken = getOutputOfPools(section, inputToken)\n    const subRoute = new MixedRoute(new MixedRouteSDK([...section], inputToken, outputToken))\n\n    let nextInputToken\n    let swapRecipient\n\n    if (isLastSectionInRoute(i)) {\n      nextInputToken = outputToken\n      swapRecipient = tradeRecipient\n    } else {\n      const nextPool = sections[i + 1][0]\n      nextInputToken = getPathCurrency(outputToken, nextPool)\n\n      const v2PoolIsSwapRecipient = nextPool instanceof Pair && outputToken.equals(nextInputToken)\n      swapRecipient = v2PoolIsSwapRecipient ? (nextPool as Pair).liquidityToken.address : ROUTER_AS_RECIPIENT\n    }\n\n    if (routePool instanceof V4Pool) {\n      const v4Planner = new V4Planner()\n      const v4SubRoute = new V4Route(section as V4Pool[], subRoute.input, subRoute.output)\n\n      v4Planner.addSettle(inputToken, payerIsUser && i === 0, (i == 0 ? amountIn : CONTRACT_BALANCE) as BigNumber)\n      v4Planner.addAction(Actions.SWAP_EXACT_IN, [\n        {\n          currencyIn: inputToken.isNative ? ETH_ADDRESS : inputToken.address,\n          path: encodeV4RouteToPath(v4SubRoute),\n          amountIn: 0, // denotes open delta, amount set in v4Planner.addSettle()\n          amountOutMinimum: !isLastSectionInRoute(i) ? 0 : amountOut,\n        },\n      ])\n      v4Planner.addTake(outputToken, swapRecipient)\n\n      planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n    } else if (routePool instanceof V3Pool) {\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        encodeMixedRouteToPath(subRoute), // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else if (routePool instanceof Pair) {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        subRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    } else {\n      throw new Error('Unexpected Pool Type')\n    }\n\n    // perform a token transition (wrap/unwrap if necessary)\n    if (!isLastSectionInRoute(i)) {\n      if (outputToken.isNative && !nextInputToken.isNative) {\n        planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, CONTRACT_BALANCE])\n      } else if (!outputToken.isNative && nextInputToken.isNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n      }\n    }\n\n    inputToken = nextInputToken\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { validateAndParseAddress, BigintIsh } from '@uniswap/sdk-core'\nimport { NFTPermitOptions, NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { ROUTER_AS_RECIPIENT } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\nexport function encodeV3PositionPermit(planner: RoutePlanner, permit: NFTPermitOptions, tokenId: BigintIsh): void {\n  const calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n    validateAndParseAddress(permit.spender),\n    tokenId,\n    permit.deadline,\n    permit.v,\n    permit.r,\n    permit.s,\n  ])\n\n  planner.addCommand(CommandType.V3_POSITION_MANAGER_PERMIT, [calldata])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport {\n  MethodParameters,\n  Multicall,\n  Position as V3Position,\n  NonfungiblePositionManager as V3PositionManager,\n  RemoveLiquidityOptions as V3RemoveLiquidityOptions,\n} from '@uniswap/v3-sdk'\nimport {\n  Position as V4Position,\n  V4PositionManager,\n  AddLiquidityOptions as V4AddLiquidityOptions,\n  MintOptions,\n  Pool as V4Pool,\n  PoolKey,\n} from '@uniswap/v4-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Percent, CHAIN_TO_ADDRESSES_MAP, SupportedChainsType } from '@uniswap/sdk-core'\nimport { UniswapTrade, SwapOptions } from './entities/actions/uniswap'\nimport { RoutePlanner, CommandType } from './utils/routerCommands'\nimport { encodePermit, encodeV3PositionPermit } from './utils/inputTokens'\nimport { UNIVERSAL_ROUTER_ADDRESS, UniversalRouterVersion } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport interface MigrateV3ToV4Options {\n  inputPosition: V3Position\n  outputPosition: V4Position\n  v3RemoveLiquidityOptions: V3RemoveLiquidityOptions\n  v4AddLiquidityOptions: V4AddLiquidityOptions\n}\n\nfunction isMint(options: V4AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static swapCallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Builds the call parameters for a migration from a V3 position to a V4 position.\n   * Some requirements of the parameters:\n   *   - v3RemoveLiquidityOptions.collectOptions.recipient must equal v4PositionManager\n   *   - v3RemoveLiquidityOptions.liquidityPercentage must be 100%\n   *   - input pool and output pool must have the same tokens\n   *   - V3 NFT must be approved, or valid inputV3NFTPermit must be provided with UR as spender\n   */\n  public static migrateV3ToV4CallParameters(\n    options: MigrateV3ToV4Options,\n    positionManagerOverride?: string\n  ): MethodParameters {\n    const v4Pool: V4Pool = options.outputPosition.pool\n    const v3Token0 = options.inputPosition.pool.token0\n    const v3Token1 = options.inputPosition.pool.token1\n    const v4PositionManagerAddress =\n      positionManagerOverride ?? CHAIN_TO_ADDRESSES_MAP[v4Pool.chainId as SupportedChainsType].v4PositionManagerAddress\n\n    // owner of the v3 nft must be the receiver of the v4 nft\n\n    // validate the parameters\n    if (v4Pool.currency0.isNative) {\n      invariant(\n        (v4Pool.currency0.wrapped.equals(v3Token0) && v4Pool.currency1.equals(v3Token1)) ||\n          (v4Pool.currency0.wrapped.equals(v3Token1) && v4Pool.currency1.equals(v3Token0)),\n        'TOKEN_MISMATCH'\n      )\n    } else {\n      invariant(v3Token0 === v4Pool.token0, 'TOKEN0_MISMATCH')\n      invariant(v3Token1 === v4Pool.token1, 'TOKEN1_MISMATCH')\n    }\n\n    invariant(\n      options.v3RemoveLiquidityOptions.liquidityPercentage.equalTo(new Percent(100, 100)),\n      'FULL_REMOVAL_REQUIRED'\n    )\n    invariant(options.v3RemoveLiquidityOptions.burnToken == true, 'BURN_TOKEN_REQUIRED')\n    invariant(\n      options.v3RemoveLiquidityOptions.collectOptions.recipient === v4PositionManagerAddress,\n      'RECIPIENT_NOT_POSITION_MANAGER'\n    )\n    invariant(isMint(options.v4AddLiquidityOptions), 'MINT_REQUIRED')\n    invariant(options.v4AddLiquidityOptions.migrate, 'MIGRATE_REQUIRED')\n\n    const planner = new RoutePlanner()\n\n    // to prevent reentrancy by the pool hook, we initialize the v4 pool before moving funds\n    if (options.v4AddLiquidityOptions.createPool) {\n      const poolKey: PoolKey = V4Pool.getPoolKey(\n        v4Pool.currency0,\n        v4Pool.currency1,\n        v4Pool.fee,\n        v4Pool.tickSpacing,\n        v4Pool.hooks\n      )\n      planner.addCommand(CommandType.V4_INITIALIZE_POOL, [poolKey, v4Pool.sqrtRatioX96.toString()])\n      // remove createPool setting, so that it doesnt get encoded again later\n      delete options.v4AddLiquidityOptions.createPool\n    }\n\n    // add position permit to the universal router planner\n    if (options.v3RemoveLiquidityOptions.permit) {\n      // permit spender should be UR\n      const universalRouterAddress = UNIVERSAL_ROUTER_ADDRESS(\n        UniversalRouterVersion.V2_0,\n        options.inputPosition.pool.chainId as SupportedChainsType\n      )\n      invariant(universalRouterAddress == options.v3RemoveLiquidityOptions.permit.spender, 'INVALID_SPENDER')\n      // don't need to transfer it because v3posm uses isApprovedOrOwner()\n      encodeV3PositionPermit(planner, options.v3RemoveLiquidityOptions.permit, options.v3RemoveLiquidityOptions.tokenId)\n      // remove permit so that multicall doesnt add it again\n      delete options.v3RemoveLiquidityOptions.permit\n    }\n\n    // encode v3 withdraw\n    const v3RemoveParams: MethodParameters = V3PositionManager.removeCallParameters(\n      options.inputPosition,\n      options.v3RemoveLiquidityOptions\n    )\n    const v3Calls: string[] = Multicall.decodeMulticall(v3RemoveParams.calldata)\n\n    for (const v3Call of v3Calls) {\n      // slice selector - 0x + 4 bytes = 10 characters\n      const selector = v3Call.slice(0, 10)\n      invariant(\n        selector == V3PositionManager.INTERFACE.getSighash('collect') ||\n          selector == V3PositionManager.INTERFACE.getSighash('decreaseLiquidity') ||\n          selector == V3PositionManager.INTERFACE.getSighash('burn'),\n        'INVALID_V3_CALL: ' + selector\n      )\n      planner.addCommand(CommandType.V3_POSITION_MANAGER_CALL, [v3Call])\n    }\n\n    // encode v4 mint\n    const v4AddParams = V4PositionManager.addCallParameters(options.outputPosition, options.v4AddLiquidityOptions)\n    // only modifyLiquidities can be called by the UniversalRouter\n    const selector = v4AddParams.calldata.slice(0, 10)\n    invariant(selector == V4PositionManager.INTERFACE.getSighash('modifyLiquidities'), 'INVALID_V4_CALL: ' + selector)\n\n    planner.addCommand(CommandType.V4_POSITION_MANAGER_CALL, [v4AddParams.calldata])\n\n    return SwapRouter.encodePlan(planner, BigNumber.from(0), {\n      deadline: BigNumber.from(options.v4AddLiquidityOptions.deadline),\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UnwrapWETH\n  readonly permit2Data?: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool as V3Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool, Route as V4Route } from '@uniswap/v4-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n  V4Pool = 'v4-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V4PoolInRoute = {\n  type: PoolType.V4Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  fee: string\n  tickSpacing: string\n  hooks: string\n  liquidity: string\n  sqrtRatioX96: string\n  tickCurrent: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V4PoolInRoute | V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev4: V4Route<Currency, Currency> | null\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n      const isOnlyV4 = RouterTradeAdapter.isVersionedRoute<V4PoolInRoute>(PoolType.V4Pool, subRoute)\n      return {\n        routev4: isOnlyV4\n          ? new V4Route(\n              (subRoute as V4PoolInRoute[]).map(RouterTradeAdapter.toV4Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toV3Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV4 && !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v4Routes: typedRoutes\n        .filter((route) => route.routev4)\n        .map((route) => ({\n          routev4: route.routev4 as V4Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V4PoolInRoute | V3PoolInRoute | V2PoolInRoute): V4Pool | V3Pool | Pair => {\n    switch (pool.type) {\n      case PoolType.V4Pool:\n        return RouterTradeAdapter.toV4Pool(pool)\n      case PoolType.V3Pool:\n        return RouterTradeAdapter.toV3Pool(pool)\n      case PoolType.V2Pool:\n        return RouterTradeAdapter.toPair(pool)\n      default:\n        throw new Error('Invalid pool type')\n    }\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toV3Pool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): V3Pool {\n    return new V3Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toV4Pool(pool: V4PoolInRoute): V4Pool {\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenIn.address), pool.tokenIn)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenOut.address), pool.tokenOut)\n    return new V4Pool(\n      parsedCurrencyIn,\n      parsedCurrencyOut,\n      parseInt(pool.fee) as FeeAmount,\n      parseInt(pool.tickSpacing),\n      pool.hooks,\n      pool.sqrtRatioX96,\n      pool.liquidity,\n      parseInt(pool.tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute | V4PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute | V4PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import { ethers } from 'ethers'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { V4BaseActionsParser, V4RouterAction } from '@uniswap/v4-sdk'\nimport { CommandType, CommandDefinition, COMMAND_DEFINITION, Subparser, Parser } from '../utils/routerCommands'\n\nexport type Param = {\n  readonly name: string\n  readonly value: any\n}\n\nexport type UniversalRouterCommand = {\n  readonly commandName: string\n  readonly commandType: CommandType\n  readonly params: readonly Param[]\n}\n\nexport type UniversalRouterCall = {\n  readonly commands: readonly UniversalRouterCommand[]\n}\n\nexport type V3PathItem = {\n  readonly tokenIn: string\n  readonly tokenOut: string\n  readonly fee: number\n}\n\nexport interface CommandsDefinition {\n  [key: number]: CommandDefinition\n}\n\n// Parses UniversalRouter V2 commands\nexport abstract class CommandParser {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static parseCalldata(calldata: string): UniversalRouterCall {\n    const genericParser = new GenericCommandParser(COMMAND_DEFINITION)\n    const txDescription = CommandParser.INTERFACE.parseTransaction({ data: calldata })\n    const { commands, inputs } = txDescription.args\n    return genericParser.parse(commands, inputs)\n  }\n}\n\n// Parses commands based on given command definition\nexport class GenericCommandParser {\n  constructor(private readonly commandDefinition: CommandsDefinition) {}\n\n  public parse(commands: string, inputs: string[]): UniversalRouterCall {\n    const commandTypes = GenericCommandParser.getCommands(commands)\n\n    return {\n      commands: commandTypes.map((commandType: CommandType, i: number) => {\n        const commandDef = this.commandDefinition[commandType]\n\n        if (commandDef.parser === Parser.V4Actions) {\n          const { actions } = V4BaseActionsParser.parseCalldata(inputs[i])\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: v4RouterCallToParams(actions),\n          }\n        } else if (commandDef.parser === Parser.Abi) {\n          const abiDef = commandDef.params\n          const rawParams = ethers.utils.defaultAbiCoder.decode(\n            abiDef.map((command) => command.type),\n            inputs[i]\n          )\n\n          const params = rawParams.map((param: any, j: number) => {\n            switch (abiDef[j].subparser) {\n              case Subparser.V3PathExactIn:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactIn(param),\n                }\n              case Subparser.V3PathExactOut:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactOut(param),\n                }\n              default:\n                return {\n                  name: abiDef[j].name,\n                  value: param,\n                }\n            }\n          })\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params,\n          }\n        } else if (commandDef.parser === Parser.V3Actions) {\n          // TODO: implement better parsing here\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: inputs.map((input) => ({ name: 'command', value: input })),\n          }\n        } else {\n          throw new Error(`Unsupported parser: ${commandDef}`)\n        }\n      }),\n    }\n  }\n\n  // parse command types from bytes string\n  private static getCommands(commands: string): CommandType[] {\n    const commandTypes: CommandType[] = []\n\n    for (let i = 2; i < commands.length; i += 2) {\n      const byte = commands.substring(i, i + 2)\n      commandTypes.push(parseInt(byte, 16) as CommandType)\n    }\n\n    return commandTypes\n  }\n}\n\nexport function parseV3PathExactIn(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(0, 40))\n  let loc = 40\n  const res: V3PathItem[] = []\n  while (loc < strippedPath.length) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const fee = parseInt(feeAndTokenOut.substring(0, 6), 16)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(6, 46))\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n    loc += 46\n  }\n\n  return res\n}\n\nexport function parseV3PathExactOut(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(strippedPath.length - 40))\n  let loc = strippedPath.length - 86 // 86 = (20 addr + 3 fee + 20 addr) * 2 (for hex characters)\n  const res: V3PathItem[] = []\n  while (loc >= 0) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(0, 40))\n    const fee = parseInt(feeAndTokenOut.substring(40, 46), 16)\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n\n    loc -= 46\n  }\n\n  return res\n}\n\nfunction v4RouterCallToParams(actions: readonly V4RouterAction[]): readonly Param[] {\n  return actions.map((action) => {\n    return {\n      name: action.actionName,\n      value: action.params.map((param) => {\n        return {\n          name: param.name,\n          value: param.value,\n        }\n      }),\n    }\n  })\n}\n"],"names":["CommandType","Subparser","Parser","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","EXECUTE_SUB_PLAN","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","POOL_KEY_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","COMMAND_DEFINITION","_COMMAND_DEFINITION","parser","Abi","params","name","type","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","subparser","V3PathExactIn","V3_SWAP_EXACT_OUT","V3PathExactOut","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","V4_SWAP","V4Actions","WRAP_ETH","UNWRAP_WETH","SWEEP","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","V4_INITIALIZE_POOL","V3_POSITION_MANAGER_PERMIT","V3Actions","V3_POSITION_MANAGER_CALL","V4_POSITION_MANAGER_CALL","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","commandDef","defaultAbiCoder","encode","map","abi","getPathCurrency","currency","pool","involvesToken","wrapped","V4Pool","token0","equals","token1","symbol","RouterActionType","UniversalRouterVersion","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs0","_routerConfigs1","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","UNIVERSAL_ROUTER_ADDRESS","version","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","getCurrencyAddress","isNative","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","inputRequiresUnwrap","useRouterBalance","payerIsUser","planner","_config","maximumAmountIn","slippageTolerance","inputAmount","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","length","routerMustCustody","outputRequiresTransition","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","V4","addV4Swap","MIXED","addMixedSwap","minimumAmountOut","pools","pathOutputCurrencyAddress","outputAmount","feeBips","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","outputRequiresUnwrap","outputRequiresWrap","riskOfPartialFill","safeMode","_createClass","key","get","result","_iterator2","_step2","firstPool","pathInput","lastRoute","lastPool","pathOutput","_ref","V2Trade","path","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","_ref3","p","v4Route","V4Route","V4Trade","slippageToleranceOnSwap","undefined","v4Planner","V4Planner","addTrade","addSettle","addTake","_options$recipient","finalize","tradeRecipient","_options$recipient2","V3Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","section","routePool","outputToken","getOutputOfPools","subRoute","MixedRoute","MixedRouteSDK","nextInputToken","swapRecipient","nextPool","v2PoolIsSwapRecipient","liquidityToken","v4SubRoute","input","output","addAction","Actions","SWAP_EXACT_IN","currencyIn","encodeV4RouteToPath","amountOutMinimum","encodeMixedRouteToPath","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeV3PositionPermit","permit","tokenId","calldata","NonfungiblePositionManager","INTERFACE","encodeFunctionData","validateAndParseAddress","spender","deadline","v","r","s","encodeInputTokenOptions","permit2TransferFrom","permit2Permit","details","process","env","NODE_ENV","invariant","isMint","Object","keys","some","k","SwapRouter","swapCallParameters","trades","inputCurrency","inputTokenPermit","nativeCurrencyValue","encodePlan","deadlineOrPreviousBlockhash","migrateV3ToV4CallParameters","positionManagerOverride","v4Pool","outputPosition","v3Token0","inputPosition","v3Token1","v4PositionManagerAddress","CHAIN_TO_ADDRESSES_MAP","currency0","currency1","v3RemoveLiquidityOptions","liquidityPercentage","equalTo","burnToken","collectOptions","v4AddLiquidityOptions","migrate","createPool","poolKey","getPoolKey","tickSpacing","hooks","sqrtRatioX96","universalRouterAddress","v3RemoveParams","V3PositionManager","removeCallParameters","v3Calls","Multicall","decodeMulticall","v3Call","selector","slice","getSighash","v4AddParams","V4PositionManager","addCallParameters","config","functionSignature","toHexString","Interface","UniversalRouter","UnwrapWETH","wethAddress","toLowerCase","permit2Data","_","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","isOnlyV4","routev4","toV4Pool","routev3","V3Route","toV3Pool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","filter","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","decimals","buyFeeBps","sellFeeBps","Token","parseInt","liquidity","tickCurrent","every","reserve0","reserve1","CommandParser","parseCalldata","genericParser","GenericCommandParser","txDescription","parseTransaction","data","_txDescription$args","args","parse","commandDefinition","commandTypes","getCommands","commandType","_this","_V4BaseActionsParser$","V4BaseActionsParser","actions","commandName","v4RouterCallToParams","abiDef","rawParams","decode","param","j","parseV3PathExactIn","parseV3PathExactOut","byte","substring","strippedPath","replace","getAddress","loc","res","feeAndTokenOut","action","actionName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;IAKYA;AAAZ,WAAYA,WAAW;EACrBA,qEAAuB;EACvBA,uEAAwB;EACxBA,+EAA4B;EAC5BA,6EAA2B;EAC3BA,+CAAY;EACZA,qDAAe;EACfA,2DAAkB;EAElBA,qEAAuB;EACvBA,uEAAwB;EACxBA,kEAAqB;EACrBA,sDAAe;EACfA,4DAAkB;EAClBA,4FAAkC;EAClCA,4EAA0B;EAE1BA,oDAAc;EACdA,0FAAiC;EACjCA,sFAA+B;EAC/BA,0EAAyB;EACzBA,sFAA+B;EAE/BA,sEAAuB;AACzB,CAAC,EAxBWA,WAAW,KAAXA,WAAW;IA0BXC;AAAZ,WAAYA,SAAS;EACnBA,2DAAa;EACbA,6DAAc;AAChB,CAAC,EAHWA,SAAS,KAATA,SAAS;IAKTC;AAAZ,WAAYA,MAAM;EAChBA,iCAAG;EACHA,6CAAS;EACTA,6CAAS;AACX,CAAC,EAJWA,MAAM,KAANA,MAAM;AAwBlB,IAAMC,iBAAiB,GAAG,IAAI;AAC9B,IAAMC,mBAAmB,gBAAG,IAAIC,GAAG,CAAc,CAACL,WAAW,CAACM,gBAAgB,CAAC,CAAC;AAEhF,IAAMC,aAAa,GACjB,6GAA6G;AAE/G,IAAMC,mBAAmB,GACvB,+GAA+G;AAEjH,IAAMC,eAAe,GAAG,kFAAkF;AAE1G,IAAMC,4BAA4B,GAAG,wDAAwD;AAC7F,IAAMC,kCAAkC,GAAGD,4BAA4B,GAAG,IAAI;IAEjEE,kBAAkB,IAAAC,mBAAA,OAAAA,mBAAA,CAE5Bb,WAAW,CAACM,gBAAgB,IAAG;EAC9BQ,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;GAAS,EACnC;IAAED,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE;GAAW;CAEtC,EAAAL,mBAAA,CAGAb,WAAW,CAACmB,cAAc,IAAG;EAC5BL,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAEX;GAAe,EACvC;IAAEU,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAS;CAEvC,EAAAL,mBAAA,CACAb,WAAW,CAACoB,oBAAoB,IAAG;EAClCN,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAEV;GAAqB,EAC7C;IAAES,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAS;CAEvC,EAAAL,mBAAA,CACAb,WAAW,CAACqB,qBAAqB,IAAG;EACnCP,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;GAAW,EAClC;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE;GAAW;CAEtC,EAAAL,mBAAA,CACAb,WAAW,CAACsB,2BAA2B,IAAG;EACzCR,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IACEC,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAEP;GACP;CAEJ,EAAAE,mBAAA,CAGAb,WAAW,CAACuB,gBAAgB,IAAG;EAC9BT,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;GAAW,EACrC;IAAED,IAAI,EAAE,cAAc;IAAEC,IAAI,EAAE;GAAW,EACzC;IAAED,IAAI,EAAE,MAAM;IAAEO,SAAS,EAAEvB,SAAS,CAACwB,aAAa;IAAEP,IAAI,EAAE;GAAS,EACnE;IAAED,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE;GAAQ;CAExC,EAAAL,mBAAA,CACAb,WAAW,CAAC0B,iBAAiB,IAAG;EAC/BZ,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE;GAAW,EACxC;IAAED,IAAI,EAAE,MAAM;IAAEO,SAAS,EAAEvB,SAAS,CAAC0B,cAAc;IAAET,IAAI,EAAE;GAAS,EACpE;IAAED,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE;GAAQ;CAExC,EAAAL,mBAAA,CACAb,WAAW,CAAC4B,gBAAgB,IAAG;EAC9Bd,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;GAAW,EACrC;IAAED,IAAI,EAAE,cAAc;IAAEC,IAAI,EAAE;GAAW,EACzC;IAAED,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;GAAa,EACnC;IAAED,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE;GAAQ;CAExC,EAAAL,mBAAA,CACAb,WAAW,CAAC6B,iBAAiB,IAAG;EAC/Bf,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE;GAAW,EACxC;IAAED,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;GAAa,EACnC;IAAED,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE;GAAQ;CAExC,EAAAL,mBAAA,CACAb,WAAW,CAAC8B,OAAO,IAAG;EAAEhB,MAAM,EAAEZ,MAAM,CAAC6B;CAAW,EAAAlB,mBAAA,CAGlDb,WAAW,CAACgC,QAAQ,IAAG;EACtBlB,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE;GAAW;CAEtC,EAAAL,mBAAA,CACAb,WAAW,CAACiC,WAAW,IAAG;EACzBnB,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW;CAEzC,EAAAL,mBAAA,CACAb,WAAW,CAACkC,KAAK,IAAG;EACnBpB,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;GAAW,EAClC;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW;CAEzC,EAAAL,mBAAA,CACAb,WAAW,CAACmC,QAAQ,IAAG;EACtBrB,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;GAAW,EAClC;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;GAAW;CAErC,EAAAL,mBAAA,CACAb,WAAW,CAACoC,WAAW,IAAG;EACzBtB,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;GAAW,EAClC;IAAED,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;GAAW,EACtC;IAAED,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;GAAW;CAEpC,EAAAL,mBAAA,CACAb,WAAW,CAACqC,mBAAmB,IAAG;EACjCvB,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;GAAW,EAClC;IAAED,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;GAAW,EAClC;IAAED,IAAI,EAAE,YAAY;IAAEC,IAAI,EAAE;GAAW;CAE1C,EAAAL,mBAAA,CACAb,WAAW,CAACsC,kBAAkB,IAAG;EAChCxB,MAAM,EAAEZ,MAAM,CAACa,GAAG;EAClBC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAET;GAAiB,EAC1C;IAAEQ,IAAI,EAAE,cAAc;IAAEC,IAAI,EAAE;GAAW;CAE5C,EAAAL,mBAAA,CAGAb,WAAW,CAACuC,0BAA0B,IAAG;EAAEzB,MAAM,EAAEZ,MAAM,CAACsC;CAAW,EAAA3B,mBAAA,CACrEb,WAAW,CAACyC,wBAAwB,IAAG;EAAE3B,MAAM,EAAEZ,MAAM,CAACsC;CAAW,EAAA3B,mBAAA,CACnEb,WAAW,CAAC0C,wBAAwB,IAAG;EAAE5B,MAAM,EAAEZ,MAAM,CAAC6B;CAAW,EAAAlB,mBAAA;IAGzD8B,YAAY;EAIvB,SAAAA;IACE,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,MAAM,GAAG,EAAE;;EACjB,IAAAC,MAAA,GAAAH,YAAA,CAAAI,SAAA;EAAAD,MAAA,CAEDE,UAAU,GAAV,SAAAA,UAAUA,CAACC,OAAqB;IAC9B,IAAI,CAACC,UAAU,CAAClD,WAAW,CAACM,gBAAgB,EAAE,CAAC2C,OAAO,CAACL,QAAQ,EAAEK,OAAO,CAACJ,MAAM,CAAC,EAAE,IAAI,CAAC;IACvF,OAAO,IAAI;GACZ;EAAAC,MAAA,CAEDI,UAAU,GAAV,SAAAA,UAAUA,CAAChC,IAAiB,EAAEiC,UAAiB,EAAEC,WAAW;QAAXA,WAAW;MAAXA,WAAW,GAAG,KAAK;;IAClE,IAAIC,OAAO,GAAGC,aAAa,CAACpC,IAAI,EAAEiC,UAAU,CAAC;IAC7C,IAAI,CAACN,MAAM,CAACU,IAAI,CAACF,OAAO,CAACG,YAAY,CAAC;IACtC,IAAIJ,WAAW,EAAE;MACf,IAAI,CAAChD,mBAAmB,CAACqD,GAAG,CAACJ,OAAO,CAACnC,IAAI,CAAC,EAAE;QAC1C,MAAM,IAAIwC,KAAK,oBAAkBL,OAAO,CAACnC,IAAI,iCAA8B,CAAC;;MAE9EmC,OAAO,CAACnC,IAAI,GAAGmC,OAAO,CAACnC,IAAI,GAAGf,iBAAiB;;IAGjD,IAAI,CAACyC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACe,MAAM,CAACN,OAAO,CAACnC,IAAI,CAAC0C,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;IAChF,OAAO,IAAI;GACZ;EAAA,OAAAlB,YAAA;AAAA;SAQaW,aAAaA,CAACpC,IAAiB,EAAEiC,UAAiB;EAChE,IAAMW,UAAU,GAAGlD,kBAAkB,CAACM,IAAI,CAAC;EAC3C,QAAQ4C,UAAU,CAAChD,MAAM;IACvB,KAAKZ,MAAM,CAACa,GAAG;MACb,IAAMyC,YAAY,GAAGO,eAAe,CAACC,MAAM,CACzCF,UAAU,CAAC9C,MAAM,CAACiD,GAAG,CAAC,UAACC,GAAG;QAAA,OAAKA,GAAG,CAAChD,IAAI;QAAC,EACxCiC,UAAU,CACX;MACD,OAAO;QAAEjC,IAAI,EAAJA,IAAI;QAAEsC,YAAY,EAAZA;OAAc;IAC/B,KAAKtD,MAAM,CAAC6B,SAAS;;MAEnB,OAAO;QAAEb,IAAI,EAAJA,IAAI;QAAEsC,YAAY,EAAEL,UAAU,CAAC,CAAC;OAAG;IAC9C,KAAKjD,MAAM,CAACsC,SAAS;;MAEnB,OAAO;QAAEtB,IAAI,EAAJA,IAAI;QAAEsC,YAAY,EAAEL,UAAU,CAAC,CAAC;OAAG;;AAElD;;SC7QgBgB,eAAeA,CAACC,QAAkB,EAAEC,IAAW;;EAE7D,IAAIA,IAAI,CAACC,aAAa,CAACF,QAAiB,CAAC,EAAE;IACzC,OAAOA,QAAQ;;GAGhB,MAAM,IAAIC,IAAI,CAACC,aAAa,CAACF,QAAQ,CAACG,OAAgB,CAAC,EAAE;IACxD,OAAOH,QAAQ,CAACG,OAAO;;GAGxB,MAAM,IAAIF,IAAI,YAAYG,IAAM,IAAIH,IAAI,CAACI,MAAM,CAACF,OAAO,CAACG,MAAM,CAACN,QAAQ,CAAC,EAAE;IACzE,OAAOC,IAAI,CAACI,MAAM;GACnB,MAAM,IAAIJ,IAAI,YAAYG,IAAM,IAAIH,IAAI,CAACM,MAAM,CAACJ,OAAO,CAACG,MAAM,CAACN,QAAQ,CAAC,EAAE;IACzE,OAAOC,IAAI,CAACM,MAAM;GACnB,MAAM;IACL,MAAM,IAAIjB,KAAK,wBAAsBU,QAAQ,CAACQ,MAAM,sBAAiBP,IAAI,CAACI,MAAM,CAACG,MAAM,YAAOP,IAAI,CAACM,MAAM,CAACC,MAAQ,CAAC;;AAIvH;;ICjBYC,gBAGX;AAHD,WAAYA,gBAAgB;EAC1BA,iDAA6B;EAC7BA,6CAAyB;AAC3B,CAAC,EAHWA,gBAAgB,KAAhBA,gBAAgB;;;ACN5B,IAEYC,sBAGX;AAHD,WAAYA,sBAAsB;EAChCA,sCAAY;EACZA,sCAAY;AACd,CAAC,EAHWA,sBAAsB,KAAtBA,sBAAsB;AAelC,IAAMC,2BAA2B,GAAG,4CAA4C;AAEhF;AACA,AAAO,IAAMC,aAAa,IAAAC,cAAA,OAAAA,cAAA,CAEvB,CAAC,IAAG;EACHC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAC,cAAA,OAAAA,cAAA,CACVN,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAH,cAAA,CACAN,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAH,cAAA;CAEJ,EAAAH,cAAA,CAEA,CAAC,IAAG;EACHC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAM,eAAA,OAAAA,eAAA,CACVX,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAE,eAAA,CACAX,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAE,eAAA;CAEJ,EAAAR,cAAA,CAEA,QAAQ,IAAG;EACVC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAO,eAAA,OAAAA,eAAA,CACVZ,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAG,eAAA,CACAZ,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAG,eAAA;CAEJ,EAAAT,cAAA,CAEA,GAAG,IAAG;EACLC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAQ,eAAA,OAAAA,eAAA,CACVb,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAI,eAAA,CACAb,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAI,eAAA;CAEJ,EAAAV,cAAA,CAEA,KAAK,IAAG;EACPC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAS,eAAA,OAAAA,eAAA,CACVd,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAK,eAAA,CACAd,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAK,eAAA;CAEJ,EAAAX,cAAA,CAEA,EAAE,IAAG;EACJC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAU,eAAA,OAAAA,eAAA,CACVf,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAM,eAAA,CACAf,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAM,eAAA;CAEJ,EAAAZ,cAAA,CAEA,GAAG,IAAG;EACLC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAW,eAAA,OAAAA,eAAA,CACVhB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAO,eAAA,CACAhB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAO,eAAA;CAEJ,EAAAb,cAAA,CAEA,KAAK,IAAG;EACPC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAY,eAAA,OAAAA,eAAA,CACVjB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAQ,eAAA,CACAjB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAQ,eAAA;CAEJ,EAAAd,cAAA,CAEA,MAAM,IAAG;EACRC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAa,eAAA,OAAAA,eAAA,CACVlB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAS,eAAA,CACAlB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAS,eAAA;CAEJ,EAAAf,cAAA,CAEA,KAAK,IAAG;EACPC,IAAI,EAAEH,2BAA2B;EACjCI,aAAa,GAAAc,eAAA,OAAAA,eAAA,CACVnB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAU,eAAA,CACAnB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAU,eAAA;CAEJ,EAAAhB,cAAA,CAEA,KAAK,IAAG;EACPC,IAAI,EAAEH,2BAA2B;EACjCI,aAAa,GAAAe,eAAA,OAAAA,eAAA,CACVpB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAW,eAAA,CACApB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAW,eAAA;CAEJ,EAAAjB,cAAA,CAEA,EAAE,IAAG;EACJC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAgB,gBAAA,OAAAA,gBAAA,CACVrB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAY,gBAAA,CACArB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAY,gBAAA;CAEJ,EAAAlB,cAAA,CAEA,KAAK,IAAG;EACPC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAiB,gBAAA,OAAAA,gBAAA,CACVtB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAa,gBAAA,CACAtB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAa,gBAAA;CAEJ,EAAAnB,cAAA,CAEA,KAAK,IAAG;EACPC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAkB,gBAAA,OAAAA,gBAAA,CACVvB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAc,gBAAA,CACAvB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAc,gBAAA;CAEJ,EAAApB,cAAA,CAEA,IAAI,IAAG;EACNC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAmB,gBAAA,OAAAA,gBAAA,CACVxB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAe,gBAAA,CACAxB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAe,gBAAA;CAEJ,EAAArB,cAAA,CAEA,KAAK,IAAG;EACPC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAoB,gBAAA,OAAAA,gBAAA,CACVzB,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAgB,gBAAA,CACAzB,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAgB,gBAAA;CAEJ,EAAAtB,cAAA,CAEA,OAAO,IAAG;EACTC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAqB,gBAAA,OAAAA,gBAAA,CACV1B,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAiB,gBAAA,CACA1B,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAiB,gBAAA;CAEJ,EAAAvB,cAAA,CACA,GAAG,IAAG;EACLC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAsB,gBAAA,OAAAA,gBAAA,CACV3B,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAkB,gBAAA,CACA3B,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAkB,gBAAA;CAEJ,EAAAxB,cAAA,CAEA,GAAG,IAAG;EACLC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAuB,gBAAA,OAAAA,gBAAA,CACV5B,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAmB,gBAAA,CACA5B,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAmB,gBAAA;CAEJ,EAAAzB,cAAA,CACA,IAAI,IAAG;EACNC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAwB,gBAAA,OAAAA,gBAAA,CACV7B,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAoB,gBAAA,CACA7B,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAoB,gBAAA;CAEJ,EAAA1B,cAAA,CAEA,GAAG,IAAG;EACLC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAAyB,gBAAA,OAAAA,gBAAA,CACV9B,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAqB,gBAAA,CACA9B,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAqB,gBAAA;CAEJ,EAAA3B,cAAA,CACA,KAAK,IAAG;EACPC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAA0B,gBAAA,OAAAA,gBAAA,CACV/B,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAsB,gBAAA,CACA/B,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAsB,gBAAA;CAEJ,EAAA5B,cAAA,CACA,KAAK,IAAG;EACPC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAA2B,gBAAA,OAAAA,gBAAA,CACVhC,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAuB,gBAAA,CACAhC,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAuB,gBAAA;CAEJ,EAAA7B,cAAA,CACA,IAAI,IAAG;EACNC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAA4B,gBAAA,OAAAA,gBAAA,CACVjC,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAwB,gBAAA,CACAjC,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAwB,gBAAA;CAEJ,EAAA9B,cAAA,CACA,GAAG,IAAG;EACLC,IAAI,EAAE,4CAA4C;EAClDC,aAAa,GAAA6B,gBAAA,OAAAA,gBAAA,CACVlC,sBAAsB,CAACO,IAAI,IAAG;IAC7BC,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAyB,gBAAA,CACAlC,sBAAsB,CAACU,IAAI,IAAG;IAC7BF,OAAO,EAAE,4CAA4C;IACrDC,aAAa,EAAE;GAChB,EAAAyB,gBAAA;CAEJ,EAAA/B,cAAA,CACF;AAED,IAAagC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIC,OAA+B,EAAEC,OAAe;EACvF,IAAI,EAAEA,OAAO,IAAInC,aAAa,CAAC,EAAE,MAAM,IAAItB,KAAK,6CAA2CyD,OAAS,CAAC;EACrG,OAAOnC,aAAa,CAACmC,OAAO,CAAC,CAAChC,aAAa,CAAC+B,OAAO,CAAC,CAAC5B,OAAO;AAC9D,CAAC;AAED,IAAa8B,+BAA+B,GAAG,SAAlCA,+BAA+BA,CAAIF,OAA+B,EAAEC,OAAe;EAC9F,IAAI,EAAEA,OAAO,IAAInC,aAAa,CAAC,EAAE,MAAM,IAAItB,KAAK,6CAA2CyD,OAAS,CAAC;EACrG,OAAOnC,aAAa,CAACmC,OAAO,CAAC,CAAChC,aAAa,CAAC+B,OAAO,CAAC,CAAC3B,aAAa;AACpE,CAAC;AAED,IAAa8B,YAAY,GAAG,SAAfA,YAAYA,CAAIF,OAAe;EAC1C,IAAI,EAAEA,OAAO,IAAInC,aAAa,CAAC,EAAE,MAAM,IAAItB,KAAK,6CAA2CyD,OAAS,CAAC;EAErG,IAAInC,aAAa,CAACmC,OAAO,CAAC,CAACjC,IAAI,IAAIH,2BAA2B,EAAE,MAAM,IAAIrB,KAAK,YAAUyD,OAAO,wBAAqB,CAAC;EAEtH,OAAOnC,aAAa,CAACmC,OAAO,CAAC,CAACjC,IAAI;AACpC,CAAC;AAED,AAAO,IAAMoC,gBAAgB,gBAAGC,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC;AAC1D,AAAO,IAAMC,WAAW,GAAG,4CAA4C;AACvE,AAAO,IAAMC,aAAa,GAAG,4CAA4C;AACzE,AAIO,IAAMC,mBAAmB,GAAG,4CAA4C;AAC/E,IAAaC,mBAAmB,GAAG,4CAA4C;;SCtY/DC,kBAAkBA,CAAC1D,QAAkB;EACnD,OAAOA,QAAQ,CAAC2D,QAAQ,GAAGL,WAAW,GAAGtD,QAAQ,CAACG,OAAO,CAACe,OAAO;AACnE;;SCUgB0C,aAAaA,CAACC,GAAY;EACxC,OAAOC,KAAK,CAACD,GAAG,CAACE,QAAQ,CAAC,KAAM,CAAC,CAACC,QAAQ,CAAC;AAC7C;;ACkCA,IAAMC,iCAAiC,gBAAG,IAAIC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;AAQ9D;AACA;AACA,IAAaC,YAAY;EAIvB,SAAAA,aAAmBC,KAAiD,EAASC,OAAoB;IAA9E,UAAK,GAALD,KAAK;IAAqD,YAAO,GAAPC,OAAO;IAH3E,cAAS,GAAqB5D,gBAAgB,CAAC0D,YAAY;IAIlE,IAAI,CAAC,CAACE,OAAO,CAACR,GAAG,IAAI,CAAC,CAACQ,OAAO,CAACC,OAAO,EAAE,MAAM,IAAIhF,KAAK,CAAC,+BAA+B,CAAC;IAExF,IAAI,IAAI,CAACiF,iBAAiB,IAAI,IAAI,CAACC,mBAAmB,IAAI,IAAI,CAACH,OAAO,CAACI,gBAAgB,EAAE;MACvF,IAAI,CAACC,WAAW,GAAG,KAAK;KACzB,MAAM;MACL,IAAI,CAACA,WAAW,GAAG,IAAI;;;EAE1B,IAAAhG,MAAA,GAAAyF,YAAA,CAAAxF,SAAA;EAAAD,MAAA,CAwFDkB,MAAM,GAAN,SAAAA,MAAMA,CAAC+E,OAAqB,EAAEC,OAAoB;;;IAEhD,IAAI,IAAI,CAACL,iBAAiB,EAAE;;MAE1BI,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACgC,QAAQ,EAAE,CACvC6F,mBAAmB,EACnB,IAAI,CAACW,KAAK,CAACS,eAAe,CAAC,IAAI,CAACR,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,CAC/E,CAAC;KACH,MAAM,IAAI,IAAI,CAACgF,mBAAmB,EAAE;;MAEnCG,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACqB,qBAAqB,EAAE,CACnD,IAAI,CAACmH,KAAK,CAACW,WAAW,CAAC/E,QAAkB,CAACkB,OAAO,EAClDuC,mBAAmB,EACnB,IAAI,CAACW,KAAK,CAACS,eAAe,CAAC,IAAI,CAACR,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,CAC/E,CAAC;MACFmF,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACiC,WAAW,EAAE,CAAC4F,mBAAmB,EAAE,CAAC,CAAC,CAAC;;;IAGvE,IAAI,CAACY,OAAO,CAACW,SAAS,IAAAC,qBAAA,GAAG,IAAI,CAACZ,OAAO,CAACW,SAAS,YAAAC,qBAAA,GAAIzB,mBAAmB;;;;;IAMtE,IAAM0B,8BAA8B,GAClC,IAAI,CAACd,KAAK,CAACe,SAAS,KAAKC,SAAS,CAACC,WAAW,IAAI,IAAI,CAACjB,KAAK,CAACkB,MAAM,CAACC,MAAM,GAAG,CAAC;IAChF,IAAMC,iBAAiB,GACrBN,8BAA8B,IAAI,IAAI,CAACO,wBAAwB,IAAIC,YAAY,CAAC,IAAI,CAACrB,OAAO,CAAC;IAE/F,SAAAsB,SAAA,GAAAC,+BAAA,CAAmB,IAAI,CAACxB,KAAK,CAACyB,KAAK,GAAAC,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAA1BC,IAAI,GAAAF,KAAA,CAAAG,KAAA;MACb,QAAQD,IAAI,CAACE,KAAK,CAACC,QAAQ;QACzB,KAAKC,QAAQ,CAACC,EAAE;UACdC,SAAS,CAAC3B,OAAO,EAAEqB,IAAI,EAAE,IAAI,CAAC5B,KAAK,CAACe,SAAS,EAAE,IAAI,CAACd,OAAO,EAAE,IAAI,CAACK,WAAW,EAAEc,iBAAiB,CAAC;UACjG;QACF,KAAKY,QAAQ,CAACG,EAAE;UACdC,SAAS,CAAC7B,OAAO,EAAEqB,IAAI,EAAE,IAAI,CAAC5B,KAAK,CAACe,SAAS,EAAE,IAAI,CAACd,OAAO,EAAE,IAAI,CAACK,WAAW,EAAEc,iBAAiB,CAAC;UACjG;QACF,KAAKY,QAAQ,CAACK,EAAE;UACdC,SAAS,CAAC/B,OAAO,EAAEqB,IAAI,EAAE,IAAI,CAAC5B,KAAK,CAACe,SAAS,EAAE,IAAI,CAACd,OAAO,EAAE,IAAI,CAACK,WAAW,EAAEc,iBAAiB,CAAC;UACjG;QACF,KAAKY,QAAQ,CAACO,KAAK;UACjBC,YAAY,CAACjC,OAAO,EAAEqB,IAAI,EAAE,IAAI,CAAC5B,KAAK,CAACe,SAAS,EAAE,IAAI,CAACd,OAAO,EAAE,IAAI,CAACK,WAAW,EAAEc,iBAAiB,CAAC;UACpG;QACF;UACE,MAAM,IAAIlG,KAAK,CAAC,4BAA4B,CAAC;;;IAInD,IAAIuH,gBAAgB,GAAc1D,SAAS,CAACC,IAAI,CAC9C,IAAI,CAACgB,KAAK,CAACyC,gBAAgB,CAAC,IAAI,CAACxC,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,CAChF;;IAED,IAAIgG,iBAAiB,EAAE;MACrB,IAAMsB,KAAK,GAAG,IAAI,CAAC1C,KAAK,CAACyB,KAAK,CAAC,CAAC,CAAC,CAACK,KAAK,CAACY,KAAK;MAC7C,IAAMC,yBAAyB,GAAGrD,kBAAkB,CAClD3D,eAAe,CAAC,IAAI,CAACqE,KAAK,CAAC4C,YAAY,CAAChH,QAAQ,EAAE8G,KAAK,CAACA,KAAK,CAACvB,MAAM,GAAG,CAAC,CAAC,CAAC,CAC3E;;;MAID,IAAI,CAAC,CAAC,IAAI,CAAClB,OAAO,CAACR,GAAG,EAAE;QACtB,IAAMoD,OAAO,GAAGrD,aAAa,CAAC,IAAI,CAACS,OAAO,CAACR,GAAG,CAACA,GAAG,CAAC;QACnDc,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACoC,WAAW,EAAE,CAAC+I,yBAAyB,EAAE,IAAI,CAAC1C,OAAO,CAACR,GAAG,CAACmB,SAAS,EAAEiC,OAAO,CAAC,CAAC;;;QAI7G,IAAI,IAAI,CAAC7C,KAAK,CAACe,SAAS,KAAKC,SAAS,CAAC8B,YAAY,EAAE;UACnDL,gBAAgB,GAAGA,gBAAgB,CAACM,GAAG,CAACN,gBAAgB,CAACO,GAAG,CAACH,OAAO,CAAC,CAACI,GAAG,CAAC,KAAK,CAAC,CAAC;;;;;MAMrF,IAAI,CAAC,CAAC,IAAI,CAAChD,OAAO,CAACC,OAAO,EAAE;QAC1B,IAAMgD,SAAS,GAAG,IAAI,CAACjD,OAAO,CAACC,OAAO,CAACiD,MAAM;QAC7C,IAAIV,gBAAgB,CAACW,EAAE,CAACF,SAAS,CAAC,EAAE,MAAM,IAAIhI,KAAK,CAAC,+CAA+C,CAAC;QAEpGqF,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACmC,QAAQ,EAAE,CAACgJ,yBAAyB,EAAE,IAAI,CAAC1C,OAAO,CAACC,OAAO,CAACU,SAAS,EAAEsC,SAAS,CAAC,CAAC;;;QAIhH,IAAI,IAAI,CAAClD,KAAK,CAACe,SAAS,KAAKC,SAAS,CAAC8B,YAAY,EAAE;UACnDL,gBAAgB,GAAGA,gBAAgB,CAACM,GAAG,CAACG,SAAS,CAAC;;;;;MAMtD,IAAI,IAAI,CAACG,oBAAoB,EAAE;QAC7B9C,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACiC,WAAW,EAAE,CAAC,IAAI,CAACwG,OAAO,CAACW,SAAS,EAAE6B,gBAAgB,CAAC,CAAC;OACxF,MAAM,IAAI,IAAI,CAACa,kBAAkB,EAAE;QAClC/C,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACgC,QAAQ,EAAE,CAAC,IAAI,CAACyG,OAAO,CAACW,SAAS,EAAE9B,gBAAgB,CAAC,CAAC;OACrF,MAAM;QACLyB,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACkC,KAAK,EAAE,CACpC4F,kBAAkB,CAAC,IAAI,CAACU,KAAK,CAAC4C,YAAY,CAAChH,QAAQ,CAAC,EACpD,IAAI,CAACqE,OAAO,CAACW,SAAS,EACtB6B,gBAAgB,CACjB,CAAC;;;;;IAMN,IAAI,IAAI,CAACzC,KAAK,CAACe,SAAS,KAAKC,SAAS,CAAC8B,YAAY,IAAIS,iBAAiB,CAAC,IAAI,CAACvD,KAAK,CAAC,EAAE;MACpF,IAAI,IAAI,CAACG,iBAAiB,EAAE;QAC1BI,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACiC,WAAW,EAAE,CAAC,IAAI,CAACwG,OAAO,CAACW,SAAS,EAAE,CAAC,CAAC,CAAC;OACzE,MAAM,IAAI,IAAI,CAACR,mBAAmB,EAAE;QACnCG,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACgC,QAAQ,EAAE,CAAC,IAAI,CAACyG,OAAO,CAACW,SAAS,EAAE9B,gBAAgB,CAAC,CAAC;OACrF,MAAM,IAAI,IAAI,CAACkB,KAAK,CAACW,WAAW,CAAC/E,QAAQ,CAAC2D,QAAQ,EAAE;;QAEnDgB,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACkC,KAAK,EAAE,CAACwF,WAAW,EAAE,IAAI,CAACe,OAAO,CAACW,SAAS,EAAE,CAAC,CAAC,CAAC;;;IAInF,IAAI,IAAI,CAACX,OAAO,CAACuD,QAAQ,EAAEjD,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACkC,KAAK,EAAE,CAACwF,WAAW,EAAE,IAAI,CAACe,OAAO,CAACW,SAAS,EAAE,CAAC,CAAC,CAAC;GAC3G;EAAA,OAAA6C,YAAA,CAAA1D,YAAA;IAAA2D,GAAA;IAAAC,GAAA,EAzMD,SAAAA;MACE,IAAIC,MAAM,GAAG,IAAI;MACjB,SAAAC,UAAA,GAAArC,+BAAA,CAAmB,IAAI,CAACxB,KAAK,CAACyB,KAAK,GAAAqC,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAlC,IAAA,GAAE;QAAA,IAA1BC,IAAI,GAAAkC,MAAA,CAAAjC,KAAA;QACb+B,MAAM,GAAGA,MAAM,IAAIhC,IAAI,CAACE,KAAK,CAACC,QAAQ,IAAIC,QAAQ,CAACK,EAAE;;MAEvD,OAAOuB,MAAM;;;;;;;;;;IASfF,GAAA;IAAAC,GAAA,EACA,SAAAA;MACE,IAAM/B,IAAI,GAAG,IAAI,CAAC5B,KAAK,CAACyB,KAAK,CAAC,CAAC,CAAC;MAChC,IAAMK,KAAK,GAAGF,IAAI,CAACE,KAAK;MACxB,IAAMiC,SAAS,GAAGjC,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC;MAEhC,IAAIqB,SAAS,YAAY/H,IAAM,EAAE;;QAE/B,OACE,IAAI,CAACgE,KAAK,CAACW,WAAW,CAAC/E,QAAQ,CAAC2D,QAAQ,IACxC,CAAE,IAAI,CAACS,KAAK,CAACyB,KAAK,CAAC,CAAC,CAAC,CAACK,KAAgD,CAACkC,SAAS,CAACzE,QAAQ;;;MAI7F,OAAO,IAAI,CAACS,KAAK,CAACW,WAAW,CAAC/E,QAAQ,CAAC2D,QAAQ;;;IAChDmE,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,IAAM/B,IAAI,GAAG,IAAI,CAAC5B,KAAK,CAACyB,KAAK,CAAC,CAAC,CAAC;MAChC,IAAMK,KAAK,GAAGF,IAAI,CAACE,KAAK;MACxB,IAAMiC,SAAS,GAAGjC,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC;MAEhC,IAAIqB,SAAS,YAAY/H,IAAM,EAAE;;QAE/B,OACE,CAAC,IAAI,CAACgE,KAAK,CAACW,WAAW,CAAC/E,QAAQ,CAAC2D,QAAQ,IACxC,IAAI,CAACS,KAAK,CAACyB,KAAK,CAAC,CAAC,CAAC,CAACK,KAAgD,CAACkC,SAAS,CAACzE,QAAQ;;;MAI5F,OAAO,KAAK;;;IACbmE,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,IAAM/B,IAAI,GAAG,IAAI,CAAC5B,KAAK,CAACyB,KAAK,CAAC,CAAC,CAAC;MAChC,IAAMwC,SAAS,GAAGrC,IAAI,CAACE,KAAK;MAC5B,IAAMoC,QAAQ,GAAGD,SAAS,CAACvB,KAAK,CAACuB,SAAS,CAACvB,KAAK,CAACvB,MAAM,GAAG,CAAC,CAAC;;MAG5D,IAAI+C,QAAQ,YAAYlI,IAAM,EAAE;;QAE9B,OACE,CAAC,IAAI,CAACgE,KAAK,CAAC4C,YAAY,CAAChH,QAAQ,CAAC2D,QAAQ,IACzC0E,SAAoD,CAACE,UAAU,CAAC5E,QAAQ;;;;MAK7E,OAAO,KAAK;;;IACbmE,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,IAAM/B,IAAI,GAAG,IAAI,CAAC5B,KAAK,CAACyB,KAAK,CAAC,CAAC,CAAC;MAChC,IAAMwC,SAAS,GAAGrC,IAAI,CAACE,KAAK;MAC5B,IAAMoC,QAAQ,GAAGD,SAAS,CAACvB,KAAK,CAACuB,SAAS,CAACvB,KAAK,CAACvB,MAAM,GAAG,CAAC,CAAC;;MAG5D,IAAI+C,QAAQ,YAAYlI,IAAM,EAAE;;QAE9B,OACE,IAAI,CAACgE,KAAK,CAAC4C,YAAY,CAAChH,QAAQ,CAAC2D,QAAQ,IACzC,CAAE,IAAI,CAACS,KAAK,CAACyB,KAAK,CAAC,CAAC,CAAC,CAACK,KAAgD,CAACqC,UAAU,CAAC5E,QAAQ;;;MAI9F,OAAO,IAAI,CAACS,KAAK,CAAC4C,YAAY,CAAChH,QAAQ,CAAC2D,QAAQ;;;IACjDmE,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAACL,kBAAkB,IAAI,IAAI,CAACD,oBAAoB;;;AAC5D;AAwHH;AACA,SAASnB,SAASA,CAChB3B,OAAqB,EAAA6D,IAAA,EAErBrD,SAAoB,EACpBd,OAAoB,EACpBK,WAAoB,EACpBc,iBAA0B;MAJxBU,KAAK,GAAAsC,IAAA,CAALtC,KAAK;IAAEnB,WAAW,GAAAyD,IAAA,CAAXzD,WAAW;IAAEiC,YAAY,GAAAwB,IAAA,CAAZxB,YAAY;EAMlC,IAAM5C,KAAK,GAAG,IAAIqE,KAAO,CACvBvC,KAAiC,EACjCf,SAAS,IAAIC,SAAS,CAACC,WAAW,GAAGN,WAAW,GAAGiC,YAAY,EAC/D7B,SAAS,CACV;EAED,IAAIA,SAAS,IAAIC,SAAS,CAACC,WAAW,EAAE;IACtCV,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAAC4B,gBAAgB,EAAE;;IAE/CgI,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACW,SAAS,EAC3DZ,KAAK,CAACS,eAAe,CAACR,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE;;IAEpEgG,iBAAiB,GAAG,CAAC,GAAGpB,KAAK,CAACyC,gBAAgB,CAACxC,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,EAC7F0G,KAAK,CAACwC,IAAI,CAAC7I,GAAG,CAAC,UAAC8I,KAAK;MAAA,OAAKA,KAAK,CAACxI,OAAO,CAACe,OAAO;MAAC,EAChDwD,WAAW,CACZ,CAAC;GACH,MAAM,IAAIS,SAAS,IAAIC,SAAS,CAAC8B,YAAY,EAAE;IAC9CvC,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAAC6B,iBAAiB,EAAE,CAChD+H,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACW,SAAS,EAC3DZ,KAAK,CAACyC,gBAAgB,CAACxC,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,EACrE4E,KAAK,CAACS,eAAe,CAACR,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,EACpE0G,KAAK,CAACwC,IAAI,CAAC7I,GAAG,CAAC,UAAC8I,KAAK;MAAA,OAAKA,KAAK,CAACxI,OAAO,CAACe,OAAO;MAAC,EAChDwD,WAAW,CACZ,CAAC;;AAEN;AAEA;AACA,SAAS8B,SAASA,CAChB7B,OAAqB,EAAAiE,KAAA,EAErBzD,SAAoB,EACpBd,OAAoB,EACpBK,WAAoB,EACpBc,iBAA0B;MAJxBU,KAAK,GAAA0C,KAAA,CAAL1C,KAAK;IAAEnB,WAAW,GAAA6D,KAAA,CAAX7D,WAAW;IAAEiC,YAAY,GAAA4B,KAAA,CAAZ5B,YAAY;EAMlC,IAAM5C,KAAK,GAAGyE,OAAO,CAACC,oBAAoB,CAAC;IACzC5C,KAAK,EAAEA,KAAiC;IACxCnB,WAAW,EAAXA,WAAW;IACXiC,YAAY,EAAZA,YAAY;IACZ7B,SAAS,EAATA;GACD,CAAC;EAEF,IAAMuD,IAAI,GAAGK,iBAAiB,CAAC7C,KAAiC,EAAE9B,KAAK,CAACe,SAAS,KAAKC,SAAS,CAAC8B,YAAY,CAAC;EAC7G,IAAI/B,SAAS,IAAIC,SAAS,CAACC,WAAW,EAAE;IACtCV,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACuB,gBAAgB,EAAE,CAC/CqI,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACW,SAAS,EAC3DZ,KAAK,CAACS,eAAe,CAACR,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,EACpEgG,iBAAiB,GAAG,CAAC,GAAGpB,KAAK,CAACyC,gBAAgB,CAACxC,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,EAC7FkJ,IAAI,EACJhE,WAAW,CACZ,CAAC;GACH,MAAM,IAAIS,SAAS,IAAIC,SAAS,CAAC8B,YAAY,EAAE;IAC9CvC,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAAC0B,iBAAiB,EAAE,CAChDkI,iBAAiB,GAAG/B,mBAAmB,GAAGY,OAAO,CAACW,SAAS,EAC3DZ,KAAK,CAACyC,gBAAgB,CAACxC,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,EACrE4E,KAAK,CAACS,eAAe,CAACR,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,EACpEkJ,IAAI,EACJhE,WAAW,CACZ,CAAC;;AAEN;AAEA,SAASgC,SAASA,CAChB/B,OAAqB,EAAAqE,KAAA,EAErB7D,SAAoB,EACpBd,OAAoB,EACpBK,WAAoB,EACpBc,iBAA0B;;MAJxBT,WAAW,GAAAiE,KAAA,CAAXjE,WAAW;IAAEiC,YAAY,GAAAgC,KAAA,CAAZhC,YAAY;IAAEd,KAAK,GAAA8C,KAAA,CAAL9C,KAAK;;EAOlC,IAAMY,KAAK,GAAGZ,KAAK,CAACY,KAAK,CAACjH,GAAG,CAAC,UAACoJ,CAAC;IAAA,OAAKA,CAAC;IAAa;EACnD,IAAMC,OAAO,GAAG,IAAIC,KAAO,CAACrC,KAAK,EAAE/B,WAAW,CAAC/E,QAAQ,EAAEgH,YAAY,CAAChH,QAAQ,CAAC;EAC/E,IAAMoE,KAAK,GAAGgF,OAAO,CAACN,oBAAoB,CAAC;IACzC5C,KAAK,EAAEgD,OAAO;IACdnE,WAAW,EAAXA,WAAW;IACXiC,YAAY,EAAZA,YAAY;IACZ7B,SAAS,EAATA;GACD,CAAC;EAEF,IAAMkE,uBAAuB,GAC3B7D,iBAAiB,IAAIL,SAAS,IAAIC,SAAS,CAACC,WAAW,GAAGiE,SAAS,GAAGjF,OAAO,CAACS,iBAAiB;EAEjG,IAAMyE,SAAS,GAAG,IAAIC,SAAS,EAAE;EACjCD,SAAS,CAACE,QAAQ,CAACrF,KAAK,EAAEiF,uBAAuB,CAAC;EAClDE,SAAS,CAACG,SAAS,CAACtF,KAAK,CAAC8B,KAAK,CAACkC,SAAS,EAAE1D,WAAW,CAAC;EACvD6E,SAAS,CAACI,OAAO,CACfvF,KAAK,CAAC8B,KAAK,CAACqC,UAAU,EACtB/C,iBAAiB,GAAG/B,mBAAmB,IAAAmG,kBAAA,GAAGvF,OAAO,CAACW,SAAS,YAAA4E,kBAAA,GAAIpG,mBAAmB,CACnF;EACDmB,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAAC8B,OAAO,EAAE,CAAC6L,SAAS,CAACM,QAAQ,EAAE,CAAC,CAAC;AACjE;AAEA;AACA,SAASjD,YAAYA,CACnBjC,OAAqB,EACrBqB,IAA2B,EAC3Bb,SAAoB,EACpBd,OAAoB,EACpBK,WAAoB,EACpBc,iBAA0B;;EAE1B,IAAMU,KAAK,GAAGF,IAAI,CAACE,KAAoC;EACvD,IAAMnB,WAAW,GAAGiB,IAAI,CAACjB,WAAW;EACpC,IAAMiC,YAAY,GAAGhB,IAAI,CAACgB,YAAY;EACtC,IAAM8C,cAAc,GAAGtE,iBAAiB,GAAG/B,mBAAmB,IAAAsG,mBAAA,GAAG1F,OAAO,CAACW,SAAS,YAAA+E,mBAAA,GAAIvG,mBAAmB;;EAGzG,IAAI0C,KAAK,CAACY,KAAK,CAACvB,MAAM,KAAK,CAAC,EAAE;IAC5B,IAAIW,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,YAAY1G,IAAM,EAAE;MACpC,OAAOsG,SAAS,CAAC/B,OAAO,EAAEqB,IAAI,EAAEb,SAAS,EAAEd,OAAO,EAAEK,WAAW,EAAEc,iBAAiB,CAAC;KACpF,MAAM,IAAIU,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,YAAYkD,MAAM,EAAE;MAC3C,OAAOxD,SAAS,CAAC7B,OAAO,EAAEqB,IAAI,EAAEb,SAAS,EAAEd,OAAO,EAAEK,WAAW,EAAEc,iBAAiB,CAAC;KACpF,MAAM,IAAIU,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,YAAYmD,IAAI,EAAE;MACzC,OAAO3D,SAAS,CAAC3B,OAAO,EAAEqB,IAAI,EAAEb,SAAS,EAAEd,OAAO,EAAEK,WAAW,EAAEc,iBAAiB,CAAC;KACpF,MAAM;MACL,MAAM,IAAIlG,KAAK,CAAC,oBAAoB,CAAC;;;EAIzC,IAAM8E,KAAK,GAAG8F,eAAe,CAACpB,oBAAoB,CAAC;IACjD5C,KAAK,EAAEA,KAAoC;IAC3CnB,WAAW,EAAXA,WAAW;IACXiC,YAAY,EAAZA,YAAY;IACZ7B,SAAS,EAATA;GACD,CAAC;EAEF,IAAMgF,QAAQ,GAAG/F,KAAK,CAACS,eAAe,CAACR,OAAO,CAACS,iBAAiB,EAAEC,WAAW,CAAC,CAACf,QAAQ,CAACxE,QAAQ,EAAE;EAClG,IAAM4K,SAAS,GAAG5E,iBAAiB,GAC/B,CAAC,GACDpB,KAAK,CAACyC,gBAAgB,CAACxC,OAAO,CAACS,iBAAiB,EAAEkC,YAAY,CAAC,CAAChD,QAAQ,CAACxE,QAAQ,EAAE;;;EAIvF,IAAM6K,QAAQ,GAAGC,6BAA6B,CAACpE,KAAoC,CAAC;EACpF,IAAMqE,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,CAAS;IACrC,OAAOA,CAAC,KAAKH,QAAQ,CAAC9E,MAAM,GAAG,CAAC;GACjC;EAED,IAAIkF,UAAU,GAAGvE,KAAK,CAACkC,SAAS;EAEhC,KAAK,IAAIoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAAC9E,MAAM,EAAEiF,CAAC,EAAE,EAAE;IACxC,IAAME,OAAO,GAAGL,QAAQ,CAACG,CAAC,CAAC;IAC3B,IAAMG,SAAS,GAAGD,OAAO,CAAC,CAAC,CAAC;IAC5B,IAAME,WAAW,GAAGC,gBAAgB,CAACH,OAAO,EAAED,UAAU,CAAC;IACzD,IAAMK,QAAQ,GAAG,IAAIC,UAAU,CAAC,IAAIC,aAAa,IAAAzL,MAAA,CAAKmL,OAAO,GAAGD,UAAU,EAAEG,WAAW,CAAC,CAAC;IAEzF,IAAIK,cAAc;IAClB,IAAIC,aAAa;IAEjB,IAAIX,oBAAoB,CAACC,CAAC,CAAC,EAAE;MAC3BS,cAAc,GAAGL,WAAW;MAC5BM,aAAa,GAAGpB,cAAc;KAC/B,MAAM;MACL,IAAMqB,QAAQ,GAAGd,QAAQ,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACnCS,cAAc,GAAGlL,eAAe,CAAC6K,WAAW,EAAEO,QAAQ,CAAC;MAEvD,IAAMC,qBAAqB,GAAGD,QAAQ,YAAYlB,IAAI,IAAIW,WAAW,CAACtK,MAAM,CAAC2K,cAAc,CAAC;MAC5FC,aAAa,GAAGE,qBAAqB,GAAID,QAAiB,CAACE,cAAc,CAACnK,OAAO,GAAGuC,mBAAmB;;IAGzG,IAAIkH,SAAS,YAAYvK,IAAM,EAAE;MAC/B,IAAMmJ,SAAS,GAAG,IAAIC,SAAS,EAAE;MACjC,IAAM8B,UAAU,GAAG,IAAInC,KAAO,CAACuB,OAAmB,EAAEI,QAAQ,CAACS,KAAK,EAAET,QAAQ,CAACU,MAAM,CAAC;MAEpFjC,SAAS,CAACG,SAAS,CAACe,UAAU,EAAE/F,WAAW,IAAI8F,CAAC,KAAK,CAAC,EAAGA,CAAC,IAAI,CAAC,GAAGL,QAAQ,GAAGjH,gBAA8B,CAAC;MAC5GqG,SAAS,CAACkC,SAAS,CAACC,OAAO,CAACC,aAAa,EAAE,CACzC;QACEC,UAAU,EAAEnB,UAAU,CAAC9G,QAAQ,GAAGL,WAAW,GAAGmH,UAAU,CAACvJ,OAAO;QAClEwH,IAAI,EAAEmD,mBAAmB,CAACP,UAAU,CAAC;QACrCnB,QAAQ,EAAE,CAAC;QACX2B,gBAAgB,EAAE,CAACvB,oBAAoB,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGJ;OAClD,CACF,CAAC;MACFb,SAAS,CAACI,OAAO,CAACiB,WAAW,EAAEM,aAAa,CAAC;MAE7CvG,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAAC8B,OAAO,EAAE,CAAC6L,SAAS,CAACM,QAAQ,EAAE,CAAC,CAAC;KAChE,MAAM,IAAIc,SAAS,YAAYX,MAAM,EAAE;MACtCrF,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACuB,gBAAgB,EAAE,CAC/C+N,aAAa,EACbV,CAAC,IAAI,CAAC,GAAGL,QAAQ,GAAGjH,gBAAgB,EACpC,CAACqH,oBAAoB,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGJ,SAAS,EACxC2B,sBAAsB,CAACjB,QAAQ,CAAC,EAChCpG,WAAW,IAAI8F,CAAC,KAAK,CAAC,CACvB,CAAC;KACH,MAAM,IAAIG,SAAS,YAAYV,IAAI,EAAE;MACpCtF,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAAC4B,gBAAgB,EAAE,CAC/C0N,aAAa,EACbV,CAAC,KAAK,CAAC,GAAGL,QAAQ,GAAGjH,gBAAgB,EACrC,CAACqH,oBAAoB,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGJ,SAAS,EACxCU,QAAQ,CAACpC,IAAI,CAAC7I,GAAG,CAAC,UAAC8I,KAAK;QAAA,OAAKA,KAAK,CAACxI,OAAO,CAACe,OAAO;QAAC,EACnDwD,WAAW,IAAI8F,CAAC,KAAK,CAAC,CACvB,CAAC;KACH,MAAM;MACL,MAAM,IAAIlL,KAAK,CAAC,sBAAsB,CAAC;;;IAIzC,IAAI,CAACiL,oBAAoB,CAACC,CAAC,CAAC,EAAE;MAC5B,IAAII,WAAW,CAACjH,QAAQ,IAAI,CAACsH,cAAc,CAACtH,QAAQ,EAAE;QACpDgB,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACgC,QAAQ,EAAE,CAAC6F,mBAAmB,EAAEP,gBAAgB,CAAC,CAAC;OAClF,MAAM,IAAI,CAAC0H,WAAW,CAACjH,QAAQ,IAAIsH,cAAc,CAACtH,QAAQ,EAAE;QAC3DgB,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACiC,WAAW,EAAE,CAAC4F,mBAAmB,EAAE,CAAC,CAAC,CAAC;;;IAIzEgH,UAAU,GAAGQ,cAAc;;AAE/B;AAEA;AACA,SAAStD,iBAAiBA,CAACvD,KAAiD;EAC1E,OAAOA,KAAK,CAAC4H,WAAW,CAACC,WAAW,CAAChI,iCAAiC,CAAC;AACzE;AAEA,SAASyB,YAAYA,CAACwG,WAAwB;EAC5C,OAAO,CAAC,CAACA,WAAW,CAACrI,GAAG,IAAI,CAAC,CAACqI,WAAW,CAAC5H,OAAO;AACnD;;AC9dA,IAAM6H,gBAAgB,GAAG,EAAE;AAC3B,IAAMC,yBAAyB,GAAG,EAAE;AAEpC,SAAgBC,YAAYA,CAAC1H,OAAqB,EAAE2H,OAAsB;EACxE,IAAIC,SAAS,GAAGD,OAAO,CAACC,SAAS;EAEjC,IAAMhH,MAAM,GAAGiH,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACJ,OAAO,CAACC,SAAS,CAAC,CAAChH,MAAM;;EAE9D,IAAIA,MAAM,KAAK4G,gBAAgB,IAAI5G,MAAM,KAAK6G,yBAAyB,EAAE;;IAEvEG,SAAS,GAAGC,MAAM,CAACC,KAAK,CAACE,aAAa,CAACH,MAAM,CAACC,KAAK,CAACG,cAAc,CAACN,OAAO,CAACC,SAAS,CAAC,CAAC;;EAGxF5H,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACmB,cAAc,EAAE,CAACuP,OAAO,EAAEC,SAAS,CAAC,CAAC;AACtE;AAEA,SAAgBM,sBAAsBA,CAAClI,OAAqB,EAAEmI,MAAwB,EAAEC,OAAkB;EACxG,IAAMC,QAAQ,GAAGC,0BAA0B,CAACC,SAAS,CAACC,kBAAkB,CAAC,QAAQ,EAAE,CACjFC,uBAAuB,CAACN,MAAM,CAACO,OAAO,CAAC,EACvCN,OAAO,EACPD,MAAM,CAACQ,QAAQ,EACfR,MAAM,CAACS,CAAC,EACRT,MAAM,CAACU,CAAC,EACRV,MAAM,CAACW,CAAC,CACT,CAAC;EAEF9I,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACuC,0BAA0B,EAAE,CAAC6O,QAAQ,CAAC,CAAC;AACxE;AAEA;AACA;AACA;AACA;AACA;AACA,SAAgBU,uBAAuBA,CAAC/I,OAAqB,EAAEN,OAA0B;;EAEvF,IAAI,CAAC,CAACA,OAAO,CAACsJ,mBAAmB,IAAI,CAAC,CAACtJ,OAAO,CAACuJ,aAAa,EAC1D,EAAUvJ,OAAO,CAACsJ,mBAAmB,CAAChF,KAAK,KAAKtE,OAAO,CAACuJ,aAAa,CAACC,OAAO,CAAClF,KAAK,IAAAmF,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnFC,SAAS,gCAATA,SAAS;;EAGX,IAAI,CAAC,CAAC5J,OAAO,CAACuJ,aAAa,EAAE;IAC3BvB,YAAY,CAAC1H,OAAO,EAAEN,OAAO,CAACuJ,aAAa,CAAC;;EAG9C,IAAI,CAAC,CAACvJ,OAAO,CAACsJ,mBAAmB,EAAE;IACjChJ,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACqB,qBAAqB,EAAE,CACpDoH,OAAO,CAACsJ,mBAAmB,CAAChF,KAAK,EACjCtE,OAAO,CAACsJ,mBAAmB,CAAC3I,SAAS,GAAGX,OAAO,CAACsJ,mBAAmB,CAAC3I,SAAS,GAAGvB,mBAAmB,EACnGY,OAAO,CAACsJ,mBAAmB,CAACpG,MAAM,CACnC,CAAC;;AAEN;;ACzCA,SAAS2G,MAAMA,CAAC7J,OAA8B;EAC5C,OAAO8J,MAAM,CAACC,IAAI,CAAC/J,OAAO,CAAC,CAACgK,IAAI,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,KAAK,WAAW;IAAC;AAC5D;AAEA,IAAsBC,UAAU;EAAA,SAAAA;EAAAA,UAAA,CAGhBC,kBAAkB,GAAzB,SAAOA,kBAAkBA,CAC9BC,MAAkD,EAClDpK,OAAoB;;IAGpB,IAAMM,OAAO,GAAG,IAAIpG,YAAY,EAAE;IAElC,IAAM6F,KAAK,GAAiB,IAAID,YAAY,CAACsK,MAAM,EAAEpK,OAAO,CAAC;IAE7D,IAAMqK,aAAa,GAAGtK,KAAK,CAACA,KAAK,CAACW,WAAW,CAAC/E,QAAQ;IACtD,CAAU,EAAE0O,aAAa,CAAC/K,QAAQ,IAAI,CAAC,CAACU,OAAO,CAACsK,gBAAgB,CAAC,GAAAb,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjEC,SAAS,QAA0D,qBAAqB,IAAxFA,SAAS;IAET,IAAI5J,OAAO,CAACsK,gBAAgB,EAAE;MAC5BtC,YAAY,CAAC1H,OAAO,EAAEN,OAAO,CAACsK,gBAAgB,CAAC;;IAGjD,IAAMC,mBAAmB,GAAGF,aAAa,CAAC/K,QAAQ,GAC9CR,SAAS,CAACC,IAAI,CAACgB,KAAK,CAACA,KAAK,CAACS,eAAe,CAACR,OAAO,CAACS,iBAAiB,CAAC,CAACd,QAAQ,CAACxE,QAAQ,EAAE,CAAC,GAC1F2D,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAErBgB,KAAK,CAACxE,MAAM,CAAC+E,OAAO,EAAE;MAAE3F,WAAW,EAAE;KAAO,CAAC;IAC7C,OAAOuP,UAAU,CAACM,UAAU,CAAClK,OAAO,EAAEiK,mBAAmB,EAAE;MACzDtB,QAAQ,EAAEjJ,OAAO,CAACyK,2BAA2B,GAAG3L,SAAS,CAACC,IAAI,CAACiB,OAAO,CAACyK,2BAA2B,CAAC,GAAGxF;KACvG,CAAC;;;;;;;;;;EAGJiF,UAAA,CAQcQ,2BAA2B,GAAlC,SAAOA,2BAA2BA,CACvC1K,OAA6B,EAC7B2K,uBAAgC;IAEhC,IAAMC,MAAM,GAAW5K,OAAO,CAAC6K,cAAc,CAACjP,IAAI;IAClD,IAAMkP,QAAQ,GAAG9K,OAAO,CAAC+K,aAAa,CAACnP,IAAI,CAACI,MAAM;IAClD,IAAMgP,QAAQ,GAAGhL,OAAO,CAAC+K,aAAa,CAACnP,IAAI,CAACM,MAAM;IAClD,IAAM+O,wBAAwB,GAC5BN,uBAAuB,WAAvBA,uBAAuB,GAAIO,sBAAsB,CAACN,MAAM,CAAClM,OAA8B,CAAC,CAACuM,wBAAwB;;;IAKnH,IAAIL,MAAM,CAACO,SAAS,CAAC7L,QAAQ,EAAE;MAC7B,EACGsL,MAAM,CAACO,SAAS,CAACrP,OAAO,CAACG,MAAM,CAAC6O,QAAQ,CAAC,IAAIF,MAAM,CAACQ,SAAS,CAACnP,MAAM,CAAC+O,QAAQ,CAAC,IAC5EJ,MAAM,CAACO,SAAS,CAACrP,OAAO,CAACG,MAAM,CAAC+O,QAAQ,CAAC,IAAIJ,MAAM,CAACQ,SAAS,CAACnP,MAAM,CAAC6O,QAAQ,CAAE,IAAArB,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAFpFC,SAAS,QAGP,gBAAgB,IAHlBA,SAAS;KAKV,MAAM;MACL,EAAUkB,QAAQ,KAAKF,MAAM,CAAC5O,MAAM,IAAAyN,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAApCC,SAAS,QAA6B,iBAAiB,IAAvDA,SAAS;MACT,EAAUoB,QAAQ,KAAKJ,MAAM,CAAC1O,MAAM,IAAAuN,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAApCC,SAAS,QAA6B,iBAAiB,IAAvDA,SAAS;;IAGX,CACE5J,OAAO,CAACqL,wBAAwB,CAACC,mBAAmB,CAACC,OAAO,CAAC,IAAI1L,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAA4J,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBADrFC,SAAS,QAEP,uBAAuB,IAFzBA,SAAS;IAIT,EAAU5J,OAAO,CAACqL,wBAAwB,CAACG,SAAS,IAAI,IAAI,IAAA/B,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA5DC,SAAS,QAAqD,qBAAqB,IAAnFA,SAAS;IACT,EACE5J,OAAO,CAACqL,wBAAwB,CAACI,cAAc,CAAC9K,SAAS,KAAKsK,wBAAwB,IAAAxB,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBADxFC,SAAS,QAEP,gCAAgC,IAFlCA,SAAS;IAIT,CAAUC,MAAM,CAAC7J,OAAO,CAAC0L,qBAAqB,CAAC,GAAAjC,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA/CC,SAAS,QAAwC,eAAe,IAAhEA,SAAS;IACT,CAAU5J,OAAO,CAAC0L,qBAAqB,CAACC,OAAO,GAAAlC,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA/CC,SAAS,QAAwC,kBAAkB,IAAnEA,SAAS;IAET,IAAMtJ,OAAO,GAAG,IAAIpG,YAAY,EAAE;;IAGlC,IAAI8F,OAAO,CAAC0L,qBAAqB,CAACE,UAAU,EAAE;MAC5C,IAAMC,OAAO,GAAY9P,IAAM,CAAC+P,UAAU,CACxClB,MAAM,CAACO,SAAS,EAChBP,MAAM,CAACQ,SAAS,EAChBR,MAAM,CAACpL,GAAG,EACVoL,MAAM,CAACmB,WAAW,EAClBnB,MAAM,CAACoB,KAAK,CACb;MACD1L,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACsC,kBAAkB,EAAE,CAACgS,OAAO,EAAEjB,MAAM,CAACqB,YAAY,CAAC9Q,QAAQ,EAAE,CAAC,CAAC;;MAE7F,OAAO6E,OAAO,CAAC0L,qBAAqB,CAACE,UAAU;;;IAIjD,IAAI5L,OAAO,CAACqL,wBAAwB,CAAC5C,MAAM,EAAE;;MAE3C,IAAMyD,sBAAsB,GAAG1N,wBAAwB,CACrDnC,sBAAsB,CAACU,IAAI,EAC3BiD,OAAO,CAAC+K,aAAa,CAACnP,IAAI,CAAC8C,OAA8B,CAC1D;MACD,EAAUwN,sBAAsB,IAAIlM,OAAO,CAACqL,wBAAwB,CAAC5C,MAAM,CAACO,OAAO,IAAAS,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnFC,SAAS,QAA4E,iBAAiB,IAAtGA,SAAS;;MAETpB,sBAAsB,CAAClI,OAAO,EAAEN,OAAO,CAACqL,wBAAwB,CAAC5C,MAAM,EAAEzI,OAAO,CAACqL,wBAAwB,CAAC3C,OAAO,CAAC;;MAElH,OAAO1I,OAAO,CAACqL,wBAAwB,CAAC5C,MAAM;;;IAIhD,IAAM0D,cAAc,GAAqBC,0BAAiB,CAACC,oBAAoB,CAC7ErM,OAAO,CAAC+K,aAAa,EACrB/K,OAAO,CAACqL,wBAAwB,CACjC;IACD,IAAMiB,OAAO,GAAaC,SAAS,CAACC,eAAe,CAACL,cAAc,CAACxD,QAAQ,CAAC;IAE5E,SAAArH,SAAA,GAAAC,+BAAA,CAAqB+K,OAAO,GAAA7K,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAAnB+K,MAAM,GAAAhL,KAAA,CAAAG,KAAA;;MAEf,IAAM8K,SAAQ,GAAGD,MAAM,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MACpC,EACED,SAAQ,IAAIN,0BAAiB,CAACvD,SAAS,CAAC+D,UAAU,CAAC,SAAS,CAAC,IAC3DF,SAAQ,IAAIN,0BAAiB,CAACvD,SAAS,CAAC+D,UAAU,CAAC,mBAAmB,CAAC,IACvEF,SAAQ,IAAIN,0BAAiB,CAACvD,SAAS,CAAC+D,UAAU,CAAC,MAAM,CAAC,IAAAnD,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAH9DC,SAAS,QAIP,mBAAmB,GAAG8C,SAAQ,IAJhC9C,SAAS;MAMTtJ,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACyC,wBAAwB,EAAE,CAACyS,MAAM,CAAC,CAAC;;;IAIpE,IAAMI,WAAW,GAAGC,iBAAiB,CAACC,iBAAiB,CAAC/M,OAAO,CAAC6K,cAAc,EAAE7K,OAAO,CAAC0L,qBAAqB,CAAC;;IAE9G,IAAMgB,QAAQ,GAAGG,WAAW,CAAClE,QAAQ,CAACgE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAClD,EAAUD,QAAQ,IAAII,iBAAiB,CAACjE,SAAS,CAAC+D,UAAU,CAAC,mBAAmB,CAAC,IAAAnD,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjFC,SAAS,QAA0E,mBAAmB,GAAG8C,QAAQ,IAAjH9C,SAAS;IAETtJ,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAAC0C,wBAAwB,EAAE,CAAC4S,WAAW,CAAClE,QAAQ,CAAC,CAAC;IAEhF,OAAOuB,UAAU,CAACM,UAAU,CAAClK,OAAO,EAAExB,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE;MACvDkK,QAAQ,EAAEnK,SAAS,CAACC,IAAI,CAACiB,OAAO,CAAC0L,qBAAqB,CAACzC,QAAQ;KAChE,CAAC;;;;;;;;EAGJiB,UAAA,CAMeM,UAAU,GAAjB,SAAOA,UAAUA,CACvBlK,OAAqB,EACrBiK,mBAA8B,EAC9ByC;QAAAA;MAAAA,SAA2B,EAAE;;IAE7B,IAAQ7S,QAAQ,GAAamG,OAAO,CAA5BnG,QAAQ;MAAEC,MAAM,GAAKkG,OAAO,CAAlBlG,MAAM;IACxB,IAAM6S,iBAAiB,GAAG,CAAC,CAACD,MAAM,CAAC/D,QAAQ,GAAG,gCAAgC,GAAG,wBAAwB;IACzG,IAAMvO,UAAU,GAAG,CAAC,CAACsS,MAAM,CAAC/D,QAAQ,GAAG,CAAC9O,QAAQ,EAAEC,MAAM,EAAE4S,MAAM,CAAC/D,QAAQ,CAAC,GAAG,CAAC9O,QAAQ,EAAEC,MAAM,CAAC;IAC/F,IAAMuO,QAAQ,GAAGuB,UAAU,CAACrB,SAAS,CAACC,kBAAkB,CAACmE,iBAAiB,EAAEvS,UAAU,CAAC;IACvF,OAAO;MAAEiO,QAAQ,EAARA,QAAQ;MAAE/G,KAAK,EAAE2I,mBAAmB,CAAC2C,WAAW;KAAI;GAC9D;EAAA,OAAAhD,UAAA;AAAA;AAtJaA,oBAAS,gBAAc,IAAIiD,SAAS,CAACC,eAAe,CAAC3R,GAAG,CAAC;;ICpC5D4R,UAAU;EAMrB,SAAAA,WAAYnK,MAAoB,EAAExE,OAAe,EAAEuJ,OAAuB;IALjE,cAAS,GAAqB7L,gBAAgB,CAACiR,UAAU;IAMhE,IAAI,CAACC,WAAW,GAAG1O,YAAY,CAACF,OAAO,CAAC;IACxC,IAAI,CAACwE,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAAC,CAAC+E,OAAO,EAAE;MACb,EACEA,OAAO,CAACuB,OAAO,CAAClF,KAAK,CAACiJ,WAAW,EAAE,KAAK,IAAI,CAACD,WAAW,CAACC,WAAW,EAAE,IAAA9D,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBADxEC,SAAS,8CAE6B,IAAI,CAAC0D,WAAW,IAFtD1D,SAAS;MAIT,EAAU3B,OAAO,CAACuB,OAAO,CAACtG,MAAM,IAAIA,MAAM,IAAAuG,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA1CC,SAAS,mEAATA,SAAS;MACT,IAAI,CAAC4D,WAAW,GAAGvF,OAAO;;;EAE7B,IAAA5N,MAAA,GAAAgT,UAAA,CAAA/S,SAAA;EAAAD,MAAA,CAEDkB,MAAM,GAAN,SAAAA,MAAMA,CAAC+E,OAAqB,EAAEmN,CAAc;IAC1CpE,uBAAuB,CAAC/I,OAAO,EAAE;MAC/BiJ,aAAa,EAAE,IAAI,CAACiE,WAAW;MAC/BlE,mBAAmB,EAAE;QACnBhF,KAAK,EAAE,IAAI,CAACgJ,WAAW;QACvBpK,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC/H,QAAQ;;KAE/B,CAAC;IACFmF,OAAO,CAAC7F,UAAU,CAAClD,WAAW,CAACiC,WAAW,EAAE,CAAC4F,mBAAmB,EAAE,IAAI,CAAC8D,MAAM,CAAC,CAAC;GAChF;EAAA,OAAAmK,UAAA;AAAA;;IClBSK,QAIX;AAJD,WAAYA,QAAQ;EAClBA,8BAAkB;EAClBA,8BAAkB;EAClBA,8BAAkB;AACpB,CAAC,EAJWA,QAAQ,KAARA,QAAQ;AAmEpB,IAAaC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAI9Q,OAAe;EAAA,OAC9CA,OAAO,CAAC0Q,WAAW,EAAE,KAAKtO,WAAW,CAACsO,WAAW,EAAE,IAAI1Q,OAAO,CAAC0Q,WAAW,EAAE,KAAKrO,aAAa,CAACqO,WAAW,EAAE;AAAA;AAE9G;AACA;AACA,IAAaK,kBAAkB;EAAA,SAAAA;;EAC7BA,kBAAA,CACOC,gBAAgB,GAAvB,SAAOA,gBAAgBA,CAACC,KAA0B;IAChD,IAAQjM,KAAK,GAAwBiM,KAAK,CAAlCjM,KAAK;MAAEkM,OAAO,GAAeD,KAAK,CAA3BC,OAAO;MAAEC,QAAQ,GAAKF,KAAK,CAAlBE,QAAQ;IAEhC,IAAI,CAACnM,KAAK,EAAE,MAAM,IAAI5G,KAAK,CAAC,8BAA8B,CAAC;IAC3D,IAAI,CAAC4G,KAAK,CAACX,MAAM,EAAE,MAAM,IAAIjG,KAAK,CAAC,yCAAyC,CAAC;IAC7E,IAAI4G,KAAK,CAACmI,IAAI,CAAC,UAACb,CAAC;MAAA,OAAK,CAACA,CAAC,CAACjI,MAAM;MAAC,EAAE,MAAM,IAAIjG,KAAK,CAAC,+CAA+C,CAAC;IAClG,IAAMgT,UAAU,GAAGpM,KAAK,CAAC,CAAC,CAAC;IAE3B,IAAMqM,WAAW,GAAGD,UAAU,CAAC,CAAC,CAAC,CAACF,OAAO;IACzC,IAAMI,YAAY,GAAGF,UAAU,CAACA,UAAU,CAAC/M,MAAM,GAAG,CAAC,CAAC,CAAC8M,QAAQ;IAE/D,IAAI,CAACE,WAAW,IAAI,CAACC,YAAY,EAAE,MAAM,IAAIlT,KAAK,CAAC,kDAAkD,CAAC;IACtG,IAAIiT,WAAW,CAACxP,OAAO,KAAKyP,YAAY,CAACzP,OAAO,EAC9C,MAAM,IAAIzD,KAAK,CAAC,uDAAuD,CAAC;IAE1E,IAAMmT,gBAAgB,GAAGR,kBAAkB,CAACS,UAAU,CAACV,gBAAgB,CAACI,OAAO,CAAC,EAAEG,WAAW,CAAC;IAC9F,IAAMI,iBAAiB,GAAGV,kBAAkB,CAACS,UAAU,CAACV,gBAAgB,CAACK,QAAQ,CAAC,EAAEG,YAAY,CAAC;IAEjG,IAAMI,WAAW,GAAkB1M,KAAK,CAACrG,GAAG,CAAC,UAACiL,QAAQ;MACpD,IAAM+H,WAAW,GAAG/H,QAAQ,CAAC,CAAC,CAAC,CAACX,QAAQ;MACxC,IAAM2I,YAAY,GAAGhI,QAAQ,CAACA,QAAQ,CAACvF,MAAM,GAAG,CAAC,CAAC,CAAC6E,SAAS;MAE5D,IAAI,CAACyI,WAAW,IAAI,CAACC,YAAY,EAAE;QACjC,MAAM,IAAIxT,KAAK,CAAC,4DAA4D,CAAC;;MAG/E,IAAMyF,WAAW,GAAGgO,cAAc,CAACC,aAAa,CAACP,gBAAgB,EAAEI,WAAW,CAAC;MAC/E,IAAM7L,YAAY,GAAG+L,cAAc,CAACC,aAAa,CAACL,iBAAiB,EAAEG,YAAY,CAAC;MAElF,IAAMG,QAAQ,GAAGhB,kBAAkB,CAACiB,gBAAgB,CAAgBnB,QAAQ,CAACoB,MAAM,EAAErI,QAAQ,CAAC;MAC9F,IAAMsI,QAAQ,GAAGnB,kBAAkB,CAACiB,gBAAgB,CAAgBnB,QAAQ,CAAC/H,MAAM,EAAEc,QAAQ,CAAC;MAC9F,IAAMuI,QAAQ,GAAGpB,kBAAkB,CAACiB,gBAAgB,CAAgBnB,QAAQ,CAAC3R,MAAM,EAAE0K,QAAQ,CAAC;MAC9F,OAAO;QACLwI,OAAO,EAAED,QAAQ,GACb,IAAIlK,KAAO,CACR2B,QAA4B,CAACjL,GAAG,CAACoS,kBAAkB,CAACsB,QAAQ,CAAC,EAC9Dd,gBAAgB,EAChBE,iBAAiB,CAClB,GACD,IAAI;QACRa,OAAO,EAAEJ,QAAQ,GACb,IAAIK,OAAO,CACR3I,QAA4B,CAACjL,GAAG,CAACoS,kBAAkB,CAACyB,QAAQ,CAAC,EAC9DjB,gBAAgB,EAChBE,iBAAiB,CAClB,GACD,IAAI;QACRgB,OAAO,EAAEV,QAAQ,GACb,IAAIW,OAAO,CACR9I,QAA4B,CAACjL,GAAG,CAACoS,kBAAkB,CAAC4B,MAAM,CAAC,EAC5DpB,gBAAgB,EAChBE,iBAAiB,CAClB,GACD,IAAI;QACRmB,UAAU,EACR,CAACT,QAAQ,IAAI,CAACD,QAAQ,IAAI,CAACH,QAAQ,GAC/B,IAAIjI,aAAa,CAACF,QAAQ,CAACjL,GAAG,CAACoS,kBAAkB,CAAC8B,YAAY,CAAC,EAAEtB,gBAAgB,EAAEE,iBAAiB,CAAC,GACrG,IAAI;QACV5N,WAAW,EAAXA,WAAW;QACXiC,YAAY,EAAZA;OACD;KACF,CAAC;IAEF,OAAO,IAAIgN,OAAW,CAAC;MACrBC,QAAQ,EAAErB,WAAW,CAClBsB,MAAM,CAAC,UAAChO,KAAK;QAAA,OAAKA,KAAK,CAACyN,OAAO;QAAC,CAChC9T,GAAG,CAAC,UAACqG,KAAK;QAAA,OAAM;UACfyN,OAAO,EAAEzN,KAAK,CAACyN,OAAsC;UACrD5O,WAAW,EAAEmB,KAAK,CAACnB,WAAW;UAC9BiC,YAAY,EAAEd,KAAK,CAACc;SACrB;OAAC,CAAC;MACLmN,QAAQ,EAAEvB,WAAW,CAClBsB,MAAM,CAAC,UAAChO,KAAK;QAAA,OAAKA,KAAK,CAACsN,OAAO;QAAC,CAChC3T,GAAG,CAAC,UAACqG,KAAK;QAAA,OAAM;UACfsN,OAAO,EAAEtN,KAAK,CAACsN,OAAsC;UACrDzO,WAAW,EAAEmB,KAAK,CAACnB,WAAW;UAC9BiC,YAAY,EAAEd,KAAK,CAACc;SACrB;OAAC,CAAC;MACLoN,QAAQ,EAAExB,WAAW,CAClBsB,MAAM,CAAC,UAAChO,KAAK;QAAA,OAAKA,KAAK,CAACoN,OAAO;QAAC,CAChCzT,GAAG,CAAC,UAACqG,KAAK;QAAA,OAAM;UACfoN,OAAO,EAAEpN,KAAK,CAACoN,OAAsC;UACrDvO,WAAW,EAAEmB,KAAK,CAACnB,WAAW;UAC9BiC,YAAY,EAAEd,KAAK,CAACc;SACrB;OAAC,CAAC;MACLqN,WAAW,EAAEzB,WAAW,CACrBsB,MAAM,CAAC,UAAChO,KAAK;QAAA,OAAKA,KAAK,CAAC4N,UAAU;QAAC,CACnCjU,GAAG,CAAC,UAACqG,KAAK;QAAA,OAAM;UACf4N,UAAU,EAAE5N,KAAK,CAAC4N,UAA+C;UACjE/O,WAAW,EAAEmB,KAAK,CAACnB,WAAW;UAC9BiC,YAAY,EAAEd,KAAK,CAACc;SACrB;OAAC,CAAC;MACL7B,SAAS,EAAEgN,KAAK,CAAChN;KAClB,CAAC;GACH;EAAA8M,kBAAA,CAEcS,UAAU,GAAjB,SAAOA,UAAUA,CAAC/O,QAAiB,EAAEgF,KAAmB;IAC9D,IAAIhF,QAAQ,EAAE;MACZ,OAAO2Q,KAAK,CAACC,OAAO,CAAC5L,KAAK,CAAC5F,OAAO,CAAC;;IAErC,OAAO,IAAI,CAACyR,OAAO,CAAC7L,KAAK,CAAC;GAC3B;EAAAsJ,kBAAA,CAecuC,OAAO,GAAd,SAAOA,OAAOA,CAAC7L,KAAmB;IACxC,IAAQ5F,OAAO,GAAuD4F,KAAK,CAAnE5F,OAAO;MAAE7B,OAAO,GAA8CyH,KAAK,CAA1DzH,OAAO;MAAEuT,QAAQ,GAAoC9L,KAAK,CAAjD8L,QAAQ;MAAEjU,MAAM,GAA4BmI,KAAK,CAAvCnI,MAAM;MAAEkU,SAAS,GAAiB/L,KAAK,CAA/B+L,SAAS;MAAEC,UAAU,GAAKhM,KAAK,CAApBgM,UAAU;IACjE,OAAO,IAAIC,KAAK,CACd7R,OAAO,EACP7B,OAAO,EACP2T,QAAQ,CAACJ,QAAQ,CAACjV,QAAQ,EAAE,CAAC,EAC7BgB,MAAM,YACK8I,SAAS,EACpB,KAAK,EACLoL,SAAS,GAAGvR,SAAS,CAACC,IAAI,CAACsR,SAAS,CAAC,GAAGpL,SAAS,EACjDqL,UAAU,GAAGxR,SAAS,CAACC,IAAI,CAACuR,UAAU,CAAC,GAAGrL,SAAS,CACpD;GACF;EAAA2I,kBAAA,CAEcyB,QAAQ,GAAf,SAAOA,QAAQA,CAAAlL,IAAA;QAAG3E,GAAG,GAAA2E,IAAA,CAAH3E,GAAG;MAAEyM,YAAY,GAAA9H,IAAA,CAAZ8H,YAAY;MAAEwE,SAAS,GAAAtM,IAAA,CAATsM,SAAS;MAAEC,WAAW,GAAAvM,IAAA,CAAXuM,WAAW;MAAE3C,OAAO,GAAA5J,IAAA,CAAP4J,OAAO;MAAEC,QAAQ,GAAA7J,IAAA,CAAR6J,QAAQ;IACpF,OAAO,IAAIrI,MAAM,CACfiI,kBAAkB,CAACuC,OAAO,CAACpC,OAAO,CAAC,EACnCH,kBAAkB,CAACuC,OAAO,CAACnC,QAAQ,CAAC,EACpCwC,QAAQ,CAAChR,GAAG,CAAc,EAC1ByM,YAAY,EACZwE,SAAS,EACTD,QAAQ,CAACE,WAAW,CAAC,CACtB;GACF;EAAA9C,kBAAA,CAEcsB,QAAQ,GAAf,SAAOA,QAAQA,CAACtT,IAAmB;IACzC,IAAMwS,gBAAgB,GAAGR,kBAAkB,CAACS,UAAU,CAACV,gBAAgB,CAAC/R,IAAI,CAACmS,OAAO,CAAClR,OAAO,CAAC,EAAEjB,IAAI,CAACmS,OAAO,CAAC;IAC5G,IAAMO,iBAAiB,GAAGV,kBAAkB,CAACS,UAAU,CAACV,gBAAgB,CAAC/R,IAAI,CAACoS,QAAQ,CAACnR,OAAO,CAAC,EAAEjB,IAAI,CAACoS,QAAQ,CAAC;IAC/G,OAAO,IAAIjS,IAAM,CACfqS,gBAAgB,EAChBE,iBAAiB,EACjBkC,QAAQ,CAAC5U,IAAI,CAAC4D,GAAG,CAAc,EAC/BgR,QAAQ,CAAC5U,IAAI,CAACmQ,WAAW,CAAC,EAC1BnQ,IAAI,CAACoQ,KAAK,EACVpQ,IAAI,CAACqQ,YAAY,EACjBrQ,IAAI,CAAC6U,SAAS,EACdD,QAAQ,CAAC5U,IAAI,CAAC8U,WAAW,CAAC,CAC3B;GACF;EAAA9C,kBAAA,CASciB,gBAAgB,GAAvB,SAAOA,gBAAgBA,CAC7BpW,IAAc,EACdoJ,KAAwD;IAExD,OAAOA,KAAK,CAAC8O,KAAK,CAAC,UAAC/U,IAAI;MAAA,OAAKA,IAAI,CAACnD,IAAI,KAAKA,IAAI;MAAC;GACjD;EAAA,OAAAmV,kBAAA;AAAA;AAjEcA,+BAAY,GAAG,UAAChS,IAAmD;EAChF,QAAQA,IAAI,CAACnD,IAAI;IACf,KAAKiV,QAAQ,CAAC3R,MAAM;MAClB,OAAO6R,kBAAkB,CAACsB,QAAQ,CAACtT,IAAI,CAAC;IAC1C,KAAK8R,QAAQ,CAAC/H,MAAM;MAClB,OAAOiI,kBAAkB,CAACyB,QAAQ,CAACzT,IAAI,CAAC;IAC1C,KAAK8R,QAAQ,CAACoB,MAAM;MAClB,OAAOlB,kBAAkB,CAAC4B,MAAM,CAAC5T,IAAI,CAAC;IACxC;MACE,MAAM,IAAIX,KAAK,CAAC,mBAAmB,CAAC;;AAE1C,CAAC;AA0Cc2S,yBAAM,GAAG,UAAArJ,KAAA;MAAGqM,QAAQ,GAAArM,KAAA,CAARqM,QAAQ;IAAEC,QAAQ,GAAAtM,KAAA,CAARsM,QAAQ;EAC3C,OAAO,IAAIjL,IAAI,CACb8I,cAAc,CAACC,aAAa,CAACf,kBAAkB,CAACuC,OAAO,CAACS,QAAQ,CAACtM,KAAK,CAAC,EAAEsM,QAAQ,CAACjR,QAAQ,CAAC,EAC3F+O,cAAc,CAACC,aAAa,CAACf,kBAAkB,CAACuC,OAAO,CAACU,QAAQ,CAACvM,KAAK,CAAC,EAAEuM,QAAQ,CAAClR,QAAQ,CAAC,CAC5F;AACH,CAAC;;AC9NH;AACA,IAAsBmR,aAAa;EAAA,SAAAA;EAAAA,aAAA,CAGnBC,aAAa,GAApB,SAAOA,aAAaA,CAACpI,QAAgB;IAC1C,IAAMqI,aAAa,GAAG,IAAIC,oBAAoB,CAAC9Y,kBAAkB,CAAC;IAClE,IAAM+Y,aAAa,GAAGJ,aAAa,CAACjI,SAAS,CAACsI,gBAAgB,CAAC;MAAEC,IAAI,EAAEzI;KAAU,CAAC;IAClF,IAAA0I,mBAAA,GAA6BH,aAAa,CAACI,IAAI;MAAvCnX,QAAQ,GAAAkX,mBAAA,CAARlX,QAAQ;MAAEC,MAAM,GAAAiX,mBAAA,CAANjX,MAAM;IACxB,OAAO4W,aAAa,CAACO,KAAK,CAACpX,QAAQ,EAAEC,MAAM,CAAC;GAC7C;EAAA,OAAA0W,aAAA;AAAA;AAPaA,uBAAS,gBAAc,IAAI3D,SAAS,CAACC,eAAe,CAAC3R,GAAG,CAAC;AAUzE;AACA,IAAawV,oBAAoB;EAC/B,SAAAA,qBAA6BO,iBAAqC;IAArC,sBAAiB,GAAjBA,iBAAiB;;EAAwB,IAAAnX,MAAA,GAAA4W,oBAAA,CAAA3W,SAAA;EAAAD,MAAA,CAE/DkX,KAAK,GAAL,SAAAA,KAAKA,CAACpX,QAAgB,EAAEC,MAAgB;;IAC7C,IAAMqX,YAAY,GAAGR,oBAAoB,CAACS,WAAW,CAACvX,QAAQ,CAAC;IAE/D,OAAO;MACLA,QAAQ,EAAEsX,YAAY,CAACjW,GAAG,CAAC,UAACmW,WAAwB,EAAExL,CAAS;QAC7D,IAAM9K,UAAU,GAAGuW,KAAI,CAACJ,iBAAiB,CAACG,WAAW,CAAC;QAEtD,IAAItW,UAAU,CAAChD,MAAM,KAAKZ,MAAM,CAAC6B,SAAS,EAAE;UAC1C,IAAAuY,qBAAA,GAAoBC,mBAAmB,CAACf,aAAa,CAAC3W,MAAM,CAAC+L,CAAC,CAAC,CAAC;YAAxD4L,OAAO,GAAAF,qBAAA,CAAPE,OAAO;UACf,OAAO;YACLC,WAAW,EAAEza,WAAW,CAACoa,WAAW,CAAC;YACrCA,WAAW,EAAXA,WAAW;YACXpZ,MAAM,EAAE0Z,oBAAoB,CAACF,OAAO;WACrC;SACF,MAAM,IAAI1W,UAAU,CAAChD,MAAM,KAAKZ,MAAM,CAACa,GAAG,EAAE;UAC3C,IAAM4Z,MAAM,GAAG7W,UAAU,CAAC9C,MAAM;UAChC,IAAM4Z,SAAS,GAAGhK,MAAM,CAACC,KAAK,CAAC9M,eAAe,CAAC8W,MAAM,CACnDF,MAAM,CAAC1W,GAAG,CAAC,UAACZ,OAAO;YAAA,OAAKA,OAAO,CAACnC,IAAI;YAAC,EACrC2B,MAAM,CAAC+L,CAAC,CAAC,CACV;UAED,IAAM5N,MAAM,GAAG4Z,SAAS,CAAC3W,GAAG,CAAC,UAAC6W,KAAU,EAAEC,CAAS;YACjD,QAAQJ,MAAM,CAACI,CAAC,CAAC,CAACvZ,SAAS;cACzB,KAAKvB,SAAS,CAACwB,aAAa;gBAC1B,OAAO;kBACLR,IAAI,EAAE0Z,MAAM,CAACI,CAAC,CAAC,CAAC9Z,IAAI;kBACpBoJ,KAAK,EAAE2Q,kBAAkB,CAACF,KAAK;iBAChC;cACH,KAAK7a,SAAS,CAAC0B,cAAc;gBAC3B,OAAO;kBACLV,IAAI,EAAE0Z,MAAM,CAACI,CAAC,CAAC,CAAC9Z,IAAI;kBACpBoJ,KAAK,EAAE4Q,mBAAmB,CAACH,KAAK;iBACjC;cACH;gBACE,OAAO;kBACL7Z,IAAI,EAAE0Z,MAAM,CAACI,CAAC,CAAC,CAAC9Z,IAAI;kBACpBoJ,KAAK,EAAEyQ;iBACR;;WAEN,CAAC;UACF,OAAO;YACLL,WAAW,EAAEza,WAAW,CAACoa,WAAW,CAAC;YACrCA,WAAW,EAAXA,WAAW;YACXpZ,MAAM,EAANA;WACD;SACF,MAAM,IAAI8C,UAAU,CAAChD,MAAM,KAAKZ,MAAM,CAACsC,SAAS,EAAE;;UAEjD,OAAO;YACLiY,WAAW,EAAEza,WAAW,CAACoa,WAAW,CAAC;YACrCA,WAAW,EAAXA,WAAW;YACXpZ,MAAM,EAAE6B,MAAM,CAACoB,GAAG,CAAC,UAAC0L,KAAK;cAAA,OAAM;gBAAE1O,IAAI,EAAE,SAAS;gBAAEoJ,KAAK,EAAEsF;eAAO;aAAC;WAClE;SACF,MAAM;UACL,MAAM,IAAIjM,KAAK,0BAAwBI,UAAY,CAAC;;OAEvD;KACF;;;;EAGH4V,oBAAA,CACeS,WAAW,GAAlB,SAAOA,WAAWA,CAACvX,QAAgB;IACzC,IAAMsX,YAAY,GAAkB,EAAE;IAEtC,KAAK,IAAItL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhM,QAAQ,CAAC+G,MAAM,EAAEiF,CAAC,IAAI,CAAC,EAAE;MAC3C,IAAMsM,KAAI,GAAGtY,QAAQ,CAACuY,SAAS,CAACvM,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;MACzCsL,YAAY,CAAC3W,IAAI,CAAC0V,QAAQ,CAACiC,KAAI,EAAE,EAAE,CAAgB,CAAC;;IAGtD,OAAOhB,YAAY;GACpB;EAAA,OAAAR,oBAAA;AAAA;AAGH,SAAgBsB,kBAAkBA,CAAClO,IAAY;EAC7C,IAAMsO,YAAY,GAAGtO,IAAI,CAACuO,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC3C,IAAI7E,OAAO,GAAG5F,MAAM,CAACC,KAAK,CAACyK,UAAU,CAACF,YAAY,CAACD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACpE,IAAII,GAAG,GAAG,EAAE;EACZ,IAAMC,GAAG,GAAiB,EAAE;EAC5B,OAAOD,GAAG,GAAGH,YAAY,CAACzR,MAAM,EAAE;IAChC,IAAM8R,cAAc,GAAGL,YAAY,CAACD,SAAS,CAACI,GAAG,EAAEA,GAAG,GAAG,EAAE,CAAC;IAC5D,IAAMtT,GAAG,GAAGgR,QAAQ,CAACwC,cAAc,CAACN,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACxD,IAAM1E,QAAQ,GAAG7F,MAAM,CAACC,KAAK,CAACyK,UAAU,CAACG,cAAc,CAACN,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEzEK,GAAG,CAACjY,IAAI,CAAC;MACPiT,OAAO,EAAPA,OAAO;MACPC,QAAQ,EAARA,QAAQ;MACRxO,GAAG,EAAHA;KACD,CAAC;IACFuO,OAAO,GAAGC,QAAQ;IAClB8E,GAAG,IAAI,EAAE;;EAGX,OAAOC,GAAG;AACZ;AAEA,SAAgBP,mBAAmBA,CAACnO,IAAY;EAC9C,IAAMsO,YAAY,GAAGtO,IAAI,CAACuO,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC3C,IAAI7E,OAAO,GAAG5F,MAAM,CAACC,KAAK,CAACyK,UAAU,CAACF,YAAY,CAACD,SAAS,CAACC,YAAY,CAACzR,MAAM,GAAG,EAAE,CAAC,CAAC;EACvF,IAAI4R,GAAG,GAAGH,YAAY,CAACzR,MAAM,GAAG,EAAE,CAAA;EAClC,IAAM6R,GAAG,GAAiB,EAAE;EAC5B,OAAOD,GAAG,IAAI,CAAC,EAAE;IACf,IAAME,cAAc,GAAGL,YAAY,CAACD,SAAS,CAACI,GAAG,EAAEA,GAAG,GAAG,EAAE,CAAC;IAC5D,IAAM9E,QAAQ,GAAG7F,MAAM,CAACC,KAAK,CAACyK,UAAU,CAACG,cAAc,CAACN,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACzE,IAAMlT,GAAG,GAAGgR,QAAQ,CAACwC,cAAc,CAACN,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;IAE1DK,GAAG,CAACjY,IAAI,CAAC;MACPiT,OAAO,EAAPA,OAAO;MACPC,QAAQ,EAARA,QAAQ;MACRxO,GAAG,EAAHA;KACD,CAAC;IACFuO,OAAO,GAAGC,QAAQ;IAElB8E,GAAG,IAAI,EAAE;;EAGX,OAAOC,GAAG;AACZ;AAEA,SAASd,oBAAoBA,CAACF,OAAkC;EAC9D,OAAOA,OAAO,CAACvW,GAAG,CAAC,UAACyX,MAAM;IACxB,OAAO;MACLza,IAAI,EAAEya,MAAM,CAACC,UAAU;MACvBtR,KAAK,EAAEqR,MAAM,CAAC1a,MAAM,CAACiD,GAAG,CAAC,UAAC6W,KAAK;QAC7B,OAAO;UACL7Z,IAAI,EAAE6Z,KAAK,CAAC7Z,IAAI;UAChBoJ,KAAK,EAAEyQ,KAAK,CAACzQ;SACd;OACF;KACF;GACF,CAAC;AACJ;;;;"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/utils/routerCommands.ts","../src/utils/pathCurrency.ts","../src/entities/Command.ts","../src/utils/constants.ts","../src/utils/getCurrencyAddress.ts","../src/utils/numbers.ts","../src/entities/actions/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/actions/unwrapWETH.ts","../src/utils/routerTradeAdapter.ts","../src/utils/commandParser.ts"],"sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  V4_SWAP = 0x10,\n  V3_POSITION_MANAGER_PERMIT = 0x11,\n  V3_POSITION_MANAGER_CALL = 0x12,\n  V4_INITIALIZE_POOL = 0x13,\n  V4_POSITION_MANAGER_CALL = 0x14,\n\n  EXECUTE_SUB_PLAN = 0x21,\n}\n\nexport enum Subparser {\n  V3PathExactIn,\n  V3PathExactOut,\n}\n\nexport enum Parser {\n  Abi,\n  V4Actions,\n  V3Actions,\n}\n\nexport type ParamType = {\n  readonly name: string\n  readonly type: string\n  readonly subparser?: Subparser\n}\n\nexport type CommandDefinition =\n  | {\n      parser: Parser.Abi\n      params: ParamType[]\n    }\n  | {\n      parser: Parser.V4Actions\n    }\n  | {\n      parser: Parser.V3Actions\n    }\n\nconst ALLOW_REVERT_FLAG = 0x80\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([CommandType.EXECUTE_SUB_PLAN])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst POOL_KEY_STRUCT = '(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nexport const COMMAND_DEFINITION: { [key in CommandType]: CommandDefinition } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'commands', type: 'bytes' },\n      { name: 'inputs', type: 'bytes[]' },\n    ],\n  },\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_PERMIT_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'permit', type: PERMIT_BATCH_STRUCT },\n      { name: 'signature', type: 'bytes' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint160' },\n    ],\n  },\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: {\n    parser: Parser.Abi,\n    params: [\n      {\n        name: 'transferFrom',\n        type: PERMIT2_TRANSFER_FROM_BATCH_STRUCT,\n      },\n    ],\n  },\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactIn, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V3_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', subparser: Subparser.V3PathExactOut, type: 'bytes' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_IN]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountIn', type: 'uint256' },\n      { name: 'amountOutMin', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V2_SWAP_EXACT_OUT]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountOut', type: 'uint256' },\n      { name: 'amountInMax', type: 'uint256' },\n      { name: 'path', type: 'address[]' },\n      { name: 'payerIsUser', type: 'bool' },\n    ],\n  },\n  [CommandType.V4_SWAP]: { parser: Parser.V4Actions },\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amount', type: 'uint256' },\n    ],\n  },\n  [CommandType.UNWRAP_WETH]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.SWEEP]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'amountMin', type: 'uint256' },\n    ],\n  },\n  [CommandType.TRANSFER]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'value', type: 'uint256' },\n    ],\n  },\n  [CommandType.PAY_PORTION]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'token', type: 'address' },\n      { name: 'recipient', type: 'address' },\n      { name: 'bips', type: 'uint256' },\n    ],\n  },\n  [CommandType.BALANCE_CHECK_ERC20]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'owner', type: 'address' },\n      { name: 'token', type: 'address' },\n      { name: 'minBalance', type: 'uint256' },\n    ],\n  },\n  [CommandType.V4_INITIALIZE_POOL]: {\n    parser: Parser.Abi,\n    params: [\n      { name: 'poolKey', type: POOL_KEY_STRUCT },\n      { name: 'sqrtPriceX96', type: 'uint160' },\n    ],\n  },\n\n  // Position Actions\n  [CommandType.V3_POSITION_MANAGER_PERMIT]: { parser: Parser.V3Actions },\n  [CommandType.V3_POSITION_MANAGER_CALL]: { parser: Parser.V3Actions },\n  [CommandType.V4_POSITION_MANAGER_CALL]: { parser: Parser.V4Actions },\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): RoutePlanner {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n    return this\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): RoutePlanner {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n    return this\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const commandDef = COMMAND_DEFINITION[type]\n  switch (commandDef.parser) {\n    case Parser.Abi:\n      const encodedInput = defaultAbiCoder.encode(\n        commandDef.params.map((abi) => abi.type),\n        parameters\n      )\n      return { type, encodedInput }\n    case Parser.V4Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n    case Parser.V3Actions:\n      // v4 swap data comes pre-encoded at index 0\n      return { type, encodedInput: parameters[0] }\n  }\n}\n","import { Currency, Token } from '@uniswap/sdk-core'\nimport { Pool as V4Pool } from '@uniswap/v4-sdk'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport function getPathCurrency(currency: Currency, pool: TPool): Currency {\n  // return currency if the currency matches a currency of the pool\n  if (pool.involvesToken(currency as Token)) {\n    return currency\n\n    // return if currency.wrapped if pool involves wrapped currency\n  } else if (pool.involvesToken(currency.wrapped as Token)) {\n    return currency.wrapped\n\n    // return native currency if pool involves native version of wrapped currency (only applies to V4)\n  } else if (pool instanceof V4Pool && pool.token0.wrapped.equals(currency)) {\n    return pool.token0\n  } else if (pool instanceof V4Pool && pool.token1.wrapped.equals(currency)) {\n    return pool.token1\n  } else {\n    throw new Error(`Expected currency ${currency.symbol} to be either ${pool.token0.symbol} or ${pool.token1.symbol}`)\n  }\n\n  return currency // this line needed for typescript to compile\n}\n","import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterActionType {\n  UniswapTrade = 'UniswapTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterActionType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import { BigNumber } from 'ethers'\n\nexport enum UniversalRouterVersion {\n  V1_2 = '1.2',\n  V2_0 = '2.0',\n}\n\nexport type RouterConfig = {\n  address: string\n  creationBlock: number\n}\n\ntype ChainConfig = {\n  weth: string\n  routerConfigs: { [key in UniversalRouterVersion]: RouterConfig }\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\n// Todo: Change `CHAIN_CONFIGS` to pull the UR address with v4\nexport const CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17143817,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x66a9893cc07d91d95644aedd05d03f95e1dba8af',\n        creationBlock: 1737658355,\n      },\n    },\n  },\n  // goerli\n  [5]: {\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8940568,\n      },\n    },\n  },\n  // sepolia\n  \n  [11155111]: {\n    weth: '0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9',\n    routerConfigs: {\n     [UniversalRouterVersion.V1_2]: {\n        address: '0x0000000000000000000000000000000000000000',\n        creationBlock: 0,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6872c178C147c487A71e6033B665a5644c4E7990',\n        creationBlock: 9499896,\n      },\n    },\n  },\n  // polygon\n  [137]: {\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n        creationBlock: 52210153,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1095692a6237d83c6a72f3f5efedb9a670c49223',\n        creationBlock: 1737492197,\n      },\n    },\n  },\n  //polygon mumbai\n  [80001]: {\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 35176052,\n      },\n    },\n  },\n  //optimism\n  [10]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n        creationBlock: 114702266,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x851116d9223fabed8e56c0e6b8ad0c31d98b3507',\n        creationBlock: 1737494278,\n      },\n    },\n  },\n  // optimism goerli\n  [420]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 8887728,\n      },\n    },\n  },\n  // arbitrum\n  [42161]: {\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x5E325eDA8064b456f4781070C0738d849c824258',\n        creationBlock: 169472836,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xa51afafe0263b40edaef0df8781ea9aa03e381a3',\n        creationBlock: 1737487458,\n      },\n    },\n  },\n  // arbitrum goerli\n  [421613]: {\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 18815277,\n      },\n    },\n  },\n  // celo\n  [42220]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x643770e279d5d0733f21d6dc03a8efbabf3255b4',\n        creationBlock: 21407637,\n      },\n    },\n  },\n  // celo alfajores\n  [44787]: {\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 17566658,\n      },\n    },\n  },\n  // binance smart chain\n  [56]: {\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 35160263,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x1906c1d672b88cd1b9ac7593301ca990f94eae07',\n        creationBlock: 1737493275,\n      },\n    },\n  },\n  // avalanche\n  [43114]: {\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n        creationBlock: 40237257,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x94b75331ae8d42c1b61065089b7d48fe14aa73b7',\n        creationBlock: 1737558236,\n      },\n    },\n  },\n  // base goerli\n  [84531]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n        creationBlock: 6915289,\n      },\n    },\n  },\n  // base mainnet\n  [8453]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n        creationBlock: 9107268,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x6ff5693b99212da76ad316178a184ab56d299b43',\n        creationBlock: 1737491485,\n      },\n    },\n  },\n  // blast\n  [81457]: {\n    weth: '0x4300000000000000000000000000000000000004',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n        creationBlock: 1116444,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xeabbcb3e8e415306207ef514f660a3f820025be3',\n        creationBlock: 1737564586,\n      },\n    },\n  },\n  // zora\n  [7777777]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n        creationBlock: 11832155,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3315ef7ca28db74abadc6c44570efdf06b04b020',\n        creationBlock: 1737562927,\n      },\n    },\n  },\n  [324]: {\n    weth: '0x5aea5775959fbc2557cc8789bc1bf90a239d9a91',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x28731BCC616B5f51dD52CF2e4dF0E78dD1136C06',\n        creationBlock: 12640979,\n      },\n    },\n  },\n  // worldchain\n  [480]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n        creationBlock: 4063979,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x8ac7bee993bb44dab564ea4bc9ea67bf9eb5e743',\n        creationBlock: 1737559557,\n      },\n    },\n  },\n  [1301]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n        creationBlock: 1241811,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xf70536b3bcc1bd1a972dc186a2cf84cc6da6be5d',\n        creationBlock: 7100543,\n      },\n    },\n  },\n  // unichain mainnet\n  [130]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x4D73A4411CA1c660035e4AECC8270E5DdDEC8C17',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0xef740bf23acae26f6492b10de645d6b98dc8eaf3',\n        creationBlock: 1737568156,\n      },\n    },\n  },\n  [10143]: {\n    weth: '0x760AfE86e5de5fa0Ee542fc7B7B713e1c5425701',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x3ae6d8a282d67893e17aa70ebffb33ee5aa65893',\n        creationBlock: 23678,\n      },\n    },\n  },\n  [84532]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x492e6456d9528771018deb9e87ef7750ef184104',\n        creationBlock: 20216585,\n      },\n    },\n  },\n  [1868]: {\n    weth: '0x4200000000000000000000000000000000000006',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0e2850543f69f678257266e0907ff9a58b3f13de',\n        creationBlock: 3254782,\n      },\n    },\n  },\n  [143]: {\n    weth: '0x3bd359C1119dA7Da1D913D1C4D2B7c461115433A',\n    routerConfigs: {\n      [UniversalRouterVersion.V1_2]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n      [UniversalRouterVersion.V2_0]: {\n        address: '0x0d97dc33264bfc1c226207428a79b26757fb9dc3',\n        creationBlock: 29255937,\n      },\n    },\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (version: UniversalRouterVersion, chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].address\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (version: UniversalRouterVersion, chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].routerConfigs[version].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const E_ETH_ADDRESS = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n","import { Currency } from '@uniswap/sdk-core'\nimport { ETH_ADDRESS } from './constants'\n\nexport function getCurrencyAddress(currency: Currency): string {\n  return currency.isNative ? ETH_ADDRESS : currency.wrapped.address\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool as V3Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Route as V4Route,\n  Trade as V4Trade,\n  Pool as V4Pool,\n  V4Planner,\n  encodeRouteToPath as encodeV4RouteToPath,\n  Actions,\n} from '@uniswap/v4-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { getPathCurrency } from '../../utils/pathCurrency'\nimport { Currency, TradeType, Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE, ETH_ADDRESS } from '../../utils/constants'\nimport { getCurrencyAddress } from '../../utils/getCurrencyAddress'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { TPool } from '@uniswap/router-sdk'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\n// when safe mode is enabled, the SDK will add an extra ETH sweep for security\n// when useRouterBalance is enabled the SDK will use the balance in the router for the swap\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  useRouterBalance?: boolean\n  inputTokenPermit?: Permit2Permit\n  flatFee?: FlatFeeOptions\n  safeMode?: boolean\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, TPool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UniswapTrade\n  readonly payerIsUser: boolean\n\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n\n    if (this.inputRequiresWrap || this.inputRequiresUnwrap || this.options.useRouterBalance) {\n      this.payerIsUser = false\n    } else {\n      this.payerIsUser = true\n    }\n  }\n\n  get isAllV4(): boolean {\n    let result = true\n    for (const swap of this.trade.swaps) {\n      result = result && swap.route.protocol == Protocol.V4\n    }\n    return result\n  }\n\n  // this.trade.swaps is an array of swaps / trades.\n  // we are iterating over one swap (trade) at a time so length is 1\n  // route is either v2, v3, v4, or mixed\n  // pathInput and pathOutput are the currencies of the input and output of the route\n  // this.trade.inputAmount is the input currency of the trade (could be different from pathInput)\n  // this.trade.outputAmount is the output currency of the trade (could be different from pathOutput)\n  // each route can have multiple pools\n  get inputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If first pool is a v4 pool and input currency is native and the path input currency in the route is not native, we need to wrap.\n      return (\n        this.trade.inputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If first pool is not a v4 pool and input currency is native, we need to wrap\n    return this.trade.inputAmount.currency.isNative\n  }\n\n  get inputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const route = swap.route\n    const firstPool = route.pools[0]\n\n    if (firstPool instanceof V4Pool) {\n      // If the first pool is a v4 pool and input currency is not native and the path input currency is native, we need to unwrap\n      return (\n        !this.trade.inputAmount.currency.isNative &&\n        (this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathInput.isNative\n      )\n    }\n    // If the first pool is not a v4 pool, we don't need to unwrap.\n    return false\n  }\n\n  get outputRequiresWrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is not native but path currency output is native, we need to wrap\n      return (\n        !this.trade.outputAmount.currency.isNative &&\n        (lastRoute as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // if last pool is not v4:\n    // we do not need to wrap because v2 and v3 pools already require wrapped tokens\n    return false\n  }\n\n  get outputRequiresUnwrap(): boolean {\n    const swap = this.trade.swaps[0]\n    const lastRoute = swap.route\n    const lastPool = lastRoute.pools[lastRoute.pools.length - 1]\n\n    // if last pool is v4:\n    if (lastPool instanceof V4Pool) {\n      // If output currency is native and path currency output is not native, we need to unwrap\n      return (\n        this.trade.outputAmount.currency.isNative &&\n        !(this.trade.swaps[0].route as unknown as V4Route<Currency, Currency>).pathOutput.isNative\n      )\n    }\n    // else: if path output currency is native, we need to unwrap because v2 and v3 pools already require wrapped tokens\n    return this.trade.outputAmount.currency.isNative\n  }\n\n  get outputRequiresTransition(): boolean {\n    return this.outputRequiresWrap || this.outputRequiresUnwrap\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.inputRequiresWrap) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n    } else if (this.inputRequiresUnwrap) {\n      // send wrapped token to router to unwrap\n      planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n        (this.trade.inputAmount.currency as Token).address,\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const routerMustCustody =\n      performAggregatedSlippageCheck || this.outputRequiresTransition || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.V4:\n          addV4Swap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, this.payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      const pools = this.trade.swaps[0].route.pools\n      const pathOutputCurrencyAddress = getCurrencyAddress(\n        getPathCurrency(this.trade.outputAmount.currency, pools[pools.length - 1])\n      )\n\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [pathOutputCurrencyAddress, this.options.fee.recipient, feeBips])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [pathOutputCurrencyAddress, this.options.flatFee.recipient, feeAmount])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (this.outputRequiresUnwrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else if (this.outputRequiresWrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          getCurrencyAddress(this.trade.outputAmount.currency),\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    // for exactOutput swaps with native input or that perform an inputToken transition (wrap or unwrap)\n    // we need to send back the change to the user\n    if (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade)) {\n      if (this.inputRequiresWrap) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n      } else if (this.inputRequiresUnwrap) {\n        planner.addCommand(CommandType.WRAP_ETH, [this.options.recipient, CONTRACT_BALANCE])\n      } else if (this.trade.inputAmount.currency.isNative) {\n        // must refund extra native currency sent along for native v4 trades (no input transition)\n        planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n      }\n    }\n\n    if (this.options.safeMode) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, this.options.recipient, 0])\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      // if router will custody funds, we do aggregated slippage check from router\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((token) => token.wrapped.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      routerMustCustody ? 0 : trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\nfunction addV4Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { inputAmount, outputAmount, route }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  // create a deep copy of pools since v4Planner encoding tampers with array\n  const pools = route.pools.map((p) => p) as V4Pool[]\n  const v4Route = new V4Route(pools, inputAmount.currency, outputAmount.currency)\n  const trade = V4Trade.createUncheckedTrade({\n    route: v4Route,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const slippageToleranceOnSwap =\n    routerMustCustody && tradeType == TradeType.EXACT_INPUT ? undefined : options.slippageTolerance\n\n  const v4Planner = new V4Planner()\n  v4Planner.addTrade(trade, slippageToleranceOnSwap)\n  v4Planner.addSettle(trade.route.pathInput, payerIsUser)\n  v4Planner.addTake(\n    trade.route.pathOutput,\n    routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n  )\n  planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const route = swap.route as MixedRoute<TInput, TOutput>\n  const inputAmount = swap.inputAmount\n  const outputAmount = swap.outputAmount\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient ?? SENDER_AS_RECIPIENT\n\n  // single hop, so it can be reduced to plain swap logic for one protocol version\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof V4Pool) {\n      return addV4Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof V3Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = routerMustCustody\n    ? 0\n    : trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let inputToken = route.pathInput\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    const routePool = section[0]\n    const outputToken = getOutputOfPools(section, inputToken)\n    const subRoute = new MixedRoute(new MixedRouteSDK([...section], inputToken, outputToken))\n\n    let nextInputToken\n    let swapRecipient\n\n    if (isLastSectionInRoute(i)) {\n      nextInputToken = outputToken\n      swapRecipient = tradeRecipient\n    } else {\n      const nextPool = sections[i + 1][0]\n      nextInputToken = getPathCurrency(outputToken, nextPool)\n\n      const v2PoolIsSwapRecipient = nextPool instanceof Pair && outputToken.equals(nextInputToken)\n      swapRecipient = v2PoolIsSwapRecipient ? (nextPool as Pair).liquidityToken.address : ROUTER_AS_RECIPIENT\n    }\n\n    if (routePool instanceof V4Pool) {\n      const v4Planner = new V4Planner()\n      const v4SubRoute = new V4Route(section as V4Pool[], subRoute.input, subRoute.output)\n\n      v4Planner.addSettle(inputToken, payerIsUser && i === 0, (i == 0 ? amountIn : CONTRACT_BALANCE) as BigNumber)\n      v4Planner.addAction(Actions.SWAP_EXACT_IN, [\n        {\n          currencyIn: inputToken.isNative ? ETH_ADDRESS : inputToken.address,\n          path: encodeV4RouteToPath(v4SubRoute),\n          amountIn: 0, // denotes open delta, amount set in v4Planner.addSettle()\n          amountOutMinimum: !isLastSectionInRoute(i) ? 0 : amountOut,\n        },\n      ])\n      v4Planner.addTake(outputToken, swapRecipient)\n\n      planner.addCommand(CommandType.V4_SWAP, [v4Planner.finalize()])\n    } else if (routePool instanceof V3Pool) {\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        encodeMixedRouteToPath(subRoute), // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else if (routePool instanceof Pair) {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        swapRecipient, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        subRoute.path.map((token) => token.wrapped.address), // path\n        payerIsUser && i === 0,\n      ])\n    } else {\n      throw new Error('Unexpected Pool Type')\n    }\n\n    // perform a token transition (wrap/unwrap if necessary)\n    if (!isLastSectionInRoute(i)) {\n      if (outputToken.isNative && !nextInputToken.isNative) {\n        planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, CONTRACT_BALANCE])\n      } else if (!outputToken.isNative && nextInputToken.isNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, 0])\n      }\n    }\n\n    inputToken = nextInputToken\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { validateAndParseAddress, BigintIsh } from '@uniswap/sdk-core'\nimport { NFTPermitOptions, NonfungiblePositionManager } from '@uniswap/v3-sdk'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { ROUTER_AS_RECIPIENT } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\nexport function encodeV3PositionPermit(planner: RoutePlanner, permit: NFTPermitOptions, tokenId: BigintIsh): void {\n  const calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData('permit', [\n    validateAndParseAddress(permit.spender),\n    tokenId,\n    permit.deadline,\n    permit.v,\n    permit.r,\n    permit.s,\n  ])\n\n  planner.addCommand(CommandType.V3_POSITION_MANAGER_PERMIT, [calldata])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport {\n  MethodParameters,\n  Multicall,\n  Position as V3Position,\n  NonfungiblePositionManager as V3PositionManager,\n  RemoveLiquidityOptions as V3RemoveLiquidityOptions,\n} from '@uniswap/v3-sdk'\nimport {\n  Position as V4Position,\n  V4PositionManager,\n  AddLiquidityOptions as V4AddLiquidityOptions,\n  MintOptions,\n  Pool as V4Pool,\n  PoolKey,\n} from '@uniswap/v4-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Percent, CHAIN_TO_ADDRESSES_MAP, SupportedChainsType } from '@uniswap/sdk-core'\nimport { UniswapTrade, SwapOptions } from './entities/actions/uniswap'\nimport { RoutePlanner, CommandType } from './utils/routerCommands'\nimport { encodePermit, encodeV3PositionPermit } from './utils/inputTokens'\nimport { UNIVERSAL_ROUTER_ADDRESS, UniversalRouterVersion } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport interface MigrateV3ToV4Options {\n  inputPosition: V3Position\n  outputPosition: V4Position\n  v3RemoveLiquidityOptions: V3RemoveLiquidityOptions\n  v4AddLiquidityOptions: V4AddLiquidityOptions\n}\n\nfunction isMint(options: V4AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static swapCallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Builds the call parameters for a migration from a V3 position to a V4 position.\n   * Some requirements of the parameters:\n   *   - v3RemoveLiquidityOptions.collectOptions.recipient must equal v4PositionManager\n   *   - v3RemoveLiquidityOptions.liquidityPercentage must be 100%\n   *   - input pool and output pool must have the same tokens\n   *   - V3 NFT must be approved, or valid inputV3NFTPermit must be provided with UR as spender\n   */\n  public static migrateV3ToV4CallParameters(\n    options: MigrateV3ToV4Options,\n    positionManagerOverride?: string\n  ): MethodParameters {\n    const v4Pool: V4Pool = options.outputPosition.pool\n    const v3Token0 = options.inputPosition.pool.token0\n    const v3Token1 = options.inputPosition.pool.token1\n    const v4PositionManagerAddress =\n      positionManagerOverride ?? CHAIN_TO_ADDRESSES_MAP[v4Pool.chainId as SupportedChainsType].v4PositionManagerAddress\n\n    // owner of the v3 nft must be the receiver of the v4 nft\n\n    // validate the parameters\n    if (v4Pool.currency0.isNative) {\n      invariant(\n        (v4Pool.currency0.wrapped.equals(v3Token0) && v4Pool.currency1.equals(v3Token1)) ||\n          (v4Pool.currency0.wrapped.equals(v3Token1) && v4Pool.currency1.equals(v3Token0)),\n        'TOKEN_MISMATCH'\n      )\n    } else {\n      invariant(v3Token0 === v4Pool.token0, 'TOKEN0_MISMATCH')\n      invariant(v3Token1 === v4Pool.token1, 'TOKEN1_MISMATCH')\n    }\n\n    invariant(\n      options.v3RemoveLiquidityOptions.liquidityPercentage.equalTo(new Percent(100, 100)),\n      'FULL_REMOVAL_REQUIRED'\n    )\n    invariant(options.v3RemoveLiquidityOptions.burnToken == true, 'BURN_TOKEN_REQUIRED')\n    invariant(\n      options.v3RemoveLiquidityOptions.collectOptions.recipient === v4PositionManagerAddress,\n      'RECIPIENT_NOT_POSITION_MANAGER'\n    )\n    invariant(isMint(options.v4AddLiquidityOptions), 'MINT_REQUIRED')\n    invariant(options.v4AddLiquidityOptions.migrate, 'MIGRATE_REQUIRED')\n\n    const planner = new RoutePlanner()\n\n    // to prevent reentrancy by the pool hook, we initialize the v4 pool before moving funds\n    if (options.v4AddLiquidityOptions.createPool) {\n      const poolKey: PoolKey = V4Pool.getPoolKey(\n        v4Pool.currency0,\n        v4Pool.currency1,\n        v4Pool.fee,\n        v4Pool.tickSpacing,\n        v4Pool.hooks\n      )\n      planner.addCommand(CommandType.V4_INITIALIZE_POOL, [poolKey, v4Pool.sqrtRatioX96.toString()])\n      // remove createPool setting, so that it doesnt get encoded again later\n      delete options.v4AddLiquidityOptions.createPool\n    }\n\n    // add position permit to the universal router planner\n    if (options.v3RemoveLiquidityOptions.permit) {\n      // permit spender should be UR\n      const universalRouterAddress = UNIVERSAL_ROUTER_ADDRESS(\n        UniversalRouterVersion.V2_0,\n        options.inputPosition.pool.chainId as SupportedChainsType\n      )\n      invariant(universalRouterAddress == options.v3RemoveLiquidityOptions.permit.spender, 'INVALID_SPENDER')\n      // don't need to transfer it because v3posm uses isApprovedOrOwner()\n      encodeV3PositionPermit(planner, options.v3RemoveLiquidityOptions.permit, options.v3RemoveLiquidityOptions.tokenId)\n      // remove permit so that multicall doesnt add it again\n      delete options.v3RemoveLiquidityOptions.permit\n    }\n\n    // encode v3 withdraw\n    const v3RemoveParams: MethodParameters = V3PositionManager.removeCallParameters(\n      options.inputPosition,\n      options.v3RemoveLiquidityOptions\n    )\n    const v3Calls: string[] = Multicall.decodeMulticall(v3RemoveParams.calldata)\n\n    for (const v3Call of v3Calls) {\n      // slice selector - 0x + 4 bytes = 10 characters\n      const selector = v3Call.slice(0, 10)\n      invariant(\n        selector == V3PositionManager.INTERFACE.getSighash('collect') ||\n          selector == V3PositionManager.INTERFACE.getSighash('decreaseLiquidity') ||\n          selector == V3PositionManager.INTERFACE.getSighash('burn'),\n        'INVALID_V3_CALL: ' + selector\n      )\n      planner.addCommand(CommandType.V3_POSITION_MANAGER_CALL, [v3Call])\n    }\n\n    // encode v4 mint\n    const v4AddParams = V4PositionManager.addCallParameters(options.outputPosition, options.v4AddLiquidityOptions)\n    // only modifyLiquidities can be called by the UniversalRouter\n    const selector = v4AddParams.calldata.slice(0, 10)\n    invariant(selector == V4PositionManager.INTERFACE.getSighash('modifyLiquidities'), 'INVALID_V4_CALL: ' + selector)\n\n    planner.addCommand(CommandType.V4_POSITION_MANAGER_CALL, [v4AddParams.calldata])\n\n    return SwapRouter.encodePlan(planner, BigNumber.from(0), {\n      deadline: BigNumber.from(options.v4AddLiquidityOptions.deadline),\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterActionType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterActionType = RouterActionType.UnwrapWETH\n  readonly permit2Data?: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import { MixedRouteSDK, Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Ether, Token, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Route as V2Route } from '@uniswap/v2-sdk'\nimport { Pool as V3Pool, Route as V3Route, FeeAmount } from '@uniswap/v3-sdk'\nimport { Pool as V4Pool, Route as V4Route } from '@uniswap/v4-sdk'\nimport { BigNumber } from 'ethers'\nimport { ETH_ADDRESS, E_ETH_ADDRESS } from './constants'\n\nexport type TokenInRoute = {\n  address: string\n  chainId: number\n  symbol: string\n  decimals: string\n  name?: string\n  buyFeeBps?: string\n  sellFeeBps?: string\n}\n\nexport enum PoolType {\n  V2Pool = 'v2-pool',\n  V3Pool = 'v3-pool',\n  V4Pool = 'v4-pool',\n}\n\nexport type V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: PoolType.V2Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V3PoolInRoute = {\n  type: PoolType.V3Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type V4PoolInRoute = {\n  type: PoolType.V4Pool\n  address?: string\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  fee: string\n  tickSpacing: string\n  hooks: string\n  liquidity: string\n  sqrtRatioX96: string\n  tickCurrent: string\n  amountIn?: string\n  amountOut?: string\n}\n\nexport type PartialClassicQuote = {\n  // We need tokenIn/Out to support native currency\n  tokenIn: string\n  tokenOut: string\n  tradeType: TradeType\n  route: Array<(V4PoolInRoute | V3PoolInRoute | V2PoolInRoute)[]>\n}\n\ninterface RouteResult {\n  routev4: V4Route<Currency, Currency> | null\n  routev3: V3Route<Currency, Currency> | null\n  routev2: V2Route<Currency, Currency> | null\n  mixedRoute: MixedRouteSDK<Currency, Currency> | null\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nexport const isNativeCurrency = (address: string) =>\n  address.toLowerCase() === ETH_ADDRESS.toLowerCase() || address.toLowerCase() === E_ETH_ADDRESS.toLowerCase()\n\n// Helper class to convert routing-specific quote entities to RouterTrade entities\n// the returned RouterTrade can then be used to build the UniswapTrade entity in this package\nexport class RouterTradeAdapter {\n  // Generate a RouterTrade using fields from a classic quote response\n  static fromClassicQuote(quote: PartialClassicQuote) {\n    const { route, tokenIn, tokenOut } = quote\n\n    if (!route) throw new Error('Expected route to be present')\n    if (!route.length) throw new Error('Expected there to be at least one route')\n    if (route.some((r) => !r.length)) throw new Error('Expected all routes to have at least one pool')\n    const firstRoute = route[0]\n\n    const tokenInData = firstRoute[0].tokenIn\n    const tokenOutData = firstRoute[firstRoute.length - 1].tokenOut\n\n    if (!tokenInData || !tokenOutData) throw new Error('Expected both tokenIn and tokenOut to be present')\n    if (tokenInData.chainId !== tokenOutData.chainId)\n      throw new Error('Expected tokenIn and tokenOut to be have same chainId')\n\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenIn), tokenInData)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(tokenOut), tokenOutData)\n\n    const typedRoutes: RouteResult[] = route.map((subRoute) => {\n      const rawAmountIn = subRoute[0].amountIn\n      const rawAmountOut = subRoute[subRoute.length - 1].amountOut\n\n      if (!rawAmountIn || !rawAmountOut) {\n        throw new Error('Expected both raw amountIn and raw amountOut to be present')\n      }\n\n      const inputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyIn, rawAmountIn)\n      const outputAmount = CurrencyAmount.fromRawAmount(parsedCurrencyOut, rawAmountOut)\n\n      const isOnlyV2 = RouterTradeAdapter.isVersionedRoute<V2PoolInRoute>(PoolType.V2Pool, subRoute)\n      const isOnlyV3 = RouterTradeAdapter.isVersionedRoute<V3PoolInRoute>(PoolType.V3Pool, subRoute)\n      const isOnlyV4 = RouterTradeAdapter.isVersionedRoute<V4PoolInRoute>(PoolType.V4Pool, subRoute)\n      return {\n        routev4: isOnlyV4\n          ? new V4Route(\n              (subRoute as V4PoolInRoute[]).map(RouterTradeAdapter.toV4Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev3: isOnlyV3\n          ? new V3Route(\n              (subRoute as V3PoolInRoute[]).map(RouterTradeAdapter.toV3Pool),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        routev2: isOnlyV2\n          ? new V2Route(\n              (subRoute as V2PoolInRoute[]).map(RouterTradeAdapter.toPair),\n              parsedCurrencyIn,\n              parsedCurrencyOut\n            )\n          : null,\n        mixedRoute:\n          !isOnlyV4 && !isOnlyV3 && !isOnlyV2\n            ? new MixedRouteSDK(subRoute.map(RouterTradeAdapter.toPoolOrPair), parsedCurrencyIn, parsedCurrencyOut)\n            : null,\n        inputAmount,\n        outputAmount,\n      }\n    })\n\n    return new RouterTrade({\n      v2Routes: typedRoutes\n        .filter((route) => route.routev2)\n        .map((route) => ({\n          routev2: route.routev2 as V2Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v3Routes: typedRoutes\n        .filter((route) => route.routev3)\n        .map((route) => ({\n          routev3: route.routev3 as V3Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      v4Routes: typedRoutes\n        .filter((route) => route.routev4)\n        .map((route) => ({\n          routev4: route.routev4 as V4Route<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      mixedRoutes: typedRoutes\n        .filter((route) => route.mixedRoute)\n        .map((route) => ({\n          mixedRoute: route.mixedRoute as MixedRouteSDK<Currency, Currency>,\n          inputAmount: route.inputAmount,\n          outputAmount: route.outputAmount,\n        })),\n      tradeType: quote.tradeType,\n    })\n  }\n\n  private static toCurrency(isNative: boolean, token: TokenInRoute): Currency {\n    if (isNative) {\n      return Ether.onChain(token.chainId)\n    }\n    return this.toToken(token)\n  }\n\n  private static toPoolOrPair = (pool: V4PoolInRoute | V3PoolInRoute | V2PoolInRoute): V4Pool | V3Pool | Pair => {\n    switch (pool.type) {\n      case PoolType.V4Pool:\n        return RouterTradeAdapter.toV4Pool(pool)\n      case PoolType.V3Pool:\n        return RouterTradeAdapter.toV3Pool(pool)\n      case PoolType.V2Pool:\n        return RouterTradeAdapter.toPair(pool)\n      default:\n        throw new Error('Invalid pool type')\n    }\n  }\n\n  private static toToken(token: TokenInRoute): Token {\n    const { chainId, address, decimals, symbol, buyFeeBps, sellFeeBps } = token\n    return new Token(\n      chainId,\n      address,\n      parseInt(decimals.toString()),\n      symbol,\n      /* name */ undefined,\n      false,\n      buyFeeBps ? BigNumber.from(buyFeeBps) : undefined,\n      sellFeeBps ? BigNumber.from(sellFeeBps) : undefined\n    )\n  }\n\n  private static toV3Pool({ fee, sqrtRatioX96, liquidity, tickCurrent, tokenIn, tokenOut }: V3PoolInRoute): V3Pool {\n    return new V3Pool(\n      RouterTradeAdapter.toToken(tokenIn),\n      RouterTradeAdapter.toToken(tokenOut),\n      parseInt(fee) as FeeAmount,\n      sqrtRatioX96,\n      liquidity,\n      parseInt(tickCurrent)\n    )\n  }\n\n  private static toV4Pool(pool: V4PoolInRoute): V4Pool {\n    const parsedCurrencyIn = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenIn.address), pool.tokenIn)\n    const parsedCurrencyOut = RouterTradeAdapter.toCurrency(isNativeCurrency(pool.tokenOut.address), pool.tokenOut)\n    return new V4Pool(\n      parsedCurrencyIn,\n      parsedCurrencyOut,\n      parseInt(pool.fee) as FeeAmount,\n      parseInt(pool.tickSpacing),\n      pool.hooks,\n      pool.sqrtRatioX96,\n      pool.liquidity,\n      parseInt(pool.tickCurrent)\n    )\n  }\n\n  private static toPair = ({ reserve0, reserve1 }: V2PoolInRoute): Pair => {\n    return new Pair(\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve0.token), reserve0.quotient),\n      CurrencyAmount.fromRawAmount(RouterTradeAdapter.toToken(reserve1.token), reserve1.quotient)\n    )\n  }\n\n  private static isVersionedRoute<T extends V2PoolInRoute | V3PoolInRoute | V4PoolInRoute>(\n    type: PoolType,\n    route: (V3PoolInRoute | V2PoolInRoute | V4PoolInRoute)[]\n  ): route is T[] {\n    return route.every((pool) => pool.type === type)\n  }\n}\n","import { ethers } from 'ethers'\nimport UniversalRouter from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { V4BaseActionsParser, V4RouterAction } from '@uniswap/v4-sdk'\nimport { CommandType, CommandDefinition, COMMAND_DEFINITION, Subparser, Parser } from '../utils/routerCommands'\n\nexport type Param = {\n  readonly name: string\n  readonly value: any\n}\n\nexport type UniversalRouterCommand = {\n  readonly commandName: string\n  readonly commandType: CommandType\n  readonly params: readonly Param[]\n}\n\nexport type UniversalRouterCall = {\n  readonly commands: readonly UniversalRouterCommand[]\n}\n\nexport type V3PathItem = {\n  readonly tokenIn: string\n  readonly tokenOut: string\n  readonly fee: number\n}\n\nexport interface CommandsDefinition {\n  [key: number]: CommandDefinition\n}\n\n// Parses UniversalRouter V2 commands\nexport abstract class CommandParser {\n  public static INTERFACE: Interface = new Interface(UniversalRouter.abi)\n\n  public static parseCalldata(calldata: string): UniversalRouterCall {\n    const genericParser = new GenericCommandParser(COMMAND_DEFINITION)\n    const txDescription = CommandParser.INTERFACE.parseTransaction({ data: calldata })\n    const { commands, inputs } = txDescription.args\n    return genericParser.parse(commands, inputs)\n  }\n}\n\n// Parses commands based on given command definition\nexport class GenericCommandParser {\n  constructor(private readonly commandDefinition: CommandsDefinition) {}\n\n  public parse(commands: string, inputs: string[]): UniversalRouterCall {\n    const commandTypes = GenericCommandParser.getCommands(commands)\n\n    return {\n      commands: commandTypes.map((commandType: CommandType, i: number) => {\n        const commandDef = this.commandDefinition[commandType]\n\n        if (commandDef.parser === Parser.V4Actions) {\n          const { actions } = V4BaseActionsParser.parseCalldata(inputs[i])\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: v4RouterCallToParams(actions),\n          }\n        } else if (commandDef.parser === Parser.Abi) {\n          const abiDef = commandDef.params\n          const rawParams = ethers.utils.defaultAbiCoder.decode(\n            abiDef.map((command) => command.type),\n            inputs[i]\n          )\n\n          const params = rawParams.map((param: any, j: number) => {\n            switch (abiDef[j].subparser) {\n              case Subparser.V3PathExactIn:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactIn(param),\n                }\n              case Subparser.V3PathExactOut:\n                return {\n                  name: abiDef[j].name,\n                  value: parseV3PathExactOut(param),\n                }\n              default:\n                return {\n                  name: abiDef[j].name,\n                  value: param,\n                }\n            }\n          })\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params,\n          }\n        } else if (commandDef.parser === Parser.V3Actions) {\n          // TODO: implement better parsing here\n          return {\n            commandName: CommandType[commandType],\n            commandType,\n            params: inputs.map((input) => ({ name: 'command', value: input })),\n          }\n        } else {\n          throw new Error(`Unsupported parser: ${commandDef}`)\n        }\n      }),\n    }\n  }\n\n  // parse command types from bytes string\n  private static getCommands(commands: string): CommandType[] {\n    const commandTypes: CommandType[] = []\n\n    for (let i = 2; i < commands.length; i += 2) {\n      const byte = commands.substring(i, i + 2)\n      commandTypes.push(parseInt(byte, 16) as CommandType)\n    }\n\n    return commandTypes\n  }\n}\n\nexport function parseV3PathExactIn(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(0, 40))\n  let loc = 40\n  const res: V3PathItem[] = []\n  while (loc < strippedPath.length) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const fee = parseInt(feeAndTokenOut.substring(0, 6), 16)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(6, 46))\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n    loc += 46\n  }\n\n  return res\n}\n\nexport function parseV3PathExactOut(path: string): readonly V3PathItem[] {\n  const strippedPath = path.replace('0x', '')\n  let tokenIn = ethers.utils.getAddress(strippedPath.substring(strippedPath.length - 40))\n  let loc = strippedPath.length - 86 // 86 = (20 addr + 3 fee + 20 addr) * 2 (for hex characters)\n  const res: V3PathItem[] = []\n  while (loc >= 0) {\n    const feeAndTokenOut = strippedPath.substring(loc, loc + 46)\n    const tokenOut = ethers.utils.getAddress(feeAndTokenOut.substring(0, 40))\n    const fee = parseInt(feeAndTokenOut.substring(40, 46), 16)\n\n    res.push({\n      tokenIn,\n      tokenOut,\n      fee,\n    })\n    tokenIn = tokenOut\n\n    loc -= 46\n  }\n\n  return res\n}\n\nfunction v4RouterCallToParams(actions: readonly V4RouterAction[]): readonly Param[] {\n  return actions.map((action) => {\n    return {\n      name: action.actionName,\n      value: action.params.map((param) => {\n        return {\n          name: param.name,\n          value: param.value,\n        }\n      }),\n    }\n  })\n}\n"],"names":["CommandType","Subparser","Parser","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","EXECUTE_SUB_PLAN","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","POOL_KEY_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","COMMAND_DEFINITION","_COMMAND_DEFINITION","parser","Abi","params","name","type","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","subparser","V3PathExactIn","V3_SWAP_EXACT_OUT","V3PathExactOut","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","V4_SWAP","V4Actions","WRAP_ETH","UNWRAP_WETH","SWEEP","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","V4_INITIALIZE_POOL","V3_POSITION_MANAGER_PERMIT","V3Actions","V3_POSITION_MANAGER_CALL","V4_POSITION_MANAGER_CALL","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","commandDef","defaultAbiCoder","encode","map","abi","getPathCurrency","currency","pool","involvesToken","wrapped","V4Pool","token0","equals","token1","symbol","RouterActionType","UniversalRouterVersion","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","_CHAIN_CONFIGS","weth","routerConfigs","_routerConfigs","V1_2","address","creationBlock","V2_0","_routerConfigs2","_routerConfigs3","_routerConfigs4","_routerConfigs5","_routerConfigs6","_routerConfigs7","_routerConfigs8","_routerConfigs9","_routerConfigs0","_routerConfigs1","_routerConfigs10","_routerConfigs11","_routerConfigs12","_routerConfigs13","_routerConfigs14","_routerConfigs15","_routerConfigs16","_routerConfigs17","_routerConfigs18","_routerConfigs19","_routerConfigs20","_routerConfigs21","_routerConfigs22","_routerConfigs23","UNIVERSAL_ROUTER_ADDRESS","version","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","E_ETH_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","getCurrencyAddress","isNative","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","inputRequiresWrap","inputRequiresUnwrap","useRouterBalance","payerIsUser","planner","_config","maximumAmountIn","slippageTolerance","inputAmount","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","length","routerMustCustody","outputRequiresTransition","hasFeeOption","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","V4","addV4Swap","MIXED","addMixedSwap","minimumAmountOut","pools","pathOutputCurrencyAddress","outputAmount","feeBips","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","outputRequiresUnwrap","outputRequiresWrap","riskOfPartialFill","safeMode","_createClass","key","get","result","_iterator2","_step2","firstPool","pathInput","lastRoute","lastPool","pathOutput","_ref","V2Trade","path","token","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","_ref3","p","v4Route","V4Route","V4Trade","slippageToleranceOnSwap","undefined","v4Planner","V4Planner","addTrade","addSettle","addTake","_options$recipient","finalize","tradeRecipient","_options$recipient2","V3Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","section","routePool","outputToken","getOutputOfPools","subRoute","MixedRoute","MixedRouteSDK","nextInputToken","swapRecipient","nextPool","v2PoolIsSwapRecipient","liquidityToken","v4SubRoute","input","output","addAction","Actions","SWAP_EXACT_IN","currencyIn","encodeV4RouteToPath","amountOutMinimum","encodeMixedRouteToPath","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeV3PositionPermit","permit","tokenId","calldata","NonfungiblePositionManager","INTERFACE","encodeFunctionData","validateAndParseAddress","spender","deadline","v","r","s","encodeInputTokenOptions","permit2TransferFrom","permit2Permit","details","process","env","NODE_ENV","invariant","isMint","Object","keys","some","k","SwapRouter","swapCallParameters","trades","inputCurrency","inputTokenPermit","nativeCurrencyValue","encodePlan","deadlineOrPreviousBlockhash","migrateV3ToV4CallParameters","positionManagerOverride","v4Pool","outputPosition","v3Token0","inputPosition","v3Token1","v4PositionManagerAddress","CHAIN_TO_ADDRESSES_MAP","currency0","currency1","v3RemoveLiquidityOptions","liquidityPercentage","equalTo","burnToken","collectOptions","v4AddLiquidityOptions","migrate","createPool","poolKey","getPoolKey","tickSpacing","hooks","sqrtRatioX96","universalRouterAddress","v3RemoveParams","V3PositionManager","removeCallParameters","v3Calls","Multicall","decodeMulticall","v3Call","selector","slice","getSighash","v4AddParams","V4PositionManager","addCallParameters","config","functionSignature","toHexString","Interface","UniversalRouter","UnwrapWETH","wethAddress","toLowerCase","permit2Data","_","PoolType","isNativeCurrency","RouterTradeAdapter","fromClassicQuote","quote","tokenIn","tokenOut","firstRoute","tokenInData","tokenOutData","parsedCurrencyIn","toCurrency","parsedCurrencyOut","typedRoutes","rawAmountIn","rawAmountOut","CurrencyAmount","fromRawAmount","isOnlyV2","isVersionedRoute","V2Pool","isOnlyV3","isOnlyV4","routev4","toV4Pool","routev3","V3Route","toV3Pool","routev2","V2Route","toPair","mixedRoute","toPoolOrPair","RouterTrade","v2Routes","filter","v3Routes","v4Routes","mixedRoutes","Ether","onChain","toToken","decimals","buyFeeBps","sellFeeBps","Token","parseInt","liquidity","tickCurrent","every","reserve0","reserve1","CommandParser","parseCalldata","genericParser","GenericCommandParser","txDescription","parseTransaction","data","_txDescription$args","args","parse","commandDefinition","commandTypes","getCommands","commandType","_this","_V4BaseActionsParser$","V4BaseActionsParser","actions","commandName","v4RouterCallToParams","abiDef","rawParams","decode","param","j","parseV3PathExactIn","parseV3PathExactOut","byte","substring","strippedPath","replace","getAddress","loc","res","feeAndTokenOut","action","actionName"],"mappings":"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"}
\ No newline at end of file
